#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PriceMe.RichAttributeDisplayTool.DataProcessTool
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="PriceMe")]
	public partial class AttributeCategoryComparisonDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAttributeCategoryComparison(AttributeCategoryComparison instance);
    partial void UpdateAttributeCategoryComparison(AttributeCategoryComparison instance);
    partial void DeleteAttributeCategoryComparison(AttributeCategoryComparison instance);
    #endregion
		
		public AttributeCategoryComparisonDataContext() : 
				base(global::PriceMe.RichAttributeDisplayTool.Properties.Settings.Default.PriceMeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AttributeCategoryComparisonDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AttributeCategoryComparisonDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AttributeCategoryComparisonDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AttributeCategoryComparisonDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AttributeCategoryComparison> AttributeCategoryComparisons
		{
			get
			{
				return this.GetTable<AttributeCategoryComparison>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AttributeCategoryComparison")]
	public partial class AttributeCategoryComparison : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Aid;
		
		private bool _IsHigherBetter;
		
		private string _Top10;
		
		private string _Top20;
		
		private string _Top30;
		
		private string _Average;
		
		private string _Bottom30;
		
		private string _Bottom20;
		
		private string _Bottom10;
		
		private System.Nullable<System.DateTime> _Createdon;
		
		private System.Nullable<System.DateTime> _Modifiedon;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAidChanging(int value);
    partial void OnAidChanged();
    partial void OnIsHigherBetterChanging(bool value);
    partial void OnIsHigherBetterChanged();
    partial void OnTop10Changing(string value);
    partial void OnTop10Changed();
    partial void OnTop20Changing(string value);
    partial void OnTop20Changed();
    partial void OnTop30Changing(string value);
    partial void OnTop30Changed();
    partial void OnAverageChanging(string value);
    partial void OnAverageChanged();
    partial void OnBottom30Changing(string value);
    partial void OnBottom30Changed();
    partial void OnBottom20Changing(string value);
    partial void OnBottom20Changed();
    partial void OnBottom10Changing(string value);
    partial void OnBottom10Changed();
    partial void OnCreatedonChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedonChanged();
    partial void OnModifiedonChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedonChanged();
    #endregion
		
		public AttributeCategoryComparison()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, IsVersion=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Aid", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Aid
		{
			get
			{
				return this._Aid;
			}
			set
			{
				if ((this._Aid != value))
				{
					this.OnAidChanging(value);
					this.SendPropertyChanging();
					this._Aid = value;
					this.SendPropertyChanged("Aid");
					this.OnAidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHigherBetter", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsHigherBetter
		{
			get
			{
				return this._IsHigherBetter;
			}
			set
			{
				if ((this._IsHigherBetter != value))
				{
					this.OnIsHigherBetterChanging(value);
					this.SendPropertyChanging();
					this._IsHigherBetter = value;
					this.SendPropertyChanged("IsHigherBetter");
					this.OnIsHigherBetterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Top10", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Top10
		{
			get
			{
				return this._Top10;
			}
			set
			{
				if ((this._Top10 != value))
				{
					this.OnTop10Changing(value);
					this.SendPropertyChanging();
					this._Top10 = value;
					this.SendPropertyChanged("Top10");
					this.OnTop10Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Top20", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Top20
		{
			get
			{
				return this._Top20;
			}
			set
			{
				if ((this._Top20 != value))
				{
					this.OnTop20Changing(value);
					this.SendPropertyChanging();
					this._Top20 = value;
					this.SendPropertyChanged("Top20");
					this.OnTop20Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Top30", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Top30
		{
			get
			{
				return this._Top30;
			}
			set
			{
				if ((this._Top30 != value))
				{
					this.OnTop30Changing(value);
					this.SendPropertyChanging();
					this._Top30 = value;
					this.SendPropertyChanged("Top30");
					this.OnTop30Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Average", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Average
		{
			get
			{
				return this._Average;
			}
			set
			{
				if ((this._Average != value))
				{
					this.OnAverageChanging(value);
					this.SendPropertyChanging();
					this._Average = value;
					this.SendPropertyChanged("Average");
					this.OnAverageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bottom30", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Bottom30
		{
			get
			{
				return this._Bottom30;
			}
			set
			{
				if ((this._Bottom30 != value))
				{
					this.OnBottom30Changing(value);
					this.SendPropertyChanging();
					this._Bottom30 = value;
					this.SendPropertyChanged("Bottom30");
					this.OnBottom30Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bottom20", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Bottom20
		{
			get
			{
				return this._Bottom20;
			}
			set
			{
				if ((this._Bottom20 != value))
				{
					this.OnBottom20Changing(value);
					this.SendPropertyChanging();
					this._Bottom20 = value;
					this.SendPropertyChanged("Bottom20");
					this.OnBottom20Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bottom10", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Bottom10
		{
			get
			{
				return this._Bottom10;
			}
			set
			{
				if ((this._Bottom10 != value))
				{
					this.OnBottom10Changing(value);
					this.SendPropertyChanging();
					this._Bottom10 = value;
					this.SendPropertyChanged("Bottom10");
					this.OnBottom10Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Createdon", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Createdon
		{
			get
			{
				return this._Createdon;
			}
			set
			{
				if ((this._Createdon != value))
				{
					this.OnCreatedonChanging(value);
					this.SendPropertyChanging();
					this._Createdon = value;
					this.SendPropertyChanged("Createdon");
					this.OnCreatedonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Modifiedon", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Modifiedon
		{
			get
			{
				return this._Modifiedon;
			}
			set
			{
				if ((this._Modifiedon != value))
				{
					this.OnModifiedonChanging(value);
					this.SendPropertyChanging();
					this._Modifiedon = value;
					this.SendPropertyChanged("Modifiedon");
					this.OnModifiedonChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
