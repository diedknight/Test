


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using SubSonic.DataProviders;
using SubSonic.Extensions;
using System.Linq.Expressions;
using SubSonic.Schema;
using System.Collections;
using SubSonic;
using SubSonic.Repository;
using System.ComponentModel;
using System.Data.Common;

namespace AliexpressDBA
{
    
    
    /// <summary>
    /// A class which represents the ProductAttribute table in the AliexpressDB Database.
    /// </summary>
    public partial class ProductAttribute: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ProductAttribute> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ProductAttribute>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ProductAttribute> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ProductAttribute item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ProductAttribute item=new ProductAttribute();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ProductAttribute> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ProductAttribute(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ProductAttribute.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ProductAttribute>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ProductAttribute(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ProductAttribute(Expression<Func<ProductAttribute, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ProductAttribute> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ProductAttribute> _repo;
            
            if(db.TestMode){
                ProductAttribute.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ProductAttribute>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ProductAttribute> GetRepo(){
            return GetRepo("","");
        }
        
        public static ProductAttribute SingleOrDefault(Expression<Func<ProductAttribute, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ProductAttribute single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ProductAttribute SingleOrDefault(Expression<Func<ProductAttribute, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ProductAttribute single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ProductAttribute, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ProductAttribute, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ProductAttribute> Find(Expression<Func<ProductAttribute, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ProductAttribute> Find(Expression<Func<ProductAttribute, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ProductAttribute> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ProductAttribute> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ProductAttribute> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ProductAttribute> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ProductAttribute> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ProductAttribute> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ProductAttribute)){
                ProductAttribute compare=(ProductAttribute)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<PredefinedProductAttributeValue> PredefinedProductAttributeValues
        {
            get
            {
                
                  var repo=AliexpressDBA.PredefinedProductAttributeValue.GetRepo();
                  return from items in repo.GetAll()
                       where items.ProductAttributeId == _Id
                       select items;
            }
        }

        public IQueryable<Product_ProductAttribute_Mapping> Product_ProductAttribute_Mappings
        {
            get
            {
                
                  var repo=AliexpressDBA.Product_ProductAttribute_Mapping.GetRepo();
                  return from items in repo.GetAll()
                       where items.ProductAttributeId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Description;
        public string Description
        {
            get { return _Description; }
            set
            {
                if(_Description!=value){
                    _Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ProductAttribute, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ActivityLog table in the AliexpressDB Database.
    /// </summary>
    public partial class ActivityLog: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ActivityLog> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ActivityLog>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ActivityLog> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ActivityLog item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ActivityLog item=new ActivityLog();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ActivityLog> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ActivityLog(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ActivityLog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ActivityLog>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ActivityLog(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ActivityLog(Expression<Func<ActivityLog, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ActivityLog> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ActivityLog> _repo;
            
            if(db.TestMode){
                ActivityLog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ActivityLog>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ActivityLog> GetRepo(){
            return GetRepo("","");
        }
        
        public static ActivityLog SingleOrDefault(Expression<Func<ActivityLog, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ActivityLog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ActivityLog SingleOrDefault(Expression<Func<ActivityLog, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ActivityLog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ActivityLog, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ActivityLog, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ActivityLog> Find(Expression<Func<ActivityLog, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ActivityLog> Find(Expression<Func<ActivityLog, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ActivityLog> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ActivityLog> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ActivityLog> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ActivityLog> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ActivityLog> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ActivityLog> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Comment.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ActivityLog)){
                ActivityLog compare=(ActivityLog)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Comment.ToString();
                    }

        public string DescriptorColumn() {
            return "Comment";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Comment";
        }
        
        #region ' Foreign Keys '
        public IQueryable<ActivityLogType> ActivityLogTypes
        {
            get
            {
                
                  var repo=AliexpressDBA.ActivityLogType.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ActivityLogTypeId
                       select items;
            }
        }

        public IQueryable<Customer> Customers
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ActivityLogTypeId;
        public int ActivityLogTypeId
        {
            get { return _ActivityLogTypeId; }
            set
            {
                if(_ActivityLogTypeId!=value){
                    _ActivityLogTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ActivityLogTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerId;
        public int CustomerId
        {
            get { return _CustomerId; }
            set
            {
                if(_CustomerId!=value){
                    _CustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Comment;
        public string Comment
        {
            get { return _Comment; }
            set
            {
                if(_Comment!=value){
                    _Comment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Comment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _IpAddress;
        public string IpAddress
        {
            get { return _IpAddress; }
            set
            {
                if(_IpAddress!=value){
                    _IpAddress=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IpAddress");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ActivityLog, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_PR_ProductRibbon table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_PR_ProductRibbon: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_PR_ProductRibbon> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_PR_ProductRibbon>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_PR_ProductRibbon> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_PR_ProductRibbon item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_PR_ProductRibbon item=new SS_PR_ProductRibbon();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_PR_ProductRibbon> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_PR_ProductRibbon(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_PR_ProductRibbon.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_PR_ProductRibbon>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_PR_ProductRibbon(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_PR_ProductRibbon(Expression<Func<SS_PR_ProductRibbon, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_PR_ProductRibbon> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_PR_ProductRibbon> _repo;
            
            if(db.TestMode){
                SS_PR_ProductRibbon.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_PR_ProductRibbon>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_PR_ProductRibbon> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_PR_ProductRibbon SingleOrDefault(Expression<Func<SS_PR_ProductRibbon, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_PR_ProductRibbon single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_PR_ProductRibbon SingleOrDefault(Expression<Func<SS_PR_ProductRibbon, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_PR_ProductRibbon single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_PR_ProductRibbon, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_PR_ProductRibbon, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_PR_ProductRibbon> Find(Expression<Func<SS_PR_ProductRibbon, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_PR_ProductRibbon> Find(Expression<Func<SS_PR_ProductRibbon, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_PR_ProductRibbon> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_PR_ProductRibbon> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_PR_ProductRibbon> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_PR_ProductRibbon> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_PR_ProductRibbon> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_PR_ProductRibbon> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_PR_ProductRibbon)){
                SS_PR_ProductRibbon compare=(SS_PR_ProductRibbon)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SS_PR_CategoryPageRibbon> SS_PR_CategoryPageRibbons
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_PR_CategoryPageRibbon.GetRepo();
                  return from items in repo.GetAll()
                       where items.ProductRibbonId == _Id
                       select items;
            }
        }

        public IQueryable<SS_PR_ProductPageRibbon> SS_PR_ProductPageRibbons
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_PR_ProductPageRibbon.GetRepo();
                  return from items in repo.GetAll()
                       where items.ProductRibbonId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Enabled;
        public bool Enabled
        {
            get { return _Enabled; }
            set
            {
                if(_Enabled!=value){
                    _Enabled=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Enabled");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _StopAddingRibbonsAftherThisOneIsAdded;
        public bool StopAddingRibbonsAftherThisOneIsAdded
        {
            get { return _StopAddingRibbonsAftherThisOneIsAdded; }
            set
            {
                if(_StopAddingRibbonsAftherThisOneIsAdded!=value){
                    _StopAddingRibbonsAftherThisOneIsAdded=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StopAddingRibbonsAftherThisOneIsAdded");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Priority;
        public int Priority
        {
            get { return _Priority; }
            set
            {
                if(_Priority!=value){
                    _Priority=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Priority");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _FromDate;
        public DateTime? FromDate
        {
            get { return _FromDate; }
            set
            {
                if(_FromDate!=value){
                    _FromDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FromDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ToDate;
        public DateTime? ToDate
        {
            get { return _ToDate; }
            set
            {
                if(_ToDate!=value){
                    _ToDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ToDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _LimitedToStores;
        public bool LimitedToStores
        {
            get { return _LimitedToStores; }
            set
            {
                if(_LimitedToStores!=value){
                    _LimitedToStores=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LimitedToStores");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_PR_ProductRibbon, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the StockQuantityHistory table in the AliexpressDB Database.
    /// </summary>
    public partial class StockQuantityHistory: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<StockQuantityHistory> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<StockQuantityHistory>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<StockQuantityHistory> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(StockQuantityHistory item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                StockQuantityHistory item=new StockQuantityHistory();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<StockQuantityHistory> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public StockQuantityHistory(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                StockQuantityHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<StockQuantityHistory>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public StockQuantityHistory(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public StockQuantityHistory(Expression<Func<StockQuantityHistory, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<StockQuantityHistory> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<StockQuantityHistory> _repo;
            
            if(db.TestMode){
                StockQuantityHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<StockQuantityHistory>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<StockQuantityHistory> GetRepo(){
            return GetRepo("","");
        }
        
        public static StockQuantityHistory SingleOrDefault(Expression<Func<StockQuantityHistory, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            StockQuantityHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static StockQuantityHistory SingleOrDefault(Expression<Func<StockQuantityHistory, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            StockQuantityHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<StockQuantityHistory, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<StockQuantityHistory, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<StockQuantityHistory> Find(Expression<Func<StockQuantityHistory, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<StockQuantityHistory> Find(Expression<Func<StockQuantityHistory, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<StockQuantityHistory> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<StockQuantityHistory> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<StockQuantityHistory> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<StockQuantityHistory> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<StockQuantityHistory> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<StockQuantityHistory> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Message.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(StockQuantityHistory)){
                StockQuantityHistory compare=(StockQuantityHistory)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Message.ToString();
                    }

        public string DescriptorColumn() {
            return "Message";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Message";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Product> Products
        {
            get
            {
                
                  var repo=AliexpressDBA.Product.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ProductId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _QuantityAdjustment;
        public int QuantityAdjustment
        {
            get { return _QuantityAdjustment; }
            set
            {
                if(_QuantityAdjustment!=value){
                    _QuantityAdjustment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="QuantityAdjustment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StockQuantity;
        public int StockQuantity
        {
            get { return _StockQuantity; }
            set
            {
                if(_StockQuantity!=value){
                    _StockQuantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StockQuantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Message;
        public string Message
        {
            get { return _Message; }
            set
            {
                if(_Message!=value){
                    _Message=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Message");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductId;
        public int ProductId
        {
            get { return _ProductId; }
            set
            {
                if(_ProductId!=value){
                    _ProductId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _CombinationId;
        public int? CombinationId
        {
            get { return _CombinationId; }
            set
            {
                if(_CombinationId!=value){
                    _CombinationId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CombinationId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _WarehouseId;
        public int? WarehouseId
        {
            get { return _WarehouseId; }
            set
            {
                if(_WarehouseId!=value){
                    _WarehouseId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WarehouseId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<StockQuantityHistory, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Forums_Forum table in the AliexpressDB Database.
    /// </summary>
    public partial class Forums_Forum: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Forums_Forum> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Forums_Forum>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Forums_Forum> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Forums_Forum item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Forums_Forum item=new Forums_Forum();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Forums_Forum> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Forums_Forum(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Forums_Forum.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Forums_Forum>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Forums_Forum(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Forums_Forum(Expression<Func<Forums_Forum, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Forums_Forum> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Forums_Forum> _repo;
            
            if(db.TestMode){
                Forums_Forum.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Forums_Forum>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Forums_Forum> GetRepo(){
            return GetRepo("","");
        }
        
        public static Forums_Forum SingleOrDefault(Expression<Func<Forums_Forum, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Forums_Forum single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Forums_Forum SingleOrDefault(Expression<Func<Forums_Forum, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Forums_Forum single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Forums_Forum, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Forums_Forum, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Forums_Forum> Find(Expression<Func<Forums_Forum, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Forums_Forum> Find(Expression<Func<Forums_Forum, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Forums_Forum> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Forums_Forum> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Forums_Forum> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Forums_Forum> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Forums_Forum> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Forums_Forum> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Forums_Forum)){
                Forums_Forum compare=(Forums_Forum)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Forums_Topic> Forums_Topics
        {
            get
            {
                
                  var repo=AliexpressDBA.Forums_Topic.GetRepo();
                  return from items in repo.GetAll()
                       where items.ForumId == _Id
                       select items;
            }
        }

        public IQueryable<Forums_Group> Forums_Groups
        {
            get
            {
                
                  var repo=AliexpressDBA.Forums_Group.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ForumGroupId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ForumGroupId;
        public int ForumGroupId
        {
            get { return _ForumGroupId; }
            set
            {
                if(_ForumGroupId!=value){
                    _ForumGroupId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ForumGroupId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Description;
        public string Description
        {
            get { return _Description; }
            set
            {
                if(_Description!=value){
                    _Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _NumTopics;
        public int NumTopics
        {
            get { return _NumTopics; }
            set
            {
                if(_NumTopics!=value){
                    _NumTopics=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NumTopics");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _NumPosts;
        public int NumPosts
        {
            get { return _NumPosts; }
            set
            {
                if(_NumPosts!=value){
                    _NumPosts=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NumPosts");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _LastTopicId;
        public int LastTopicId
        {
            get { return _LastTopicId; }
            set
            {
                if(_LastTopicId!=value){
                    _LastTopicId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastTopicId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _LastPostId;
        public int LastPostId
        {
            get { return _LastPostId; }
            set
            {
                if(_LastPostId!=value){
                    _LastPostId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastPostId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _LastPostCustomerId;
        public int LastPostCustomerId
        {
            get { return _LastPostCustomerId; }
            set
            {
                if(_LastPostCustomerId!=value){
                    _LastPostCustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastPostCustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _LastPostTime;
        public DateTime? LastPostTime
        {
            get { return _LastPostTime; }
            set
            {
                if(_LastPostTime!=value){
                    _LastPostTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastPostTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _UpdatedOnUtc;
        public DateTime UpdatedOnUtc
        {
            get { return _UpdatedOnUtc; }
            set
            {
                if(_UpdatedOnUtc!=value){
                    _UpdatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Forums_Forum, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ProductAttributeCombination table in the AliexpressDB Database.
    /// </summary>
    public partial class ProductAttributeCombination: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ProductAttributeCombination> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ProductAttributeCombination>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ProductAttributeCombination> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ProductAttributeCombination item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ProductAttributeCombination item=new ProductAttributeCombination();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ProductAttributeCombination> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ProductAttributeCombination(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ProductAttributeCombination.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ProductAttributeCombination>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ProductAttributeCombination(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ProductAttributeCombination(Expression<Func<ProductAttributeCombination, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ProductAttributeCombination> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ProductAttributeCombination> _repo;
            
            if(db.TestMode){
                ProductAttributeCombination.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ProductAttributeCombination>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ProductAttributeCombination> GetRepo(){
            return GetRepo("","");
        }
        
        public static ProductAttributeCombination SingleOrDefault(Expression<Func<ProductAttributeCombination, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ProductAttributeCombination single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ProductAttributeCombination SingleOrDefault(Expression<Func<ProductAttributeCombination, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ProductAttributeCombination single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ProductAttributeCombination, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ProductAttributeCombination, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ProductAttributeCombination> Find(Expression<Func<ProductAttributeCombination, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ProductAttributeCombination> Find(Expression<Func<ProductAttributeCombination, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ProductAttributeCombination> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ProductAttributeCombination> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ProductAttributeCombination> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ProductAttributeCombination> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ProductAttributeCombination> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ProductAttributeCombination> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.AttributesXml.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ProductAttributeCombination)){
                ProductAttributeCombination compare=(ProductAttributeCombination)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.AttributesXml.ToString();
                    }

        public string DescriptorColumn() {
            return "AttributesXml";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "AttributesXml";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Product> Products
        {
            get
            {
                
                  var repo=AliexpressDBA.Product.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ProductId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductId;
        public int ProductId
        {
            get { return _ProductId; }
            set
            {
                if(_ProductId!=value){
                    _ProductId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AttributesXml;
        public string AttributesXml
        {
            get { return _AttributesXml; }
            set
            {
                if(_AttributesXml!=value){
                    _AttributesXml=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AttributesXml");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StockQuantity;
        public int StockQuantity
        {
            get { return _StockQuantity; }
            set
            {
                if(_StockQuantity!=value){
                    _StockQuantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StockQuantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _AllowOutOfStockOrders;
        public bool AllowOutOfStockOrders
        {
            get { return _AllowOutOfStockOrders; }
            set
            {
                if(_AllowOutOfStockOrders!=value){
                    _AllowOutOfStockOrders=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AllowOutOfStockOrders");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Sku;
        public string Sku
        {
            get { return _Sku; }
            set
            {
                if(_Sku!=value){
                    _Sku=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Sku");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ManufacturerPartNumber;
        public string ManufacturerPartNumber
        {
            get { return _ManufacturerPartNumber; }
            set
            {
                if(_ManufacturerPartNumber!=value){
                    _ManufacturerPartNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ManufacturerPartNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Gtin;
        public string Gtin
        {
            get { return _Gtin; }
            set
            {
                if(_Gtin!=value){
                    _Gtin=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Gtin");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal? _OverriddenPrice;
        public decimal? OverriddenPrice
        {
            get { return _OverriddenPrice; }
            set
            {
                if(_OverriddenPrice!=value){
                    _OverriddenPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OverriddenPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _NotifyAdminForQuantityBelow;
        public int NotifyAdminForQuantityBelow
        {
            get { return _NotifyAdminForQuantityBelow; }
            set
            {
                if(_NotifyAdminForQuantityBelow!=value){
                    _NotifyAdminForQuantityBelow=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NotifyAdminForQuantityBelow");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ProductAttributeCombination, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ActivityLogType table in the AliexpressDB Database.
    /// </summary>
    public partial class ActivityLogType: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ActivityLogType> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ActivityLogType>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ActivityLogType> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ActivityLogType item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ActivityLogType item=new ActivityLogType();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ActivityLogType> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ActivityLogType(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ActivityLogType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ActivityLogType>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ActivityLogType(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ActivityLogType(Expression<Func<ActivityLogType, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ActivityLogType> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ActivityLogType> _repo;
            
            if(db.TestMode){
                ActivityLogType.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ActivityLogType>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ActivityLogType> GetRepo(){
            return GetRepo("","");
        }
        
        public static ActivityLogType SingleOrDefault(Expression<Func<ActivityLogType, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ActivityLogType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ActivityLogType SingleOrDefault(Expression<Func<ActivityLogType, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ActivityLogType single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ActivityLogType, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ActivityLogType, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ActivityLogType> Find(Expression<Func<ActivityLogType, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ActivityLogType> Find(Expression<Func<ActivityLogType, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ActivityLogType> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ActivityLogType> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ActivityLogType> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ActivityLogType> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ActivityLogType> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ActivityLogType> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.SystemKeyword.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ActivityLogType)){
                ActivityLogType compare=(ActivityLogType)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.SystemKeyword.ToString();
                    }

        public string DescriptorColumn() {
            return "SystemKeyword";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "SystemKeyword";
        }
        
        #region ' Foreign Keys '
        public IQueryable<ActivityLog> ActivityLogs
        {
            get
            {
                
                  var repo=AliexpressDBA.ActivityLog.GetRepo();
                  return from items in repo.GetAll()
                       where items.ActivityLogTypeId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SystemKeyword;
        public string SystemKeyword
        {
            get { return _SystemKeyword; }
            set
            {
                if(_SystemKeyword!=value){
                    _SystemKeyword=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SystemKeyword");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Enabled;
        public bool Enabled
        {
            get { return _Enabled; }
            set
            {
                if(_Enabled!=value){
                    _Enabled=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Enabled");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ActivityLogType, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_PR_RibbonPicture table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_PR_RibbonPicture: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_PR_RibbonPicture> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_PR_RibbonPicture>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_PR_RibbonPicture> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_PR_RibbonPicture item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_PR_RibbonPicture item=new SS_PR_RibbonPicture();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_PR_RibbonPicture> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_PR_RibbonPicture(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_PR_RibbonPicture.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_PR_RibbonPicture>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_PR_RibbonPicture(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_PR_RibbonPicture(Expression<Func<SS_PR_RibbonPicture, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_PR_RibbonPicture> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_PR_RibbonPicture> _repo;
            
            if(db.TestMode){
                SS_PR_RibbonPicture.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_PR_RibbonPicture>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_PR_RibbonPicture> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_PR_RibbonPicture SingleOrDefault(Expression<Func<SS_PR_RibbonPicture, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_PR_RibbonPicture single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_PR_RibbonPicture SingleOrDefault(Expression<Func<SS_PR_RibbonPicture, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_PR_RibbonPicture single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_PR_RibbonPicture, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_PR_RibbonPicture, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_PR_RibbonPicture> Find(Expression<Func<SS_PR_RibbonPicture, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_PR_RibbonPicture> Find(Expression<Func<SS_PR_RibbonPicture, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_PR_RibbonPicture> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_PR_RibbonPicture> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_PR_RibbonPicture> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_PR_RibbonPicture> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_PR_RibbonPicture> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_PR_RibbonPicture> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.PictureId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_PR_RibbonPicture)){
                SS_PR_RibbonPicture compare=(SS_PR_RibbonPicture)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.PictureId.ToString();
                    }

        public string DescriptorColumn() {
            return "PictureId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "PictureId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SS_PR_CategoryPageRibbon> SS_PR_CategoryPageRibbons
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_PR_CategoryPageRibbon.GetRepo();
                  return from items in repo.GetAll()
                       where items.PictureId == _Id
                       select items;
            }
        }

        public IQueryable<SS_PR_ProductPageRibbon> SS_PR_ProductPageRibbons
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_PR_ProductPageRibbon.GetRepo();
                  return from items in repo.GetAll()
                       where items.PictureId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PictureId;
        public int PictureId
        {
            get { return _PictureId; }
            set
            {
                if(_PictureId!=value){
                    _PictureId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PictureId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_PR_RibbonPicture, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Store table in the AliexpressDB Database.
    /// </summary>
    public partial class Store: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Store> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Store>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Store> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Store item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Store item=new Store();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Store> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Store(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Store.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Store>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Store(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Store(Expression<Func<Store, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Store> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Store> _repo;
            
            if(db.TestMode){
                Store.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Store>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Store> GetRepo(){
            return GetRepo("","");
        }
        
        public static Store SingleOrDefault(Expression<Func<Store, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Store single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Store SingleOrDefault(Expression<Func<Store, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Store single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Store, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Store, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Store> Find(Expression<Func<Store, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Store> Find(Expression<Func<Store, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Store> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Store> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Store> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Store> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Store> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Store> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Store)){
                Store compare=(Store)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<BlogComment> BlogComments
        {
            get
            {
                
                  var repo=AliexpressDBA.BlogComment.GetRepo();
                  return from items in repo.GetAll()
                       where items.StoreId == _Id
                       select items;
            }
        }

        public IQueryable<NewsComment> NewsComments
        {
            get
            {
                
                  var repo=AliexpressDBA.NewsComment.GetRepo();
                  return from items in repo.GetAll()
                       where items.StoreId == _Id
                       select items;
            }
        }

        public IQueryable<ProductReview> ProductReviews
        {
            get
            {
                
                  var repo=AliexpressDBA.ProductReview.GetRepo();
                  return from items in repo.GetAll()
                       where items.StoreId == _Id
                       select items;
            }
        }

        public IQueryable<StoreMapping> StoreMappings
        {
            get
            {
                
                  var repo=AliexpressDBA.StoreMapping.GetRepo();
                  return from items in repo.GetAll()
                       where items.StoreId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Url;
        public string Url
        {
            get { return _Url; }
            set
            {
                if(_Url!=value){
                    _Url=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Url");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _SslEnabled;
        public bool SslEnabled
        {
            get { return _SslEnabled; }
            set
            {
                if(_SslEnabled!=value){
                    _SslEnabled=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SslEnabled");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SecureUrl;
        public string SecureUrl
        {
            get { return _SecureUrl; }
            set
            {
                if(_SecureUrl!=value){
                    _SecureUrl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SecureUrl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Hosts;
        public string Hosts
        {
            get { return _Hosts; }
            set
            {
                if(_Hosts!=value){
                    _Hosts=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Hosts");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DefaultLanguageId;
        public int DefaultLanguageId
        {
            get { return _DefaultLanguageId; }
            set
            {
                if(_DefaultLanguageId!=value){
                    _DefaultLanguageId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DefaultLanguageId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CompanyName;
        public string CompanyName
        {
            get { return _CompanyName; }
            set
            {
                if(_CompanyName!=value){
                    _CompanyName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CompanyName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CompanyAddress;
        public string CompanyAddress
        {
            get { return _CompanyAddress; }
            set
            {
                if(_CompanyAddress!=value){
                    _CompanyAddress=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CompanyAddress");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CompanyPhoneNumber;
        public string CompanyPhoneNumber
        {
            get { return _CompanyPhoneNumber; }
            set
            {
                if(_CompanyPhoneNumber!=value){
                    _CompanyPhoneNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CompanyPhoneNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CompanyVat;
        public string CompanyVat
        {
            get { return _CompanyVat; }
            set
            {
                if(_CompanyVat!=value){
                    _CompanyVat=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CompanyVat");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Store, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Forums_Group table in the AliexpressDB Database.
    /// </summary>
    public partial class Forums_Group: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Forums_Group> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Forums_Group>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Forums_Group> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Forums_Group item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Forums_Group item=new Forums_Group();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Forums_Group> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Forums_Group(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Forums_Group.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Forums_Group>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Forums_Group(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Forums_Group(Expression<Func<Forums_Group, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Forums_Group> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Forums_Group> _repo;
            
            if(db.TestMode){
                Forums_Group.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Forums_Group>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Forums_Group> GetRepo(){
            return GetRepo("","");
        }
        
        public static Forums_Group SingleOrDefault(Expression<Func<Forums_Group, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Forums_Group single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Forums_Group SingleOrDefault(Expression<Func<Forums_Group, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Forums_Group single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Forums_Group, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Forums_Group, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Forums_Group> Find(Expression<Func<Forums_Group, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Forums_Group> Find(Expression<Func<Forums_Group, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Forums_Group> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Forums_Group> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Forums_Group> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Forums_Group> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Forums_Group> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Forums_Group> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Forums_Group)){
                Forums_Group compare=(Forums_Group)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Forums_Forum> Forums_Forums
        {
            get
            {
                
                  var repo=AliexpressDBA.Forums_Forum.GetRepo();
                  return from items in repo.GetAll()
                       where items.ForumGroupId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _UpdatedOnUtc;
        public DateTime UpdatedOnUtc
        {
            get { return _UpdatedOnUtc; }
            set
            {
                if(_UpdatedOnUtc!=value){
                    _UpdatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Forums_Group, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Product_ProductAttribute_Mapping table in the AliexpressDB Database.
    /// </summary>
    public partial class Product_ProductAttribute_Mapping: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Product_ProductAttribute_Mapping> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Product_ProductAttribute_Mapping>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Product_ProductAttribute_Mapping> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Product_ProductAttribute_Mapping item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Product_ProductAttribute_Mapping item=new Product_ProductAttribute_Mapping();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Product_ProductAttribute_Mapping> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Product_ProductAttribute_Mapping(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Product_ProductAttribute_Mapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Product_ProductAttribute_Mapping>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Product_ProductAttribute_Mapping(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Product_ProductAttribute_Mapping(Expression<Func<Product_ProductAttribute_Mapping, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Product_ProductAttribute_Mapping> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Product_ProductAttribute_Mapping> _repo;
            
            if(db.TestMode){
                Product_ProductAttribute_Mapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Product_ProductAttribute_Mapping>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Product_ProductAttribute_Mapping> GetRepo(){
            return GetRepo("","");
        }
        
        public static Product_ProductAttribute_Mapping SingleOrDefault(Expression<Func<Product_ProductAttribute_Mapping, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Product_ProductAttribute_Mapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Product_ProductAttribute_Mapping SingleOrDefault(Expression<Func<Product_ProductAttribute_Mapping, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Product_ProductAttribute_Mapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Product_ProductAttribute_Mapping, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Product_ProductAttribute_Mapping, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Product_ProductAttribute_Mapping> Find(Expression<Func<Product_ProductAttribute_Mapping, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Product_ProductAttribute_Mapping> Find(Expression<Func<Product_ProductAttribute_Mapping, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Product_ProductAttribute_Mapping> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Product_ProductAttribute_Mapping> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Product_ProductAttribute_Mapping> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Product_ProductAttribute_Mapping> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Product_ProductAttribute_Mapping> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Product_ProductAttribute_Mapping> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.TextPrompt.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Product_ProductAttribute_Mapping)){
                Product_ProductAttribute_Mapping compare=(Product_ProductAttribute_Mapping)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.TextPrompt.ToString();
                    }

        public string DescriptorColumn() {
            return "TextPrompt";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "TextPrompt";
        }
        
        #region ' Foreign Keys '
        public IQueryable<ProductAttributeValue> ProductAttributeValues
        {
            get
            {
                
                  var repo=AliexpressDBA.ProductAttributeValue.GetRepo();
                  return from items in repo.GetAll()
                       where items.ProductAttributeMappingId == _Id
                       select items;
            }
        }

        public IQueryable<Product> Products
        {
            get
            {
                
                  var repo=AliexpressDBA.Product.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ProductId
                       select items;
            }
        }

        public IQueryable<ProductAttribute> ProductAttributes
        {
            get
            {
                
                  var repo=AliexpressDBA.ProductAttribute.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ProductAttributeId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductId;
        public int ProductId
        {
            get { return _ProductId; }
            set
            {
                if(_ProductId!=value){
                    _ProductId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductAttributeId;
        public int ProductAttributeId
        {
            get { return _ProductAttributeId; }
            set
            {
                if(_ProductAttributeId!=value){
                    _ProductAttributeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductAttributeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TextPrompt;
        public string TextPrompt
        {
            get { return _TextPrompt; }
            set
            {
                if(_TextPrompt!=value){
                    _TextPrompt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TextPrompt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsRequired;
        public bool IsRequired
        {
            get { return _IsRequired; }
            set
            {
                if(_IsRequired!=value){
                    _IsRequired=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsRequired");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AttributeControlTypeId;
        public int AttributeControlTypeId
        {
            get { return _AttributeControlTypeId; }
            set
            {
                if(_AttributeControlTypeId!=value){
                    _AttributeControlTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AttributeControlTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ValidationMinLength;
        public int? ValidationMinLength
        {
            get { return _ValidationMinLength; }
            set
            {
                if(_ValidationMinLength!=value){
                    _ValidationMinLength=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ValidationMinLength");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ValidationMaxLength;
        public int? ValidationMaxLength
        {
            get { return _ValidationMaxLength; }
            set
            {
                if(_ValidationMaxLength!=value){
                    _ValidationMaxLength=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ValidationMaxLength");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ValidationFileAllowedExtensions;
        public string ValidationFileAllowedExtensions
        {
            get { return _ValidationFileAllowedExtensions; }
            set
            {
                if(_ValidationFileAllowedExtensions!=value){
                    _ValidationFileAllowedExtensions=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ValidationFileAllowedExtensions");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ValidationFileMaximumSize;
        public int? ValidationFileMaximumSize
        {
            get { return _ValidationFileMaximumSize; }
            set
            {
                if(_ValidationFileMaximumSize!=value){
                    _ValidationFileMaximumSize=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ValidationFileMaximumSize");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DefaultValue;
        public string DefaultValue
        {
            get { return _DefaultValue; }
            set
            {
                if(_DefaultValue!=value){
                    _DefaultValue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DefaultValue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ConditionAttributeXml;
        public string ConditionAttributeXml
        {
            get { return _ConditionAttributeXml; }
            set
            {
                if(_ConditionAttributeXml!=value){
                    _ConditionAttributeXml=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConditionAttributeXml");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Product_ProductAttribute_Mapping, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Address table in the AliexpressDB Database.
    /// </summary>
    public partial class Address: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Address> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Address>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Address> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Address item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Address item=new Address();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Address> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Address(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Address.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Address>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Address(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Address(Expression<Func<Address, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Address> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Address> _repo;
            
            if(db.TestMode){
                Address.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Address>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Address> GetRepo(){
            return GetRepo("","");
        }
        
        public static Address SingleOrDefault(Expression<Func<Address, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Address single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Address SingleOrDefault(Expression<Func<Address, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Address single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Address, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Address, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Address> Find(Expression<Func<Address, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Address> Find(Expression<Func<Address, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Address> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Address> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Address> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Address> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Address> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Address> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.FirstName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Address)){
                Address compare=(Address)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.FirstName.ToString();
                    }

        public string DescriptorColumn() {
            return "FirstName";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "FirstName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Affiliate> Affiliates
        {
            get
            {
                
                  var repo=AliexpressDBA.Affiliate.GetRepo();
                  return from items in repo.GetAll()
                       where items.AddressId == _Id
                       select items;
            }
        }

        public IQueryable<CustomerAddress> CustomerAddresses
        {
            get
            {
                
                  var repo=AliexpressDBA.CustomerAddress.GetRepo();
                  return from items in repo.GetAll()
                       where items.Address_Id == _Id
                       select items;
            }
        }

        public IQueryable<Customer> Customers
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.BillingAddress_Id == _Id
                       select items;
            }
        }

        public IQueryable<Customer> Customers3
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.ShippingAddress_Id == _Id
                       select items;
            }
        }

        public IQueryable<Order> Orders
        {
            get
            {
                
                  var repo=AliexpressDBA.Order.GetRepo();
                  return from items in repo.GetAll()
                       where items.BillingAddressId == _Id
                       select items;
            }
        }

        public IQueryable<Order> Orders5
        {
            get
            {
                
                  var repo=AliexpressDBA.Order.GetRepo();
                  return from items in repo.GetAll()
                       where items.PickupAddressId == _Id
                       select items;
            }
        }

        public IQueryable<Order> Orders6
        {
            get
            {
                
                  var repo=AliexpressDBA.Order.GetRepo();
                  return from items in repo.GetAll()
                       where items.ShippingAddressId == _Id
                       select items;
            }
        }

        public IQueryable<Country> Countries
        {
            get
            {
                
                  var repo=AliexpressDBA.Country.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CountryId
                       select items;
            }
        }

        public IQueryable<StateProvince> StateProvinces
        {
            get
            {
                
                  var repo=AliexpressDBA.StateProvince.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _StateProvinceId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FirstName;
        public string FirstName
        {
            get { return _FirstName; }
            set
            {
                if(_FirstName!=value){
                    _FirstName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FirstName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LastName;
        public string LastName
        {
            get { return _LastName; }
            set
            {
                if(_LastName!=value){
                    _LastName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Email;
        public string Email
        {
            get { return _Email; }
            set
            {
                if(_Email!=value){
                    _Email=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Email");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Company;
        public string Company
        {
            get { return _Company; }
            set
            {
                if(_Company!=value){
                    _Company=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Company");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _CountryId;
        public int? CountryId
        {
            get { return _CountryId; }
            set
            {
                if(_CountryId!=value){
                    _CountryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _StateProvinceId;
        public int? StateProvinceId
        {
            get { return _StateProvinceId; }
            set
            {
                if(_StateProvinceId!=value){
                    _StateProvinceId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StateProvinceId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _City;
        public string City
        {
            get { return _City; }
            set
            {
                if(_City!=value){
                    _City=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="City");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Address1;
        public string Address1
        {
            get { return _Address1; }
            set
            {
                if(_Address1!=value){
                    _Address1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Address1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Address2;
        public string Address2
        {
            get { return _Address2; }
            set
            {
                if(_Address2!=value){
                    _Address2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Address2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ZipPostalCode;
        public string ZipPostalCode
        {
            get { return _ZipPostalCode; }
            set
            {
                if(_ZipPostalCode!=value){
                    _ZipPostalCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ZipPostalCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PhoneNumber;
        public string PhoneNumber
        {
            get { return _PhoneNumber; }
            set
            {
                if(_PhoneNumber!=value){
                    _PhoneNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PhoneNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FaxNumber;
        public string FaxNumber
        {
            get { return _FaxNumber; }
            set
            {
                if(_FaxNumber!=value){
                    _FaxNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FaxNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CustomAttributes;
        public string CustomAttributes
        {
            get { return _CustomAttributes; }
            set
            {
                if(_CustomAttributes!=value){
                    _CustomAttributes=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomAttributes");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Address, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the StoreMapping table in the AliexpressDB Database.
    /// </summary>
    public partial class StoreMapping: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<StoreMapping> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<StoreMapping>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<StoreMapping> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(StoreMapping item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                StoreMapping item=new StoreMapping();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<StoreMapping> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public StoreMapping(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                StoreMapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<StoreMapping>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public StoreMapping(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public StoreMapping(Expression<Func<StoreMapping, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<StoreMapping> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<StoreMapping> _repo;
            
            if(db.TestMode){
                StoreMapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<StoreMapping>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<StoreMapping> GetRepo(){
            return GetRepo("","");
        }
        
        public static StoreMapping SingleOrDefault(Expression<Func<StoreMapping, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            StoreMapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static StoreMapping SingleOrDefault(Expression<Func<StoreMapping, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            StoreMapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<StoreMapping, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<StoreMapping, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<StoreMapping> Find(Expression<Func<StoreMapping, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<StoreMapping> Find(Expression<Func<StoreMapping, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<StoreMapping> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<StoreMapping> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<StoreMapping> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<StoreMapping> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<StoreMapping> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<StoreMapping> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.EntityName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(StoreMapping)){
                StoreMapping compare=(StoreMapping)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.EntityName.ToString();
                    }

        public string DescriptorColumn() {
            return "EntityName";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "EntityName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Store> Stores
        {
            get
            {
                
                  var repo=AliexpressDBA.Store.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _StoreId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _EntityId;
        public int EntityId
        {
            get { return _EntityId; }
            set
            {
                if(_EntityId!=value){
                    _EntityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EntityName;
        public string EntityName
        {
            get { return _EntityName; }
            set
            {
                if(_EntityName!=value){
                    _EntityName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StoreId;
        public int StoreId
        {
            get { return _StoreId; }
            set
            {
                if(_StoreId!=value){
                    _StoreId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StoreId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<StoreMapping, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Forums_Post table in the AliexpressDB Database.
    /// </summary>
    public partial class Forums_Post: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Forums_Post> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Forums_Post>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Forums_Post> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Forums_Post item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Forums_Post item=new Forums_Post();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Forums_Post> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Forums_Post(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Forums_Post.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Forums_Post>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Forums_Post(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Forums_Post(Expression<Func<Forums_Post, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Forums_Post> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Forums_Post> _repo;
            
            if(db.TestMode){
                Forums_Post.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Forums_Post>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Forums_Post> GetRepo(){
            return GetRepo("","");
        }
        
        public static Forums_Post SingleOrDefault(Expression<Func<Forums_Post, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Forums_Post single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Forums_Post SingleOrDefault(Expression<Func<Forums_Post, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Forums_Post single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Forums_Post, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Forums_Post, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Forums_Post> Find(Expression<Func<Forums_Post, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Forums_Post> Find(Expression<Func<Forums_Post, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Forums_Post> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Forums_Post> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Forums_Post> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Forums_Post> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Forums_Post> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Forums_Post> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Text.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Forums_Post)){
                Forums_Post compare=(Forums_Post)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Text.ToString();
                    }

        public string DescriptorColumn() {
            return "Text";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Text";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Customer> Customers
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerId
                       select items;
            }
        }

        public IQueryable<Forums_PostVote> Forums_PostVotes
        {
            get
            {
                
                  var repo=AliexpressDBA.Forums_PostVote.GetRepo();
                  return from items in repo.GetAll()
                       where items.ForumPostId == _Id
                       select items;
            }
        }

        public IQueryable<Forums_Topic> Forums_Topics
        {
            get
            {
                
                  var repo=AliexpressDBA.Forums_Topic.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _TopicId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TopicId;
        public int TopicId
        {
            get { return _TopicId; }
            set
            {
                if(_TopicId!=value){
                    _TopicId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TopicId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerId;
        public int CustomerId
        {
            get { return _CustomerId; }
            set
            {
                if(_CustomerId!=value){
                    _CustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Text;
        public string Text
        {
            get { return _Text; }
            set
            {
                if(_Text!=value){
                    _Text=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Text");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _IPAddress;
        public string IPAddress
        {
            get { return _IPAddress; }
            set
            {
                if(_IPAddress!=value){
                    _IPAddress=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IPAddress");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _UpdatedOnUtc;
        public DateTime UpdatedOnUtc
        {
            get { return _UpdatedOnUtc; }
            set
            {
                if(_UpdatedOnUtc!=value){
                    _UpdatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _VoteCount;
        public int VoteCount
        {
            get { return _VoteCount; }
            set
            {
                if(_VoteCount!=value){
                    _VoteCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VoteCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Forums_Post, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ProductAttributeValue table in the AliexpressDB Database.
    /// </summary>
    public partial class ProductAttributeValue: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ProductAttributeValue> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ProductAttributeValue>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ProductAttributeValue> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ProductAttributeValue item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ProductAttributeValue item=new ProductAttributeValue();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ProductAttributeValue> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ProductAttributeValue(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ProductAttributeValue.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ProductAttributeValue>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ProductAttributeValue(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ProductAttributeValue(Expression<Func<ProductAttributeValue, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ProductAttributeValue> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ProductAttributeValue> _repo;
            
            if(db.TestMode){
                ProductAttributeValue.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ProductAttributeValue>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ProductAttributeValue> GetRepo(){
            return GetRepo("","");
        }
        
        public static ProductAttributeValue SingleOrDefault(Expression<Func<ProductAttributeValue, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ProductAttributeValue single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ProductAttributeValue SingleOrDefault(Expression<Func<ProductAttributeValue, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ProductAttributeValue single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ProductAttributeValue, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ProductAttributeValue, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ProductAttributeValue> Find(Expression<Func<ProductAttributeValue, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ProductAttributeValue> Find(Expression<Func<ProductAttributeValue, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ProductAttributeValue> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ProductAttributeValue> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ProductAttributeValue> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ProductAttributeValue> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ProductAttributeValue> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ProductAttributeValue> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ProductAttributeValue)){
                ProductAttributeValue compare=(ProductAttributeValue)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Product_ProductAttribute_Mapping> Product_ProductAttribute_Mappings
        {
            get
            {
                
                  var repo=AliexpressDBA.Product_ProductAttribute_Mapping.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ProductAttributeMappingId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductAttributeMappingId;
        public int ProductAttributeMappingId
        {
            get { return _ProductAttributeMappingId; }
            set
            {
                if(_ProductAttributeMappingId!=value){
                    _ProductAttributeMappingId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductAttributeMappingId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AttributeValueTypeId;
        public int AttributeValueTypeId
        {
            get { return _AttributeValueTypeId; }
            set
            {
                if(_AttributeValueTypeId!=value){
                    _AttributeValueTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AttributeValueTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AssociatedProductId;
        public int AssociatedProductId
        {
            get { return _AssociatedProductId; }
            set
            {
                if(_AssociatedProductId!=value){
                    _AssociatedProductId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AssociatedProductId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ColorSquaresRgb;
        public string ColorSquaresRgb
        {
            get { return _ColorSquaresRgb; }
            set
            {
                if(_ColorSquaresRgb!=value){
                    _ColorSquaresRgb=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ColorSquaresRgb");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ImageSquaresPictureId;
        public int ImageSquaresPictureId
        {
            get { return _ImageSquaresPictureId; }
            set
            {
                if(_ImageSquaresPictureId!=value){
                    _ImageSquaresPictureId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ImageSquaresPictureId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _PriceAdjustment;
        public decimal PriceAdjustment
        {
            get { return _PriceAdjustment; }
            set
            {
                if(_PriceAdjustment!=value){
                    _PriceAdjustment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PriceAdjustment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _WeightAdjustment;
        public decimal WeightAdjustment
        {
            get { return _WeightAdjustment; }
            set
            {
                if(_WeightAdjustment!=value){
                    _WeightAdjustment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WeightAdjustment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _Cost;
        public decimal Cost
        {
            get { return _Cost; }
            set
            {
                if(_Cost!=value){
                    _Cost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Cost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _CustomerEntersQty;
        public bool CustomerEntersQty
        {
            get { return _CustomerEntersQty; }
            set
            {
                if(_CustomerEntersQty!=value){
                    _CustomerEntersQty=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerEntersQty");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Quantity;
        public int Quantity
        {
            get { return _Quantity; }
            set
            {
                if(_Quantity!=value){
                    _Quantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Quantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsPreSelected;
        public bool IsPreSelected
        {
            get { return _IsPreSelected; }
            set
            {
                if(_IsPreSelected!=value){
                    _IsPreSelected=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsPreSelected");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PictureId;
        public int PictureId
        {
            get { return _PictureId; }
            set
            {
                if(_PictureId!=value){
                    _PictureId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PictureId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ProductAttributeValue, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the AddressAttribute table in the AliexpressDB Database.
    /// </summary>
    public partial class AddressAttribute: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<AddressAttribute> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<AddressAttribute>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<AddressAttribute> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(AddressAttribute item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                AddressAttribute item=new AddressAttribute();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<AddressAttribute> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public AddressAttribute(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                AddressAttribute.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AddressAttribute>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public AddressAttribute(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public AddressAttribute(Expression<Func<AddressAttribute, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<AddressAttribute> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<AddressAttribute> _repo;
            
            if(db.TestMode){
                AddressAttribute.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AddressAttribute>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AddressAttribute> GetRepo(){
            return GetRepo("","");
        }
        
        public static AddressAttribute SingleOrDefault(Expression<Func<AddressAttribute, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            AddressAttribute single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static AddressAttribute SingleOrDefault(Expression<Func<AddressAttribute, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            AddressAttribute single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<AddressAttribute, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<AddressAttribute, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<AddressAttribute> Find(Expression<Func<AddressAttribute, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AddressAttribute> Find(Expression<Func<AddressAttribute, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<AddressAttribute> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<AddressAttribute> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AddressAttribute> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AddressAttribute> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AddressAttribute> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<AddressAttribute> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(AddressAttribute)){
                AddressAttribute compare=(AddressAttribute)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AddressAttributeValue> AddressAttributeValues
        {
            get
            {
                
                  var repo=AliexpressDBA.AddressAttributeValue.GetRepo();
                  return from items in repo.GetAll()
                       where items.AddressAttributeId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsRequired;
        public bool IsRequired
        {
            get { return _IsRequired; }
            set
            {
                if(_IsRequired!=value){
                    _IsRequired=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsRequired");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AttributeControlTypeId;
        public int AttributeControlTypeId
        {
            get { return _AttributeControlTypeId; }
            set
            {
                if(_AttributeControlTypeId!=value){
                    _AttributeControlTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AttributeControlTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<AddressAttribute, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_QT_Tab table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_QT_Tab: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_QT_Tab> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_QT_Tab>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_QT_Tab> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_QT_Tab item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_QT_Tab item=new SS_QT_Tab();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_QT_Tab> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_QT_Tab(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_QT_Tab.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_QT_Tab>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_QT_Tab(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_QT_Tab(Expression<Func<SS_QT_Tab, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_QT_Tab> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_QT_Tab> _repo;
            
            if(db.TestMode){
                SS_QT_Tab.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_QT_Tab>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_QT_Tab> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_QT_Tab SingleOrDefault(Expression<Func<SS_QT_Tab, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_QT_Tab single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_QT_Tab SingleOrDefault(Expression<Func<SS_QT_Tab, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_QT_Tab single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_QT_Tab, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_QT_Tab, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_QT_Tab> Find(Expression<Func<SS_QT_Tab, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_QT_Tab> Find(Expression<Func<SS_QT_Tab, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_QT_Tab> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_QT_Tab> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_QT_Tab> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_QT_Tab> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_QT_Tab> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_QT_Tab> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.SystemName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_QT_Tab)){
                SS_QT_Tab compare=(SS_QT_Tab)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.SystemName.ToString();
                    }

        public string DescriptorColumn() {
            return "SystemName";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "SystemName";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SystemName;
        public string SystemName
        {
            get { return _SystemName; }
            set
            {
                if(_SystemName!=value){
                    _SystemName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SystemName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DisplayName;
        public string DisplayName
        {
            get { return _DisplayName; }
            set
            {
                if(_DisplayName!=value){
                    _DisplayName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Description;
        public string Description
        {
            get { return _Description; }
            set
            {
                if(_Description!=value){
                    _Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _LimitedToStores;
        public bool LimitedToStores
        {
            get { return _LimitedToStores; }
            set
            {
                if(_LimitedToStores!=value){
                    _LimitedToStores=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LimitedToStores");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TabMode;
        public int TabMode
        {
            get { return _TabMode; }
            set
            {
                if(_TabMode!=value){
                    _TabMode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TabMode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_QT_Tab, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TaxCategory table in the AliexpressDB Database.
    /// </summary>
    public partial class TaxCategory: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TaxCategory> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TaxCategory>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TaxCategory> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TaxCategory item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TaxCategory item=new TaxCategory();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TaxCategory> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public TaxCategory(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TaxCategory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TaxCategory>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TaxCategory(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TaxCategory(Expression<Func<TaxCategory, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TaxCategory> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<TaxCategory> _repo;
            
            if(db.TestMode){
                TaxCategory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TaxCategory>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TaxCategory> GetRepo(){
            return GetRepo("","");
        }
        
        public static TaxCategory SingleOrDefault(Expression<Func<TaxCategory, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TaxCategory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TaxCategory SingleOrDefault(Expression<Func<TaxCategory, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TaxCategory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TaxCategory, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TaxCategory, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TaxCategory> Find(Expression<Func<TaxCategory, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TaxCategory> Find(Expression<Func<TaxCategory, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TaxCategory> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TaxCategory> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TaxCategory> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TaxCategory> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TaxCategory> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TaxCategory> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TaxCategory)){
                TaxCategory compare=(TaxCategory)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TaxCategory, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Forums_PostVote table in the AliexpressDB Database.
    /// </summary>
    public partial class Forums_PostVote: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Forums_PostVote> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Forums_PostVote>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Forums_PostVote> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Forums_PostVote item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Forums_PostVote item=new Forums_PostVote();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Forums_PostVote> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Forums_PostVote(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Forums_PostVote.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Forums_PostVote>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Forums_PostVote(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Forums_PostVote(Expression<Func<Forums_PostVote, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Forums_PostVote> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Forums_PostVote> _repo;
            
            if(db.TestMode){
                Forums_PostVote.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Forums_PostVote>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Forums_PostVote> GetRepo(){
            return GetRepo("","");
        }
        
        public static Forums_PostVote SingleOrDefault(Expression<Func<Forums_PostVote, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Forums_PostVote single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Forums_PostVote SingleOrDefault(Expression<Func<Forums_PostVote, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Forums_PostVote single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Forums_PostVote, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Forums_PostVote, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Forums_PostVote> Find(Expression<Func<Forums_PostVote, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Forums_PostVote> Find(Expression<Func<Forums_PostVote, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Forums_PostVote> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Forums_PostVote> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Forums_PostVote> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Forums_PostVote> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Forums_PostVote> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Forums_PostVote> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ForumPostId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Forums_PostVote)){
                Forums_PostVote compare=(Forums_PostVote)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.ForumPostId.ToString();
                    }

        public string DescriptorColumn() {
            return "ForumPostId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "ForumPostId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Forums_Post> Forums_Posts
        {
            get
            {
                
                  var repo=AliexpressDBA.Forums_Post.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ForumPostId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ForumPostId;
        public int ForumPostId
        {
            get { return _ForumPostId; }
            set
            {
                if(_ForumPostId!=value){
                    _ForumPostId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ForumPostId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerId;
        public int CustomerId
        {
            get { return _CustomerId; }
            set
            {
                if(_CustomerId!=value){
                    _CustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsUp;
        public bool IsUp
        {
            get { return _IsUp; }
            set
            {
                if(_IsUp!=value){
                    _IsUp=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsUp");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Forums_PostVote, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ProductAvailabilityRange table in the AliexpressDB Database.
    /// </summary>
    public partial class ProductAvailabilityRange: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ProductAvailabilityRange> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ProductAvailabilityRange>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ProductAvailabilityRange> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ProductAvailabilityRange item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ProductAvailabilityRange item=new ProductAvailabilityRange();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ProductAvailabilityRange> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ProductAvailabilityRange(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ProductAvailabilityRange.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ProductAvailabilityRange>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ProductAvailabilityRange(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ProductAvailabilityRange(Expression<Func<ProductAvailabilityRange, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ProductAvailabilityRange> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ProductAvailabilityRange> _repo;
            
            if(db.TestMode){
                ProductAvailabilityRange.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ProductAvailabilityRange>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ProductAvailabilityRange> GetRepo(){
            return GetRepo("","");
        }
        
        public static ProductAvailabilityRange SingleOrDefault(Expression<Func<ProductAvailabilityRange, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ProductAvailabilityRange single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ProductAvailabilityRange SingleOrDefault(Expression<Func<ProductAvailabilityRange, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ProductAvailabilityRange single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ProductAvailabilityRange, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ProductAvailabilityRange, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ProductAvailabilityRange> Find(Expression<Func<ProductAvailabilityRange, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ProductAvailabilityRange> Find(Expression<Func<ProductAvailabilityRange, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ProductAvailabilityRange> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ProductAvailabilityRange> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ProductAvailabilityRange> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ProductAvailabilityRange> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ProductAvailabilityRange> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ProductAvailabilityRange> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ProductAvailabilityRange)){
                ProductAvailabilityRange compare=(ProductAvailabilityRange)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ProductAvailabilityRange, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the AddressAttributeValue table in the AliexpressDB Database.
    /// </summary>
    public partial class AddressAttributeValue: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<AddressAttributeValue> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<AddressAttributeValue>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<AddressAttributeValue> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(AddressAttributeValue item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                AddressAttributeValue item=new AddressAttributeValue();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<AddressAttributeValue> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public AddressAttributeValue(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                AddressAttributeValue.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AddressAttributeValue>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public AddressAttributeValue(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public AddressAttributeValue(Expression<Func<AddressAttributeValue, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<AddressAttributeValue> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<AddressAttributeValue> _repo;
            
            if(db.TestMode){
                AddressAttributeValue.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AddressAttributeValue>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AddressAttributeValue> GetRepo(){
            return GetRepo("","");
        }
        
        public static AddressAttributeValue SingleOrDefault(Expression<Func<AddressAttributeValue, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            AddressAttributeValue single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static AddressAttributeValue SingleOrDefault(Expression<Func<AddressAttributeValue, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            AddressAttributeValue single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<AddressAttributeValue, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<AddressAttributeValue, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<AddressAttributeValue> Find(Expression<Func<AddressAttributeValue, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AddressAttributeValue> Find(Expression<Func<AddressAttributeValue, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<AddressAttributeValue> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<AddressAttributeValue> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AddressAttributeValue> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AddressAttributeValue> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AddressAttributeValue> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<AddressAttributeValue> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(AddressAttributeValue)){
                AddressAttributeValue compare=(AddressAttributeValue)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AddressAttribute> AddressAttributes
        {
            get
            {
                
                  var repo=AliexpressDBA.AddressAttribute.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _AddressAttributeId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AddressAttributeId;
        public int AddressAttributeId
        {
            get { return _AddressAttributeId; }
            set
            {
                if(_AddressAttributeId!=value){
                    _AddressAttributeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AddressAttributeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsPreSelected;
        public bool IsPreSelected
        {
            get { return _IsPreSelected; }
            set
            {
                if(_IsPreSelected!=value){
                    _IsPreSelected=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsPreSelected");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<AddressAttributeValue, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_RB_Category table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_RB_Category: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_RB_Category> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_RB_Category>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_RB_Category> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_RB_Category item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_RB_Category item=new SS_RB_Category();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_RB_Category> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_RB_Category(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_RB_Category.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_RB_Category>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_RB_Category(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_RB_Category(Expression<Func<SS_RB_Category, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_RB_Category> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_RB_Category> _repo;
            
            if(db.TestMode){
                SS_RB_Category.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_RB_Category>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_RB_Category> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_RB_Category SingleOrDefault(Expression<Func<SS_RB_Category, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_RB_Category single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_RB_Category SingleOrDefault(Expression<Func<SS_RB_Category, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_RB_Category single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_RB_Category, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_RB_Category, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_RB_Category> Find(Expression<Func<SS_RB_Category, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_RB_Category> Find(Expression<Func<SS_RB_Category, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_RB_Category> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_RB_Category> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_RB_Category> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_RB_Category> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_RB_Category> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_RB_Category> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_RB_Category)){
                SS_RB_Category compare=(SS_RB_Category)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _LanguageId;
        public int LanguageId
        {
            get { return _LanguageId; }
            set
            {
                if(_LanguageId!=value){
                    _LanguageId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LanguageId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Published;
        public bool Published
        {
            get { return _Published; }
            set
            {
                if(_Published!=value){
                    _Published=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Published");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SEOTitle;
        public string SEOTitle
        {
            get { return _SEOTitle; }
            set
            {
                if(_SEOTitle!=value){
                    _SEOTitle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SEOTitle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SEODescription;
        public string SEODescription
        {
            get { return _SEODescription; }
            set
            {
                if(_SEODescription!=value){
                    _SEODescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SEODescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SEOKeywords;
        public string SEOKeywords
        {
            get { return _SEOKeywords; }
            set
            {
                if(_SEOKeywords!=value){
                    _SEOKeywords=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SEOKeywords");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SEName;
        public string SEName
        {
            get { return _SEName; }
            set
            {
                if(_SEName!=value){
                    _SEName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SEName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _LimitedToStores;
        public bool LimitedToStores
        {
            get { return _LimitedToStores; }
            set
            {
                if(_LimitedToStores!=value){
                    _LimitedToStores=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LimitedToStores");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_RB_Category, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TierPrice table in the AliexpressDB Database.
    /// </summary>
    public partial class TierPrice: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TierPrice> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TierPrice>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TierPrice> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TierPrice item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TierPrice item=new TierPrice();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TierPrice> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public TierPrice(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TierPrice.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TierPrice>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TierPrice(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TierPrice(Expression<Func<TierPrice, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TierPrice> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<TierPrice> _repo;
            
            if(db.TestMode){
                TierPrice.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TierPrice>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TierPrice> GetRepo(){
            return GetRepo("","");
        }
        
        public static TierPrice SingleOrDefault(Expression<Func<TierPrice, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TierPrice single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TierPrice SingleOrDefault(Expression<Func<TierPrice, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TierPrice single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TierPrice, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TierPrice, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TierPrice> Find(Expression<Func<TierPrice, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TierPrice> Find(Expression<Func<TierPrice, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TierPrice> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TierPrice> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TierPrice> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TierPrice> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TierPrice> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TierPrice> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ProductId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TierPrice)){
                TierPrice compare=(TierPrice)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.ProductId.ToString();
                    }

        public string DescriptorColumn() {
            return "ProductId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "ProductId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<CustomerRole> CustomerRoles
        {
            get
            {
                
                  var repo=AliexpressDBA.CustomerRole.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerRoleId
                       select items;
            }
        }

        public IQueryable<Product> Products
        {
            get
            {
                
                  var repo=AliexpressDBA.Product.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ProductId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductId;
        public int ProductId
        {
            get { return _ProductId; }
            set
            {
                if(_ProductId!=value){
                    _ProductId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StoreId;
        public int StoreId
        {
            get { return _StoreId; }
            set
            {
                if(_StoreId!=value){
                    _StoreId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StoreId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _CustomerRoleId;
        public int? CustomerRoleId
        {
            get { return _CustomerRoleId; }
            set
            {
                if(_CustomerRoleId!=value){
                    _CustomerRoleId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerRoleId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Quantity;
        public int Quantity
        {
            get { return _Quantity; }
            set
            {
                if(_Quantity!=value){
                    _Quantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Quantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _Price;
        public decimal Price
        {
            get { return _Price; }
            set
            {
                if(_Price!=value){
                    _Price=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Price");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _StartDateTimeUtc;
        public DateTime? StartDateTimeUtc
        {
            get { return _StartDateTimeUtc; }
            set
            {
                if(_StartDateTimeUtc!=value){
                    _StartDateTimeUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StartDateTimeUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _EndDateTimeUtc;
        public DateTime? EndDateTimeUtc
        {
            get { return _EndDateTimeUtc; }
            set
            {
                if(_EndDateTimeUtc!=value){
                    _EndDateTimeUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EndDateTimeUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TierPrice, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Forums_Subscription table in the AliexpressDB Database.
    /// </summary>
    public partial class Forums_Subscription: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Forums_Subscription> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Forums_Subscription>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Forums_Subscription> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Forums_Subscription item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Forums_Subscription item=new Forums_Subscription();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Forums_Subscription> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Forums_Subscription(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Forums_Subscription.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Forums_Subscription>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Forums_Subscription(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Forums_Subscription(Expression<Func<Forums_Subscription, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Forums_Subscription> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Forums_Subscription> _repo;
            
            if(db.TestMode){
                Forums_Subscription.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Forums_Subscription>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Forums_Subscription> GetRepo(){
            return GetRepo("","");
        }
        
        public static Forums_Subscription SingleOrDefault(Expression<Func<Forums_Subscription, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Forums_Subscription single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Forums_Subscription SingleOrDefault(Expression<Func<Forums_Subscription, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Forums_Subscription single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Forums_Subscription, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Forums_Subscription, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Forums_Subscription> Find(Expression<Func<Forums_Subscription, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Forums_Subscription> Find(Expression<Func<Forums_Subscription, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Forums_Subscription> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Forums_Subscription> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Forums_Subscription> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Forums_Subscription> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Forums_Subscription> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Forums_Subscription> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.SubscriptionGuid.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Forums_Subscription)){
                Forums_Subscription compare=(Forums_Subscription)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.SubscriptionGuid.ToString();
                    }

        public string DescriptorColumn() {
            return "SubscriptionGuid";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "SubscriptionGuid";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Customer> Customers
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid _SubscriptionGuid;
        public Guid SubscriptionGuid
        {
            get { return _SubscriptionGuid; }
            set
            {
                if(_SubscriptionGuid!=value){
                    _SubscriptionGuid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubscriptionGuid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerId;
        public int CustomerId
        {
            get { return _CustomerId; }
            set
            {
                if(_CustomerId!=value){
                    _CustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ForumId;
        public int ForumId
        {
            get { return _ForumId; }
            set
            {
                if(_ForumId!=value){
                    _ForumId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ForumId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TopicId;
        public int TopicId
        {
            get { return _TopicId; }
            set
            {
                if(_TopicId!=value){
                    _TopicId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TopicId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Forums_Subscription, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Product_Category_Mapping table in the AliexpressDB Database.
    /// </summary>
    public partial class Product_Category_Mapping: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Product_Category_Mapping> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Product_Category_Mapping>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Product_Category_Mapping> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Product_Category_Mapping item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Product_Category_Mapping item=new Product_Category_Mapping();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Product_Category_Mapping> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Product_Category_Mapping(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Product_Category_Mapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Product_Category_Mapping>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Product_Category_Mapping(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Product_Category_Mapping(Expression<Func<Product_Category_Mapping, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Product_Category_Mapping> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Product_Category_Mapping> _repo;
            
            if(db.TestMode){
                Product_Category_Mapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Product_Category_Mapping>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Product_Category_Mapping> GetRepo(){
            return GetRepo("","");
        }
        
        public static Product_Category_Mapping SingleOrDefault(Expression<Func<Product_Category_Mapping, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Product_Category_Mapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Product_Category_Mapping SingleOrDefault(Expression<Func<Product_Category_Mapping, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Product_Category_Mapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Product_Category_Mapping, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Product_Category_Mapping, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Product_Category_Mapping> Find(Expression<Func<Product_Category_Mapping, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Product_Category_Mapping> Find(Expression<Func<Product_Category_Mapping, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Product_Category_Mapping> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Product_Category_Mapping> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Product_Category_Mapping> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Product_Category_Mapping> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Product_Category_Mapping> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Product_Category_Mapping> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ProductId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Product_Category_Mapping)){
                Product_Category_Mapping compare=(Product_Category_Mapping)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.ProductId.ToString();
                    }

        public string DescriptorColumn() {
            return "ProductId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "ProductId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Category> Categories
        {
            get
            {
                
                  var repo=AliexpressDBA.Category.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CategoryId
                       select items;
            }
        }

        public IQueryable<Product> Products
        {
            get
            {
                
                  var repo=AliexpressDBA.Product.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ProductId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductId;
        public int ProductId
        {
            get { return _ProductId; }
            set
            {
                if(_ProductId!=value){
                    _ProductId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CategoryId;
        public int CategoryId
        {
            get { return _CategoryId; }
            set
            {
                if(_CategoryId!=value){
                    _CategoryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CategoryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsFeaturedProduct;
        public bool IsFeaturedProduct
        {
            get { return _IsFeaturedProduct; }
            set
            {
                if(_IsFeaturedProduct!=value){
                    _IsFeaturedProduct=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsFeaturedProduct");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Product_Category_Mapping, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Affiliate table in the AliexpressDB Database.
    /// </summary>
    public partial class Affiliate: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Affiliate> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Affiliate>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Affiliate> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Affiliate item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Affiliate item=new Affiliate();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Affiliate> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Affiliate(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Affiliate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Affiliate>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Affiliate(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Affiliate(Expression<Func<Affiliate, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Affiliate> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Affiliate> _repo;
            
            if(db.TestMode){
                Affiliate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Affiliate>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Affiliate> GetRepo(){
            return GetRepo("","");
        }
        
        public static Affiliate SingleOrDefault(Expression<Func<Affiliate, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Affiliate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Affiliate SingleOrDefault(Expression<Func<Affiliate, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Affiliate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Affiliate, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Affiliate, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Affiliate> Find(Expression<Func<Affiliate, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Affiliate> Find(Expression<Func<Affiliate, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Affiliate> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Affiliate> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Affiliate> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Affiliate> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Affiliate> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Affiliate> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.AdminComment.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Affiliate)){
                Affiliate compare=(Affiliate)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.AdminComment.ToString();
                    }

        public string DescriptorColumn() {
            return "AdminComment";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "AdminComment";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Address> Addresses
        {
            get
            {
                
                  var repo=AliexpressDBA.Address.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _AddressId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AddressId;
        public int AddressId
        {
            get { return _AddressId; }
            set
            {
                if(_AddressId!=value){
                    _AddressId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AddressId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AdminComment;
        public string AdminComment
        {
            get { return _AdminComment; }
            set
            {
                if(_AdminComment!=value){
                    _AdminComment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdminComment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FriendlyUrlName;
        public string FriendlyUrlName
        {
            get { return _FriendlyUrlName; }
            set
            {
                if(_FriendlyUrlName!=value){
                    _FriendlyUrlName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FriendlyUrlName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Deleted;
        public bool Deleted
        {
            get { return _Deleted; }
            set
            {
                if(_Deleted!=value){
                    _Deleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Deleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Active;
        public bool Active
        {
            get { return _Active; }
            set
            {
                if(_Active!=value){
                    _Active=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Active");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.Deleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Affiliate, bool>> expression) {
            var repo = GetRepo();
            
            
            List<Affiliate> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.Deleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<Affiliate, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_RB_Post table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_RB_Post: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_RB_Post> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_RB_Post>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_RB_Post> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_RB_Post item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_RB_Post item=new SS_RB_Post();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_RB_Post> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_RB_Post(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_RB_Post.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_RB_Post>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_RB_Post(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_RB_Post(Expression<Func<SS_RB_Post, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_RB_Post> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_RB_Post> _repo;
            
            if(db.TestMode){
                SS_RB_Post.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_RB_Post>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_RB_Post> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_RB_Post SingleOrDefault(Expression<Func<SS_RB_Post, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_RB_Post single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_RB_Post SingleOrDefault(Expression<Func<SS_RB_Post, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_RB_Post single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_RB_Post, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_RB_Post, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_RB_Post> Find(Expression<Func<SS_RB_Post, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_RB_Post> Find(Expression<Func<SS_RB_Post, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_RB_Post> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_RB_Post> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_RB_Post> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_RB_Post> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_RB_Post> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_RB_Post> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.HomePagePictureId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_RB_Post)){
                SS_RB_Post compare=(SS_RB_Post)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.HomePagePictureId.ToString();
                    }

        public string DescriptorColumn() {
            return "HomePagePictureId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "HomePagePictureId";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _HomePagePictureId;
        public int HomePagePictureId
        {
            get { return _HomePagePictureId; }
            set
            {
                if(_HomePagePictureId!=value){
                    _HomePagePictureId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HomePagePictureId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PictureId;
        public int PictureId
        {
            get { return _PictureId; }
            set
            {
                if(_PictureId!=value){
                    _PictureId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PictureId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _BlogPostId;
        public int BlogPostId
        {
            get { return _BlogPostId; }
            set
            {
                if(_BlogPostId!=value){
                    _BlogPostId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BlogPostId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_RB_Post, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Topic table in the AliexpressDB Database.
    /// </summary>
    public partial class Topic: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Topic> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Topic>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Topic> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Topic item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Topic item=new Topic();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Topic> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Topic(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Topic.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Topic>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Topic(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Topic(Expression<Func<Topic, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Topic> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Topic> _repo;
            
            if(db.TestMode){
                Topic.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Topic>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Topic> GetRepo(){
            return GetRepo("","");
        }
        
        public static Topic SingleOrDefault(Expression<Func<Topic, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Topic single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Topic SingleOrDefault(Expression<Func<Topic, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Topic single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Topic, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Topic, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Topic> Find(Expression<Func<Topic, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Topic> Find(Expression<Func<Topic, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Topic> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Topic> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Topic> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Topic> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Topic> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Topic> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.SystemName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Topic)){
                Topic compare=(Topic)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.SystemName.ToString();
                    }

        public string DescriptorColumn() {
            return "SystemName";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "SystemName";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SystemName;
        public string SystemName
        {
            get { return _SystemName; }
            set
            {
                if(_SystemName!=value){
                    _SystemName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SystemName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IncludeInSitemap;
        public bool IncludeInSitemap
        {
            get { return _IncludeInSitemap; }
            set
            {
                if(_IncludeInSitemap!=value){
                    _IncludeInSitemap=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IncludeInSitemap");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IncludeInTopMenu;
        public bool IncludeInTopMenu
        {
            get { return _IncludeInTopMenu; }
            set
            {
                if(_IncludeInTopMenu!=value){
                    _IncludeInTopMenu=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IncludeInTopMenu");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IncludeInFooterColumn1;
        public bool IncludeInFooterColumn1
        {
            get { return _IncludeInFooterColumn1; }
            set
            {
                if(_IncludeInFooterColumn1!=value){
                    _IncludeInFooterColumn1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IncludeInFooterColumn1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IncludeInFooterColumn2;
        public bool IncludeInFooterColumn2
        {
            get { return _IncludeInFooterColumn2; }
            set
            {
                if(_IncludeInFooterColumn2!=value){
                    _IncludeInFooterColumn2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IncludeInFooterColumn2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IncludeInFooterColumn3;
        public bool IncludeInFooterColumn3
        {
            get { return _IncludeInFooterColumn3; }
            set
            {
                if(_IncludeInFooterColumn3!=value){
                    _IncludeInFooterColumn3=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IncludeInFooterColumn3");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _AccessibleWhenStoreClosed;
        public bool AccessibleWhenStoreClosed
        {
            get { return _AccessibleWhenStoreClosed; }
            set
            {
                if(_AccessibleWhenStoreClosed!=value){
                    _AccessibleWhenStoreClosed=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AccessibleWhenStoreClosed");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsPasswordProtected;
        public bool IsPasswordProtected
        {
            get { return _IsPasswordProtected; }
            set
            {
                if(_IsPasswordProtected!=value){
                    _IsPasswordProtected=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsPasswordProtected");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Password;
        public string Password
        {
            get { return _Password; }
            set
            {
                if(_Password!=value){
                    _Password=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Password");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Title;
        public string Title
        {
            get { return _Title; }
            set
            {
                if(_Title!=value){
                    _Title=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Title");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Body;
        public string Body
        {
            get { return _Body; }
            set
            {
                if(_Body!=value){
                    _Body=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Body");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Published;
        public bool Published
        {
            get { return _Published; }
            set
            {
                if(_Published!=value){
                    _Published=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Published");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TopicTemplateId;
        public int TopicTemplateId
        {
            get { return _TopicTemplateId; }
            set
            {
                if(_TopicTemplateId!=value){
                    _TopicTemplateId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TopicTemplateId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaKeywords;
        public string MetaKeywords
        {
            get { return _MetaKeywords; }
            set
            {
                if(_MetaKeywords!=value){
                    _MetaKeywords=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaKeywords");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaDescription;
        public string MetaDescription
        {
            get { return _MetaDescription; }
            set
            {
                if(_MetaDescription!=value){
                    _MetaDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaTitle;
        public string MetaTitle
        {
            get { return _MetaTitle; }
            set
            {
                if(_MetaTitle!=value){
                    _MetaTitle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaTitle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _SubjectToAcl;
        public bool SubjectToAcl
        {
            get { return _SubjectToAcl; }
            set
            {
                if(_SubjectToAcl!=value){
                    _SubjectToAcl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubjectToAcl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _LimitedToStores;
        public bool LimitedToStores
        {
            get { return _LimitedToStores; }
            set
            {
                if(_LimitedToStores!=value){
                    _LimitedToStores=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LimitedToStores");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Topic, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Forums_Topic table in the AliexpressDB Database.
    /// </summary>
    public partial class Forums_Topic: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Forums_Topic> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Forums_Topic>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Forums_Topic> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Forums_Topic item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Forums_Topic item=new Forums_Topic();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Forums_Topic> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Forums_Topic(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Forums_Topic.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Forums_Topic>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Forums_Topic(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Forums_Topic(Expression<Func<Forums_Topic, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Forums_Topic> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Forums_Topic> _repo;
            
            if(db.TestMode){
                Forums_Topic.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Forums_Topic>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Forums_Topic> GetRepo(){
            return GetRepo("","");
        }
        
        public static Forums_Topic SingleOrDefault(Expression<Func<Forums_Topic, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Forums_Topic single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Forums_Topic SingleOrDefault(Expression<Func<Forums_Topic, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Forums_Topic single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Forums_Topic, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Forums_Topic, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Forums_Topic> Find(Expression<Func<Forums_Topic, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Forums_Topic> Find(Expression<Func<Forums_Topic, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Forums_Topic> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Forums_Topic> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Forums_Topic> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Forums_Topic> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Forums_Topic> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Forums_Topic> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Subject.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Forums_Topic)){
                Forums_Topic compare=(Forums_Topic)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Subject.ToString();
                    }

        public string DescriptorColumn() {
            return "Subject";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Subject";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Customer> Customers
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerId
                       select items;
            }
        }

        public IQueryable<Forums_Forum> Forums_Forums
        {
            get
            {
                
                  var repo=AliexpressDBA.Forums_Forum.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ForumId
                       select items;
            }
        }

        public IQueryable<Forums_Post> Forums_Posts
        {
            get
            {
                
                  var repo=AliexpressDBA.Forums_Post.GetRepo();
                  return from items in repo.GetAll()
                       where items.TopicId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ForumId;
        public int ForumId
        {
            get { return _ForumId; }
            set
            {
                if(_ForumId!=value){
                    _ForumId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ForumId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerId;
        public int CustomerId
        {
            get { return _CustomerId; }
            set
            {
                if(_CustomerId!=value){
                    _CustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TopicTypeId;
        public int TopicTypeId
        {
            get { return _TopicTypeId; }
            set
            {
                if(_TopicTypeId!=value){
                    _TopicTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TopicTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Subject;
        public string Subject
        {
            get { return _Subject; }
            set
            {
                if(_Subject!=value){
                    _Subject=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Subject");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _NumPosts;
        public int NumPosts
        {
            get { return _NumPosts; }
            set
            {
                if(_NumPosts!=value){
                    _NumPosts=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NumPosts");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Views;
        public int Views
        {
            get { return _Views; }
            set
            {
                if(_Views!=value){
                    _Views=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Views");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _LastPostId;
        public int LastPostId
        {
            get { return _LastPostId; }
            set
            {
                if(_LastPostId!=value){
                    _LastPostId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastPostId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _LastPostCustomerId;
        public int LastPostCustomerId
        {
            get { return _LastPostCustomerId; }
            set
            {
                if(_LastPostCustomerId!=value){
                    _LastPostCustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastPostCustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _LastPostTime;
        public DateTime? LastPostTime
        {
            get { return _LastPostTime; }
            set
            {
                if(_LastPostTime!=value){
                    _LastPostTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastPostTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _UpdatedOnUtc;
        public DateTime UpdatedOnUtc
        {
            get { return _UpdatedOnUtc; }
            set
            {
                if(_UpdatedOnUtc!=value){
                    _UpdatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Forums_Topic, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Product_Manufacturer_Mapping table in the AliexpressDB Database.
    /// </summary>
    public partial class Product_Manufacturer_Mapping: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Product_Manufacturer_Mapping> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Product_Manufacturer_Mapping>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Product_Manufacturer_Mapping> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Product_Manufacturer_Mapping item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Product_Manufacturer_Mapping item=new Product_Manufacturer_Mapping();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Product_Manufacturer_Mapping> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Product_Manufacturer_Mapping(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Product_Manufacturer_Mapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Product_Manufacturer_Mapping>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Product_Manufacturer_Mapping(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Product_Manufacturer_Mapping(Expression<Func<Product_Manufacturer_Mapping, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Product_Manufacturer_Mapping> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Product_Manufacturer_Mapping> _repo;
            
            if(db.TestMode){
                Product_Manufacturer_Mapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Product_Manufacturer_Mapping>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Product_Manufacturer_Mapping> GetRepo(){
            return GetRepo("","");
        }
        
        public static Product_Manufacturer_Mapping SingleOrDefault(Expression<Func<Product_Manufacturer_Mapping, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Product_Manufacturer_Mapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Product_Manufacturer_Mapping SingleOrDefault(Expression<Func<Product_Manufacturer_Mapping, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Product_Manufacturer_Mapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Product_Manufacturer_Mapping, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Product_Manufacturer_Mapping, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Product_Manufacturer_Mapping> Find(Expression<Func<Product_Manufacturer_Mapping, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Product_Manufacturer_Mapping> Find(Expression<Func<Product_Manufacturer_Mapping, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Product_Manufacturer_Mapping> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Product_Manufacturer_Mapping> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Product_Manufacturer_Mapping> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Product_Manufacturer_Mapping> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Product_Manufacturer_Mapping> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Product_Manufacturer_Mapping> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ProductId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Product_Manufacturer_Mapping)){
                Product_Manufacturer_Mapping compare=(Product_Manufacturer_Mapping)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.ProductId.ToString();
                    }

        public string DescriptorColumn() {
            return "ProductId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "ProductId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Manufacturer> Manufacturers
        {
            get
            {
                
                  var repo=AliexpressDBA.Manufacturer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ManufacturerId
                       select items;
            }
        }

        public IQueryable<Product> Products
        {
            get
            {
                
                  var repo=AliexpressDBA.Product.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ProductId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductId;
        public int ProductId
        {
            get { return _ProductId; }
            set
            {
                if(_ProductId!=value){
                    _ProductId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ManufacturerId;
        public int ManufacturerId
        {
            get { return _ManufacturerId; }
            set
            {
                if(_ManufacturerId!=value){
                    _ManufacturerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ManufacturerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsFeaturedProduct;
        public bool IsFeaturedProduct
        {
            get { return _IsFeaturedProduct; }
            set
            {
                if(_IsFeaturedProduct!=value){
                    _IsFeaturedProduct=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsFeaturedProduct");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Product_Manufacturer_Mapping, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the BackInStockSubscription table in the AliexpressDB Database.
    /// </summary>
    public partial class BackInStockSubscription: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<BackInStockSubscription> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<BackInStockSubscription>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<BackInStockSubscription> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(BackInStockSubscription item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                BackInStockSubscription item=new BackInStockSubscription();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<BackInStockSubscription> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public BackInStockSubscription(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                BackInStockSubscription.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<BackInStockSubscription>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public BackInStockSubscription(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public BackInStockSubscription(Expression<Func<BackInStockSubscription, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<BackInStockSubscription> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<BackInStockSubscription> _repo;
            
            if(db.TestMode){
                BackInStockSubscription.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<BackInStockSubscription>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<BackInStockSubscription> GetRepo(){
            return GetRepo("","");
        }
        
        public static BackInStockSubscription SingleOrDefault(Expression<Func<BackInStockSubscription, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            BackInStockSubscription single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static BackInStockSubscription SingleOrDefault(Expression<Func<BackInStockSubscription, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            BackInStockSubscription single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<BackInStockSubscription, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<BackInStockSubscription, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<BackInStockSubscription> Find(Expression<Func<BackInStockSubscription, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<BackInStockSubscription> Find(Expression<Func<BackInStockSubscription, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<BackInStockSubscription> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<BackInStockSubscription> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<BackInStockSubscription> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<BackInStockSubscription> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<BackInStockSubscription> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<BackInStockSubscription> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.StoreId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(BackInStockSubscription)){
                BackInStockSubscription compare=(BackInStockSubscription)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.StoreId.ToString();
                    }

        public string DescriptorColumn() {
            return "StoreId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "StoreId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Customer> Customers
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerId
                       select items;
            }
        }

        public IQueryable<Product> Products
        {
            get
            {
                
                  var repo=AliexpressDBA.Product.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ProductId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StoreId;
        public int StoreId
        {
            get { return _StoreId; }
            set
            {
                if(_StoreId!=value){
                    _StoreId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StoreId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductId;
        public int ProductId
        {
            get { return _ProductId; }
            set
            {
                if(_ProductId!=value){
                    _ProductId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerId;
        public int CustomerId
        {
            get { return _CustomerId; }
            set
            {
                if(_CustomerId!=value){
                    _CustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<BackInStockSubscription, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_RB_RichBlogPostCategoryMapping table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_RB_RichBlogPostCategoryMapping: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_RB_RichBlogPostCategoryMapping> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_RB_RichBlogPostCategoryMapping>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_RB_RichBlogPostCategoryMapping> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_RB_RichBlogPostCategoryMapping item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_RB_RichBlogPostCategoryMapping item=new SS_RB_RichBlogPostCategoryMapping();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_RB_RichBlogPostCategoryMapping> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_RB_RichBlogPostCategoryMapping(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_RB_RichBlogPostCategoryMapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_RB_RichBlogPostCategoryMapping>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_RB_RichBlogPostCategoryMapping(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_RB_RichBlogPostCategoryMapping(Expression<Func<SS_RB_RichBlogPostCategoryMapping, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_RB_RichBlogPostCategoryMapping> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_RB_RichBlogPostCategoryMapping> _repo;
            
            if(db.TestMode){
                SS_RB_RichBlogPostCategoryMapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_RB_RichBlogPostCategoryMapping>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_RB_RichBlogPostCategoryMapping> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_RB_RichBlogPostCategoryMapping SingleOrDefault(Expression<Func<SS_RB_RichBlogPostCategoryMapping, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_RB_RichBlogPostCategoryMapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_RB_RichBlogPostCategoryMapping SingleOrDefault(Expression<Func<SS_RB_RichBlogPostCategoryMapping, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_RB_RichBlogPostCategoryMapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_RB_RichBlogPostCategoryMapping, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_RB_RichBlogPostCategoryMapping, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_RB_RichBlogPostCategoryMapping> Find(Expression<Func<SS_RB_RichBlogPostCategoryMapping, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_RB_RichBlogPostCategoryMapping> Find(Expression<Func<SS_RB_RichBlogPostCategoryMapping, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_RB_RichBlogPostCategoryMapping> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_RB_RichBlogPostCategoryMapping> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_RB_RichBlogPostCategoryMapping> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_RB_RichBlogPostCategoryMapping> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_RB_RichBlogPostCategoryMapping> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_RB_RichBlogPostCategoryMapping> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.BlogPostId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_RB_RichBlogPostCategoryMapping)){
                SS_RB_RichBlogPostCategoryMapping compare=(SS_RB_RichBlogPostCategoryMapping)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.BlogPostId.ToString();
                    }

        public string DescriptorColumn() {
            return "BlogPostId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "BlogPostId";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _BlogPostId;
        public int BlogPostId
        {
            get { return _BlogPostId; }
            set
            {
                if(_BlogPostId!=value){
                    _BlogPostId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BlogPostId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CategoryId;
        public int CategoryId
        {
            get { return _CategoryId; }
            set
            {
                if(_CategoryId!=value){
                    _CategoryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CategoryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _LimitedToStores;
        public bool LimitedToStores
        {
            get { return _LimitedToStores; }
            set
            {
                if(_LimitedToStores!=value){
                    _LimitedToStores=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LimitedToStores");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_RB_RichBlogPostCategoryMapping, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TopicTemplate table in the AliexpressDB Database.
    /// </summary>
    public partial class TopicTemplate: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TopicTemplate> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TopicTemplate>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TopicTemplate> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TopicTemplate item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TopicTemplate item=new TopicTemplate();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TopicTemplate> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public TopicTemplate(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TopicTemplate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TopicTemplate>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TopicTemplate(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TopicTemplate(Expression<Func<TopicTemplate, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TopicTemplate> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<TopicTemplate> _repo;
            
            if(db.TestMode){
                TopicTemplate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TopicTemplate>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TopicTemplate> GetRepo(){
            return GetRepo("","");
        }
        
        public static TopicTemplate SingleOrDefault(Expression<Func<TopicTemplate, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TopicTemplate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TopicTemplate SingleOrDefault(Expression<Func<TopicTemplate, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TopicTemplate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TopicTemplate, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TopicTemplate, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TopicTemplate> Find(Expression<Func<TopicTemplate, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TopicTemplate> Find(Expression<Func<TopicTemplate, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TopicTemplate> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TopicTemplate> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TopicTemplate> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TopicTemplate> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TopicTemplate> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TopicTemplate> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TopicTemplate)){
                TopicTemplate compare=(TopicTemplate)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ViewPath;
        public string ViewPath
        {
            get { return _ViewPath; }
            set
            {
                if(_ViewPath!=value){
                    _ViewPath=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ViewPath");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TopicTemplate, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the GenericAttribute table in the AliexpressDB Database.
    /// </summary>
    public partial class GenericAttribute: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<GenericAttribute> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<GenericAttribute>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<GenericAttribute> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(GenericAttribute item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                GenericAttribute item=new GenericAttribute();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<GenericAttribute> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public GenericAttribute(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                GenericAttribute.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<GenericAttribute>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public GenericAttribute(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public GenericAttribute(Expression<Func<GenericAttribute, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<GenericAttribute> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<GenericAttribute> _repo;
            
            if(db.TestMode){
                GenericAttribute.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<GenericAttribute>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<GenericAttribute> GetRepo(){
            return GetRepo("","");
        }
        
        public static GenericAttribute SingleOrDefault(Expression<Func<GenericAttribute, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            GenericAttribute single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static GenericAttribute SingleOrDefault(Expression<Func<GenericAttribute, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            GenericAttribute single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<GenericAttribute, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<GenericAttribute, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<GenericAttribute> Find(Expression<Func<GenericAttribute, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<GenericAttribute> Find(Expression<Func<GenericAttribute, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<GenericAttribute> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<GenericAttribute> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<GenericAttribute> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<GenericAttribute> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<GenericAttribute> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<GenericAttribute> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.KeyGroup.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(GenericAttribute)){
                GenericAttribute compare=(GenericAttribute)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.KeyGroup.ToString();
                    }

        public string DescriptorColumn() {
            return "KeyGroup";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "KeyGroup";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _EntityId;
        public int EntityId
        {
            get { return _EntityId; }
            set
            {
                if(_EntityId!=value){
                    _EntityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _KeyGroup;
        public string KeyGroup
        {
            get { return _KeyGroup; }
            set
            {
                if(_KeyGroup!=value){
                    _KeyGroup=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="KeyGroup");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Key;
        public string Key
        {
            get { return _Key; }
            set
            {
                if(_Key!=value){
                    _Key=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Key");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Value;
        public string Value
        {
            get { return _Value; }
            set
            {
                if(_Value!=value){
                    _Value=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Value");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StoreId;
        public int StoreId
        {
            get { return _StoreId; }
            set
            {
                if(_StoreId!=value){
                    _StoreId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StoreId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<GenericAttribute, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Product_Picture_Mapping table in the AliexpressDB Database.
    /// </summary>
    public partial class Product_Picture_Mapping: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Product_Picture_Mapping> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Product_Picture_Mapping>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Product_Picture_Mapping> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Product_Picture_Mapping item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Product_Picture_Mapping item=new Product_Picture_Mapping();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Product_Picture_Mapping> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Product_Picture_Mapping(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Product_Picture_Mapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Product_Picture_Mapping>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Product_Picture_Mapping(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Product_Picture_Mapping(Expression<Func<Product_Picture_Mapping, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Product_Picture_Mapping> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Product_Picture_Mapping> _repo;
            
            if(db.TestMode){
                Product_Picture_Mapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Product_Picture_Mapping>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Product_Picture_Mapping> GetRepo(){
            return GetRepo("","");
        }
        
        public static Product_Picture_Mapping SingleOrDefault(Expression<Func<Product_Picture_Mapping, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Product_Picture_Mapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Product_Picture_Mapping SingleOrDefault(Expression<Func<Product_Picture_Mapping, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Product_Picture_Mapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Product_Picture_Mapping, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Product_Picture_Mapping, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Product_Picture_Mapping> Find(Expression<Func<Product_Picture_Mapping, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Product_Picture_Mapping> Find(Expression<Func<Product_Picture_Mapping, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Product_Picture_Mapping> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Product_Picture_Mapping> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Product_Picture_Mapping> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Product_Picture_Mapping> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Product_Picture_Mapping> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Product_Picture_Mapping> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ProductId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Product_Picture_Mapping)){
                Product_Picture_Mapping compare=(Product_Picture_Mapping)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.ProductId.ToString();
                    }

        public string DescriptorColumn() {
            return "ProductId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "ProductId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Picture> Pictures
        {
            get
            {
                
                  var repo=AliexpressDBA.Picture.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _PictureId
                       select items;
            }
        }

        public IQueryable<Product> Products
        {
            get
            {
                
                  var repo=AliexpressDBA.Product.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ProductId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductId;
        public int ProductId
        {
            get { return _ProductId; }
            set
            {
                if(_ProductId!=value){
                    _ProductId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PictureId;
        public int PictureId
        {
            get { return _PictureId; }
            set
            {
                if(_PictureId!=value){
                    _PictureId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PictureId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Product_Picture_Mapping, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the BlogComment table in the AliexpressDB Database.
    /// </summary>
    public partial class BlogComment: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<BlogComment> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<BlogComment>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<BlogComment> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(BlogComment item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                BlogComment item=new BlogComment();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<BlogComment> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public BlogComment(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                BlogComment.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<BlogComment>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public BlogComment(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public BlogComment(Expression<Func<BlogComment, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<BlogComment> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<BlogComment> _repo;
            
            if(db.TestMode){
                BlogComment.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<BlogComment>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<BlogComment> GetRepo(){
            return GetRepo("","");
        }
        
        public static BlogComment SingleOrDefault(Expression<Func<BlogComment, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            BlogComment single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static BlogComment SingleOrDefault(Expression<Func<BlogComment, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            BlogComment single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<BlogComment, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<BlogComment, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<BlogComment> Find(Expression<Func<BlogComment, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<BlogComment> Find(Expression<Func<BlogComment, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<BlogComment> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<BlogComment> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<BlogComment> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<BlogComment> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<BlogComment> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<BlogComment> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.CommentText.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(BlogComment)){
                BlogComment compare=(BlogComment)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.CommentText.ToString();
                    }

        public string DescriptorColumn() {
            return "CommentText";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "CommentText";
        }
        
        #region ' Foreign Keys '
        public IQueryable<BlogPost> BlogPosts
        {
            get
            {
                
                  var repo=AliexpressDBA.BlogPost.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _BlogPostId
                       select items;
            }
        }

        public IQueryable<Customer> Customers
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerId
                       select items;
            }
        }

        public IQueryable<Store> Stores
        {
            get
            {
                
                  var repo=AliexpressDBA.Store.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _StoreId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerId;
        public int CustomerId
        {
            get { return _CustomerId; }
            set
            {
                if(_CustomerId!=value){
                    _CustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CommentText;
        public string CommentText
        {
            get { return _CommentText; }
            set
            {
                if(_CommentText!=value){
                    _CommentText=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CommentText");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsApproved;
        public bool IsApproved
        {
            get { return _IsApproved; }
            set
            {
                if(_IsApproved!=value){
                    _IsApproved=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsApproved");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StoreId;
        public int StoreId
        {
            get { return _StoreId; }
            set
            {
                if(_StoreId!=value){
                    _StoreId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StoreId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _BlogPostId;
        public int BlogPostId
        {
            get { return _BlogPostId; }
            set
            {
                if(_BlogPostId!=value){
                    _BlogPostId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BlogPostId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<BlogComment, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the StorePickupPoint table in the AliexpressDB Database.
    /// </summary>
    public partial class StorePickupPoint: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<StorePickupPoint> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<StorePickupPoint>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<StorePickupPoint> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(StorePickupPoint item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                StorePickupPoint item=new StorePickupPoint();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<StorePickupPoint> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public StorePickupPoint(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                StorePickupPoint.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<StorePickupPoint>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public StorePickupPoint(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public StorePickupPoint(Expression<Func<StorePickupPoint, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<StorePickupPoint> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<StorePickupPoint> _repo;
            
            if(db.TestMode){
                StorePickupPoint.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<StorePickupPoint>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<StorePickupPoint> GetRepo(){
            return GetRepo("","");
        }
        
        public static StorePickupPoint SingleOrDefault(Expression<Func<StorePickupPoint, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            StorePickupPoint single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static StorePickupPoint SingleOrDefault(Expression<Func<StorePickupPoint, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            StorePickupPoint single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<StorePickupPoint, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<StorePickupPoint, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<StorePickupPoint> Find(Expression<Func<StorePickupPoint, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<StorePickupPoint> Find(Expression<Func<StorePickupPoint, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<StorePickupPoint> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<StorePickupPoint> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<StorePickupPoint> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<StorePickupPoint> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<StorePickupPoint> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<StorePickupPoint> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(StorePickupPoint)){
                StorePickupPoint compare=(StorePickupPoint)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Description;
        public string Description
        {
            get { return _Description; }
            set
            {
                if(_Description!=value){
                    _Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AddressId;
        public int AddressId
        {
            get { return _AddressId; }
            set
            {
                if(_AddressId!=value){
                    _AddressId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AddressId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _PickupFee;
        public decimal PickupFee
        {
            get { return _PickupFee; }
            set
            {
                if(_PickupFee!=value){
                    _PickupFee=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PickupFee");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OpeningHours;
        public string OpeningHours
        {
            get { return _OpeningHours; }
            set
            {
                if(_OpeningHours!=value){
                    _OpeningHours=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OpeningHours");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StoreId;
        public int StoreId
        {
            get { return _StoreId; }
            set
            {
                if(_StoreId!=value){
                    _StoreId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StoreId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<StorePickupPoint, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_RB_RelatedBlog table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_RB_RelatedBlog: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_RB_RelatedBlog> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_RB_RelatedBlog>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_RB_RelatedBlog> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_RB_RelatedBlog item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_RB_RelatedBlog item=new SS_RB_RelatedBlog();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_RB_RelatedBlog> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_RB_RelatedBlog(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_RB_RelatedBlog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_RB_RelatedBlog>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_RB_RelatedBlog(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_RB_RelatedBlog(Expression<Func<SS_RB_RelatedBlog, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_RB_RelatedBlog> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_RB_RelatedBlog> _repo;
            
            if(db.TestMode){
                SS_RB_RelatedBlog.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_RB_RelatedBlog>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_RB_RelatedBlog> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_RB_RelatedBlog SingleOrDefault(Expression<Func<SS_RB_RelatedBlog, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_RB_RelatedBlog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_RB_RelatedBlog SingleOrDefault(Expression<Func<SS_RB_RelatedBlog, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_RB_RelatedBlog single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_RB_RelatedBlog, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_RB_RelatedBlog, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_RB_RelatedBlog> Find(Expression<Func<SS_RB_RelatedBlog, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_RB_RelatedBlog> Find(Expression<Func<SS_RB_RelatedBlog, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_RB_RelatedBlog> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_RB_RelatedBlog> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_RB_RelatedBlog> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_RB_RelatedBlog> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_RB_RelatedBlog> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_RB_RelatedBlog> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.BlogPostId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_RB_RelatedBlog)){
                SS_RB_RelatedBlog compare=(SS_RB_RelatedBlog)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.BlogPostId.ToString();
                    }

        public string DescriptorColumn() {
            return "BlogPostId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "BlogPostId";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _BlogPostId;
        public int BlogPostId
        {
            get { return _BlogPostId; }
            set
            {
                if(_BlogPostId!=value){
                    _BlogPostId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BlogPostId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _RelatedBlogPostId;
        public int RelatedBlogPostId
        {
            get { return _RelatedBlogPostId; }
            set
            {
                if(_RelatedBlogPostId!=value){
                    _RelatedBlogPostId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RelatedBlogPostId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_RB_RelatedBlog, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the UrlRecord table in the AliexpressDB Database.
    /// </summary>
    public partial class UrlRecord: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<UrlRecord> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<UrlRecord>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<UrlRecord> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(UrlRecord item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                UrlRecord item=new UrlRecord();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<UrlRecord> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public UrlRecord(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                UrlRecord.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<UrlRecord>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public UrlRecord(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public UrlRecord(Expression<Func<UrlRecord, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<UrlRecord> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<UrlRecord> _repo;
            
            if(db.TestMode){
                UrlRecord.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<UrlRecord>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<UrlRecord> GetRepo(){
            return GetRepo("","");
        }
        
        public static UrlRecord SingleOrDefault(Expression<Func<UrlRecord, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            UrlRecord single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static UrlRecord SingleOrDefault(Expression<Func<UrlRecord, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            UrlRecord single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<UrlRecord, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<UrlRecord, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<UrlRecord> Find(Expression<Func<UrlRecord, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<UrlRecord> Find(Expression<Func<UrlRecord, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<UrlRecord> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<UrlRecord> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<UrlRecord> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<UrlRecord> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<UrlRecord> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<UrlRecord> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.EntityName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(UrlRecord)){
                UrlRecord compare=(UrlRecord)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.EntityName.ToString();
                    }

        public string DescriptorColumn() {
            return "EntityName";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "EntityName";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _EntityId;
        public int EntityId
        {
            get { return _EntityId; }
            set
            {
                if(_EntityId!=value){
                    _EntityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EntityName;
        public string EntityName
        {
            get { return _EntityName; }
            set
            {
                if(_EntityName!=value){
                    _EntityName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Slug;
        public string Slug
        {
            get { return _Slug; }
            set
            {
                if(_Slug!=value){
                    _Slug=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Slug");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsActive;
        public bool IsActive
        {
            get { return _IsActive; }
            set
            {
                if(_IsActive!=value){
                    _IsActive=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsActive");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _LanguageId;
        public int LanguageId
        {
            get { return _LanguageId; }
            set
            {
                if(_LanguageId!=value){
                    _LanguageId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LanguageId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<UrlRecord, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the GiftCard table in the AliexpressDB Database.
    /// </summary>
    public partial class GiftCard: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<GiftCard> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<GiftCard>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<GiftCard> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(GiftCard item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                GiftCard item=new GiftCard();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<GiftCard> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public GiftCard(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                GiftCard.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<GiftCard>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public GiftCard(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public GiftCard(Expression<Func<GiftCard, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<GiftCard> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<GiftCard> _repo;
            
            if(db.TestMode){
                GiftCard.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<GiftCard>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<GiftCard> GetRepo(){
            return GetRepo("","");
        }
        
        public static GiftCard SingleOrDefault(Expression<Func<GiftCard, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            GiftCard single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static GiftCard SingleOrDefault(Expression<Func<GiftCard, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            GiftCard single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<GiftCard, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<GiftCard, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<GiftCard> Find(Expression<Func<GiftCard, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<GiftCard> Find(Expression<Func<GiftCard, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<GiftCard> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<GiftCard> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<GiftCard> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<GiftCard> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<GiftCard> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<GiftCard> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.GiftCardCouponCode.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(GiftCard)){
                GiftCard compare=(GiftCard)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.GiftCardCouponCode.ToString();
                    }

        public string DescriptorColumn() {
            return "GiftCardCouponCode";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "GiftCardCouponCode";
        }
        
        #region ' Foreign Keys '
        public IQueryable<GiftCardUsageHistory> GiftCardUsageHistories
        {
            get
            {
                
                  var repo=AliexpressDBA.GiftCardUsageHistory.GetRepo();
                  return from items in repo.GetAll()
                       where items.GiftCardId == _Id
                       select items;
            }
        }

        public IQueryable<OrderItem> OrderItems
        {
            get
            {
                
                  var repo=AliexpressDBA.OrderItem.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _PurchasedWithOrderItemId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _PurchasedWithOrderItemId;
        public int? PurchasedWithOrderItemId
        {
            get { return _PurchasedWithOrderItemId; }
            set
            {
                if(_PurchasedWithOrderItemId!=value){
                    _PurchasedWithOrderItemId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PurchasedWithOrderItemId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _GiftCardTypeId;
        public int GiftCardTypeId
        {
            get { return _GiftCardTypeId; }
            set
            {
                if(_GiftCardTypeId!=value){
                    _GiftCardTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GiftCardTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _Amount;
        public decimal Amount
        {
            get { return _Amount; }
            set
            {
                if(_Amount!=value){
                    _Amount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Amount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsGiftCardActivated;
        public bool IsGiftCardActivated
        {
            get { return _IsGiftCardActivated; }
            set
            {
                if(_IsGiftCardActivated!=value){
                    _IsGiftCardActivated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsGiftCardActivated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _GiftCardCouponCode;
        public string GiftCardCouponCode
        {
            get { return _GiftCardCouponCode; }
            set
            {
                if(_GiftCardCouponCode!=value){
                    _GiftCardCouponCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GiftCardCouponCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RecipientName;
        public string RecipientName
        {
            get { return _RecipientName; }
            set
            {
                if(_RecipientName!=value){
                    _RecipientName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RecipientName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RecipientEmail;
        public string RecipientEmail
        {
            get { return _RecipientEmail; }
            set
            {
                if(_RecipientEmail!=value){
                    _RecipientEmail=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RecipientEmail");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SenderName;
        public string SenderName
        {
            get { return _SenderName; }
            set
            {
                if(_SenderName!=value){
                    _SenderName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SenderName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SenderEmail;
        public string SenderEmail
        {
            get { return _SenderEmail; }
            set
            {
                if(_SenderEmail!=value){
                    _SenderEmail=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SenderEmail");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Message;
        public string Message
        {
            get { return _Message; }
            set
            {
                if(_Message!=value){
                    _Message=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Message");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsRecipientNotified;
        public bool IsRecipientNotified
        {
            get { return _IsRecipientNotified; }
            set
            {
                if(_IsRecipientNotified!=value){
                    _IsRecipientNotified=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsRecipientNotified");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<GiftCard, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Product_ProductTag_Mapping table in the AliexpressDB Database.
    /// </summary>
    public partial class Product_ProductTag_Mapping: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Product_ProductTag_Mapping> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Product_ProductTag_Mapping>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Product_ProductTag_Mapping> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Product_ProductTag_Mapping item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Product_ProductTag_Mapping item=new Product_ProductTag_Mapping();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Product_ProductTag_Mapping> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Product_ProductTag_Mapping(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Product_ProductTag_Mapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Product_ProductTag_Mapping>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Product_ProductTag_Mapping(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Product_ProductTag_Mapping(Expression<Func<Product_ProductTag_Mapping, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Product_ProductTag_Mapping> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Product_ProductTag_Mapping> _repo;
            
            if(db.TestMode){
                Product_ProductTag_Mapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Product_ProductTag_Mapping>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Product_ProductTag_Mapping> GetRepo(){
            return GetRepo("","");
        }
        
        public static Product_ProductTag_Mapping SingleOrDefault(Expression<Func<Product_ProductTag_Mapping, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Product_ProductTag_Mapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Product_ProductTag_Mapping SingleOrDefault(Expression<Func<Product_ProductTag_Mapping, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Product_ProductTag_Mapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Product_ProductTag_Mapping, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Product_ProductTag_Mapping, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Product_ProductTag_Mapping> Find(Expression<Func<Product_ProductTag_Mapping, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Product_ProductTag_Mapping> Find(Expression<Func<Product_ProductTag_Mapping, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Product_ProductTag_Mapping> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Product_ProductTag_Mapping> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Product_ProductTag_Mapping> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Product_ProductTag_Mapping> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Product_ProductTag_Mapping> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Product_ProductTag_Mapping> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Product_Id";
        }

        public object KeyValue()
        {
            return this.Product_Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ProductTag_Id.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Product_ProductTag_Mapping)){
                Product_ProductTag_Mapping compare=(Product_ProductTag_Mapping)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Product_Id;
        }
        
        public string DescriptorValue()
        {
                            return this.ProductTag_Id.ToString();
                    }

        public string DescriptorColumn() {
            return "ProductTag_Id";
        }
        public static string GetKeyColumn()
        {
            return "Product_Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "ProductTag_Id";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Product> Products
        {
            get
            {
                
                  var repo=AliexpressDBA.Product.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _Product_Id
                       select items;
            }
        }

        public IQueryable<ProductTag> ProductTags
        {
            get
            {
                
                  var repo=AliexpressDBA.ProductTag.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ProductTag_Id
                       select items;
            }
        }

        #endregion
        

        int _Product_Id;
        public int Product_Id
        {
            get { return _Product_Id; }
            set
            {
                if(_Product_Id!=value){
                    _Product_Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Product_Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductTag_Id;
        public int ProductTag_Id
        {
            get { return _ProductTag_Id; }
            set
            {
                if(_ProductTag_Id!=value){
                    _ProductTag_Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductTag_Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Product_ProductTag_Mapping, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the BlogPost table in the AliexpressDB Database.
    /// </summary>
    public partial class BlogPost: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<BlogPost> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<BlogPost>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<BlogPost> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(BlogPost item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                BlogPost item=new BlogPost();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<BlogPost> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public BlogPost(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                BlogPost.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<BlogPost>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public BlogPost(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public BlogPost(Expression<Func<BlogPost, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<BlogPost> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<BlogPost> _repo;
            
            if(db.TestMode){
                BlogPost.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<BlogPost>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<BlogPost> GetRepo(){
            return GetRepo("","");
        }
        
        public static BlogPost SingleOrDefault(Expression<Func<BlogPost, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            BlogPost single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static BlogPost SingleOrDefault(Expression<Func<BlogPost, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            BlogPost single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<BlogPost, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<BlogPost, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<BlogPost> Find(Expression<Func<BlogPost, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<BlogPost> Find(Expression<Func<BlogPost, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<BlogPost> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<BlogPost> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<BlogPost> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<BlogPost> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<BlogPost> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<BlogPost> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Title.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(BlogPost)){
                BlogPost compare=(BlogPost)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Title.ToString();
                    }

        public string DescriptorColumn() {
            return "Title";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Title";
        }
        
        #region ' Foreign Keys '
        public IQueryable<BlogComment> BlogComments
        {
            get
            {
                
                  var repo=AliexpressDBA.BlogComment.GetRepo();
                  return from items in repo.GetAll()
                       where items.BlogPostId == _Id
                       select items;
            }
        }

        public IQueryable<Language> Languages
        {
            get
            {
                
                  var repo=AliexpressDBA.Language.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _LanguageId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _LanguageId;
        public int LanguageId
        {
            get { return _LanguageId; }
            set
            {
                if(_LanguageId!=value){
                    _LanguageId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LanguageId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Title;
        public string Title
        {
            get { return _Title; }
            set
            {
                if(_Title!=value){
                    _Title=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Title");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Body;
        public string Body
        {
            get { return _Body; }
            set
            {
                if(_Body!=value){
                    _Body=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Body");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _BodyOverview;
        public string BodyOverview
        {
            get { return _BodyOverview; }
            set
            {
                if(_BodyOverview!=value){
                    _BodyOverview=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BodyOverview");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _AllowComments;
        public bool AllowComments
        {
            get { return _AllowComments; }
            set
            {
                if(_AllowComments!=value){
                    _AllowComments=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AllowComments");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Tags;
        public string Tags
        {
            get { return _Tags; }
            set
            {
                if(_Tags!=value){
                    _Tags=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Tags");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _StartDateUtc;
        public DateTime? StartDateUtc
        {
            get { return _StartDateUtc; }
            set
            {
                if(_StartDateUtc!=value){
                    _StartDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StartDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _EndDateUtc;
        public DateTime? EndDateUtc
        {
            get { return _EndDateUtc; }
            set
            {
                if(_EndDateUtc!=value){
                    _EndDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EndDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaKeywords;
        public string MetaKeywords
        {
            get { return _MetaKeywords; }
            set
            {
                if(_MetaKeywords!=value){
                    _MetaKeywords=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaKeywords");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaDescription;
        public string MetaDescription
        {
            get { return _MetaDescription; }
            set
            {
                if(_MetaDescription!=value){
                    _MetaDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaTitle;
        public string MetaTitle
        {
            get { return _MetaTitle; }
            set
            {
                if(_MetaTitle!=value){
                    _MetaTitle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaTitle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _LimitedToStores;
        public bool LimitedToStores
        {
            get { return _LimitedToStores; }
            set
            {
                if(_LimitedToStores!=value){
                    _LimitedToStores=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LimitedToStores");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<BlogPost, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the GoogleProduct table in the AliexpressDB Database.
    /// </summary>
    public partial class GoogleProduct: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<GoogleProduct> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<GoogleProduct>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<GoogleProduct> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(GoogleProduct item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                GoogleProduct item=new GoogleProduct();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<GoogleProduct> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public GoogleProduct(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                GoogleProduct.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<GoogleProduct>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public GoogleProduct(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public GoogleProduct(Expression<Func<GoogleProduct, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<GoogleProduct> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<GoogleProduct> _repo;
            
            if(db.TestMode){
                GoogleProduct.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<GoogleProduct>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<GoogleProduct> GetRepo(){
            return GetRepo("","");
        }
        
        public static GoogleProduct SingleOrDefault(Expression<Func<GoogleProduct, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            GoogleProduct single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static GoogleProduct SingleOrDefault(Expression<Func<GoogleProduct, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            GoogleProduct single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<GoogleProduct, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<GoogleProduct, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<GoogleProduct> Find(Expression<Func<GoogleProduct, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<GoogleProduct> Find(Expression<Func<GoogleProduct, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<GoogleProduct> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<GoogleProduct> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<GoogleProduct> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<GoogleProduct> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<GoogleProduct> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<GoogleProduct> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Taxonomy.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(GoogleProduct)){
                GoogleProduct compare=(GoogleProduct)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Taxonomy.ToString();
                    }

        public string DescriptorColumn() {
            return "Taxonomy";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Taxonomy";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductId;
        public int ProductId
        {
            get { return _ProductId; }
            set
            {
                if(_ProductId!=value){
                    _ProductId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Taxonomy;
        public string Taxonomy
        {
            get { return _Taxonomy; }
            set
            {
                if(_Taxonomy!=value){
                    _Taxonomy=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Taxonomy");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _CustomGoods;
        public bool CustomGoods
        {
            get { return _CustomGoods; }
            set
            {
                if(_CustomGoods!=value){
                    _CustomGoods=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomGoods");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Gender;
        public string Gender
        {
            get { return _Gender; }
            set
            {
                if(_Gender!=value){
                    _Gender=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Gender");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AgeGroup;
        public string AgeGroup
        {
            get { return _AgeGroup; }
            set
            {
                if(_AgeGroup!=value){
                    _AgeGroup=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AgeGroup");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Color;
        public string Color
        {
            get { return _Color; }
            set
            {
                if(_Color!=value){
                    _Color=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Color");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Size;
        public string Size
        {
            get { return _Size; }
            set
            {
                if(_Size!=value){
                    _Size=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Size");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Material;
        public string Material
        {
            get { return _Material; }
            set
            {
                if(_Material!=value){
                    _Material=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Material");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Pattern;
        public string Pattern
        {
            get { return _Pattern; }
            set
            {
                if(_Pattern!=value){
                    _Pattern=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Pattern");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ItemGroupId;
        public string ItemGroupId
        {
            get { return _ItemGroupId; }
            set
            {
                if(_ItemGroupId!=value){
                    _ItemGroupId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemGroupId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<GoogleProduct, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_SPC_ProductsGroup table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_SPC_ProductsGroup: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_SPC_ProductsGroup> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_SPC_ProductsGroup>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_SPC_ProductsGroup> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_SPC_ProductsGroup item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_SPC_ProductsGroup item=new SS_SPC_ProductsGroup();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_SPC_ProductsGroup> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_SPC_ProductsGroup(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_SPC_ProductsGroup.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_SPC_ProductsGroup>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_SPC_ProductsGroup(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_SPC_ProductsGroup(Expression<Func<SS_SPC_ProductsGroup, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_SPC_ProductsGroup> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_SPC_ProductsGroup> _repo;
            
            if(db.TestMode){
                SS_SPC_ProductsGroup.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_SPC_ProductsGroup>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_SPC_ProductsGroup> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_SPC_ProductsGroup SingleOrDefault(Expression<Func<SS_SPC_ProductsGroup, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_SPC_ProductsGroup single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_SPC_ProductsGroup SingleOrDefault(Expression<Func<SS_SPC_ProductsGroup, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_SPC_ProductsGroup single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_SPC_ProductsGroup, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_SPC_ProductsGroup, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_SPC_ProductsGroup> Find(Expression<Func<SS_SPC_ProductsGroup, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_SPC_ProductsGroup> Find(Expression<Func<SS_SPC_ProductsGroup, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_SPC_ProductsGroup> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_SPC_ProductsGroup> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_SPC_ProductsGroup> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_SPC_ProductsGroup> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_SPC_ProductsGroup> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_SPC_ProductsGroup> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Title.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_SPC_ProductsGroup)){
                SS_SPC_ProductsGroup compare=(SS_SPC_ProductsGroup)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Title.ToString();
                    }

        public string DescriptorColumn() {
            return "Title";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Title";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SS_SPC_ProductsGroupItem> SS_SPC_ProductsGroupItems
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_SPC_ProductsGroupItem.GetRepo();
                  return from items in repo.GetAll()
                       where items.GroupId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Published;
        public bool Published
        {
            get { return _Published; }
            set
            {
                if(_Published!=value){
                    _Published=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Published");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Title;
        public string Title
        {
            get { return _Title; }
            set
            {
                if(_Title!=value){
                    _Title=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Title");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WidgetZone;
        public string WidgetZone
        {
            get { return _WidgetZone; }
            set
            {
                if(_WidgetZone!=value){
                    _WidgetZone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WidgetZone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Store;
        public int Store
        {
            get { return _Store; }
            set
            {
                if(_Store!=value){
                    _Store=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Store");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _NumberOfProductsPerItem;
        public int NumberOfProductsPerItem
        {
            get { return _NumberOfProductsPerItem; }
            set
            {
                if(_NumberOfProductsPerItem!=value){
                    _NumberOfProductsPerItem=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NumberOfProductsPerItem");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_SPC_ProductsGroup, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Vendor table in the AliexpressDB Database.
    /// </summary>
    public partial class Vendor: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Vendor> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Vendor>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Vendor> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Vendor item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Vendor item=new Vendor();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Vendor> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Vendor(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Vendor.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Vendor>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Vendor(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Vendor(Expression<Func<Vendor, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Vendor> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Vendor> _repo;
            
            if(db.TestMode){
                Vendor.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Vendor>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Vendor> GetRepo(){
            return GetRepo("","");
        }
        
        public static Vendor SingleOrDefault(Expression<Func<Vendor, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Vendor single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Vendor SingleOrDefault(Expression<Func<Vendor, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Vendor single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Vendor, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Vendor, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Vendor> Find(Expression<Func<Vendor, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Vendor> Find(Expression<Func<Vendor, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Vendor> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Vendor> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Vendor> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Vendor> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Vendor> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Vendor> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Vendor)){
                Vendor compare=(Vendor)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<VendorNote> VendorNotes
        {
            get
            {
                
                  var repo=AliexpressDBA.VendorNote.GetRepo();
                  return from items in repo.GetAll()
                       where items.VendorId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Email;
        public string Email
        {
            get { return _Email; }
            set
            {
                if(_Email!=value){
                    _Email=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Email");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Description;
        public string Description
        {
            get { return _Description; }
            set
            {
                if(_Description!=value){
                    _Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PictureId;
        public int PictureId
        {
            get { return _PictureId; }
            set
            {
                if(_PictureId!=value){
                    _PictureId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PictureId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AddressId;
        public int AddressId
        {
            get { return _AddressId; }
            set
            {
                if(_AddressId!=value){
                    _AddressId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AddressId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AdminComment;
        public string AdminComment
        {
            get { return _AdminComment; }
            set
            {
                if(_AdminComment!=value){
                    _AdminComment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdminComment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Active;
        public bool Active
        {
            get { return _Active; }
            set
            {
                if(_Active!=value){
                    _Active=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Active");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Deleted;
        public bool Deleted
        {
            get { return _Deleted; }
            set
            {
                if(_Deleted!=value){
                    _Deleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Deleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaKeywords;
        public string MetaKeywords
        {
            get { return _MetaKeywords; }
            set
            {
                if(_MetaKeywords!=value){
                    _MetaKeywords=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaKeywords");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaDescription;
        public string MetaDescription
        {
            get { return _MetaDescription; }
            set
            {
                if(_MetaDescription!=value){
                    _MetaDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaTitle;
        public string MetaTitle
        {
            get { return _MetaTitle; }
            set
            {
                if(_MetaTitle!=value){
                    _MetaTitle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaTitle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PageSize;
        public int PageSize
        {
            get { return _PageSize; }
            set
            {
                if(_PageSize!=value){
                    _PageSize=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PageSize");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _AllowCustomersToSelectPageSize;
        public bool AllowCustomersToSelectPageSize
        {
            get { return _AllowCustomersToSelectPageSize; }
            set
            {
                if(_AllowCustomersToSelectPageSize!=value){
                    _AllowCustomersToSelectPageSize=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AllowCustomersToSelectPageSize");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PageSizeOptions;
        public string PageSizeOptions
        {
            get { return _PageSizeOptions; }
            set
            {
                if(_PageSizeOptions!=value){
                    _PageSizeOptions=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PageSizeOptions");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.Deleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Vendor, bool>> expression) {
            var repo = GetRepo();
            
            
            List<Vendor> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.Deleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<Vendor, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the GiftCardUsageHistory table in the AliexpressDB Database.
    /// </summary>
    public partial class GiftCardUsageHistory: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<GiftCardUsageHistory> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<GiftCardUsageHistory>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<GiftCardUsageHistory> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(GiftCardUsageHistory item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                GiftCardUsageHistory item=new GiftCardUsageHistory();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<GiftCardUsageHistory> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public GiftCardUsageHistory(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                GiftCardUsageHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<GiftCardUsageHistory>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public GiftCardUsageHistory(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public GiftCardUsageHistory(Expression<Func<GiftCardUsageHistory, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<GiftCardUsageHistory> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<GiftCardUsageHistory> _repo;
            
            if(db.TestMode){
                GiftCardUsageHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<GiftCardUsageHistory>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<GiftCardUsageHistory> GetRepo(){
            return GetRepo("","");
        }
        
        public static GiftCardUsageHistory SingleOrDefault(Expression<Func<GiftCardUsageHistory, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            GiftCardUsageHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static GiftCardUsageHistory SingleOrDefault(Expression<Func<GiftCardUsageHistory, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            GiftCardUsageHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<GiftCardUsageHistory, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<GiftCardUsageHistory, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<GiftCardUsageHistory> Find(Expression<Func<GiftCardUsageHistory, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<GiftCardUsageHistory> Find(Expression<Func<GiftCardUsageHistory, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<GiftCardUsageHistory> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<GiftCardUsageHistory> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<GiftCardUsageHistory> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<GiftCardUsageHistory> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<GiftCardUsageHistory> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<GiftCardUsageHistory> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.GiftCardId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(GiftCardUsageHistory)){
                GiftCardUsageHistory compare=(GiftCardUsageHistory)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.GiftCardId.ToString();
                    }

        public string DescriptorColumn() {
            return "GiftCardId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "GiftCardId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<GiftCard> GiftCards
        {
            get
            {
                
                  var repo=AliexpressDBA.GiftCard.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _GiftCardId
                       select items;
            }
        }

        public IQueryable<Order> Orders
        {
            get
            {
                
                  var repo=AliexpressDBA.Order.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _UsedWithOrderId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _GiftCardId;
        public int GiftCardId
        {
            get { return _GiftCardId; }
            set
            {
                if(_GiftCardId!=value){
                    _GiftCardId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GiftCardId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _UsedWithOrderId;
        public int UsedWithOrderId
        {
            get { return _UsedWithOrderId; }
            set
            {
                if(_UsedWithOrderId!=value){
                    _UsedWithOrderId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UsedWithOrderId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _UsedValue;
        public decimal UsedValue
        {
            get { return _UsedValue; }
            set
            {
                if(_UsedValue!=value){
                    _UsedValue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UsedValue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<GiftCardUsageHistory, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ProductReview table in the AliexpressDB Database.
    /// </summary>
    public partial class ProductReview: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ProductReview> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ProductReview>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ProductReview> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ProductReview item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ProductReview item=new ProductReview();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ProductReview> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ProductReview(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ProductReview.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ProductReview>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ProductReview(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ProductReview(Expression<Func<ProductReview, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ProductReview> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ProductReview> _repo;
            
            if(db.TestMode){
                ProductReview.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ProductReview>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ProductReview> GetRepo(){
            return GetRepo("","");
        }
        
        public static ProductReview SingleOrDefault(Expression<Func<ProductReview, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ProductReview single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ProductReview SingleOrDefault(Expression<Func<ProductReview, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ProductReview single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ProductReview, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ProductReview, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ProductReview> Find(Expression<Func<ProductReview, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ProductReview> Find(Expression<Func<ProductReview, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ProductReview> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ProductReview> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ProductReview> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ProductReview> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ProductReview> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ProductReview> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Title.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ProductReview)){
                ProductReview compare=(ProductReview)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Title.ToString();
                    }

        public string DescriptorColumn() {
            return "Title";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Title";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Customer> Customers
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerId
                       select items;
            }
        }

        public IQueryable<Product> Products
        {
            get
            {
                
                  var repo=AliexpressDBA.Product.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ProductId
                       select items;
            }
        }

        public IQueryable<ProductReviewHelpfulness> ProductReviewHelpfulnesses
        {
            get
            {
                
                  var repo=AliexpressDBA.ProductReviewHelpfulness.GetRepo();
                  return from items in repo.GetAll()
                       where items.ProductReviewId == _Id
                       select items;
            }
        }

        public IQueryable<Store> Stores
        {
            get
            {
                
                  var repo=AliexpressDBA.Store.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _StoreId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerId;
        public int CustomerId
        {
            get { return _CustomerId; }
            set
            {
                if(_CustomerId!=value){
                    _CustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductId;
        public int ProductId
        {
            get { return _ProductId; }
            set
            {
                if(_ProductId!=value){
                    _ProductId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StoreId;
        public int StoreId
        {
            get { return _StoreId; }
            set
            {
                if(_StoreId!=value){
                    _StoreId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StoreId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsApproved;
        public bool IsApproved
        {
            get { return _IsApproved; }
            set
            {
                if(_IsApproved!=value){
                    _IsApproved=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsApproved");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Title;
        public string Title
        {
            get { return _Title; }
            set
            {
                if(_Title!=value){
                    _Title=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Title");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ReviewText;
        public string ReviewText
        {
            get { return _ReviewText; }
            set
            {
                if(_ReviewText!=value){
                    _ReviewText=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReviewText");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ReplyText;
        public string ReplyText
        {
            get { return _ReplyText; }
            set
            {
                if(_ReplyText!=value){
                    _ReplyText=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReplyText");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Rating;
        public int Rating
        {
            get { return _Rating; }
            set
            {
                if(_Rating!=value){
                    _Rating=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Rating");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _HelpfulYesTotal;
        public int HelpfulYesTotal
        {
            get { return _HelpfulYesTotal; }
            set
            {
                if(_HelpfulYesTotal!=value){
                    _HelpfulYesTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HelpfulYesTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _HelpfulNoTotal;
        public int HelpfulNoTotal
        {
            get { return _HelpfulNoTotal; }
            set
            {
                if(_HelpfulNoTotal!=value){
                    _HelpfulNoTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HelpfulNoTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ProductReview, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Campaign table in the AliexpressDB Database.
    /// </summary>
    public partial class Campaign: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Campaign> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Campaign>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Campaign> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Campaign item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Campaign item=new Campaign();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Campaign> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Campaign(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Campaign.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Campaign>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Campaign(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Campaign(Expression<Func<Campaign, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Campaign> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Campaign> _repo;
            
            if(db.TestMode){
                Campaign.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Campaign>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Campaign> GetRepo(){
            return GetRepo("","");
        }
        
        public static Campaign SingleOrDefault(Expression<Func<Campaign, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Campaign single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Campaign SingleOrDefault(Expression<Func<Campaign, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Campaign single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Campaign, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Campaign, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Campaign> Find(Expression<Func<Campaign, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Campaign> Find(Expression<Func<Campaign, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Campaign> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Campaign> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Campaign> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Campaign> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Campaign> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Campaign> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Campaign)){
                Campaign compare=(Campaign)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Subject;
        public string Subject
        {
            get { return _Subject; }
            set
            {
                if(_Subject!=value){
                    _Subject=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Subject");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Body;
        public string Body
        {
            get { return _Body; }
            set
            {
                if(_Body!=value){
                    _Body=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Body");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StoreId;
        public int StoreId
        {
            get { return _StoreId; }
            set
            {
                if(_StoreId!=value){
                    _StoreId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StoreId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerRoleId;
        public int CustomerRoleId
        {
            get { return _CustomerRoleId; }
            set
            {
                if(_CustomerRoleId!=value){
                    _CustomerRoleId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerRoleId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _DontSendBeforeDateUtc;
        public DateTime? DontSendBeforeDateUtc
        {
            get { return _DontSendBeforeDateUtc; }
            set
            {
                if(_DontSendBeforeDateUtc!=value){
                    _DontSendBeforeDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DontSendBeforeDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Campaign, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ShippingByWeight table in the AliexpressDB Database.
    /// </summary>
    public partial class ShippingByWeight: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ShippingByWeight> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ShippingByWeight>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ShippingByWeight> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ShippingByWeight item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ShippingByWeight item=new ShippingByWeight();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ShippingByWeight> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ShippingByWeight(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ShippingByWeight.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ShippingByWeight>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ShippingByWeight(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ShippingByWeight(Expression<Func<ShippingByWeight, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ShippingByWeight> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ShippingByWeight> _repo;
            
            if(db.TestMode){
                ShippingByWeight.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ShippingByWeight>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ShippingByWeight> GetRepo(){
            return GetRepo("","");
        }
        
        public static ShippingByWeight SingleOrDefault(Expression<Func<ShippingByWeight, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ShippingByWeight single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ShippingByWeight SingleOrDefault(Expression<Func<ShippingByWeight, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ShippingByWeight single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ShippingByWeight, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ShippingByWeight, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ShippingByWeight> Find(Expression<Func<ShippingByWeight, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ShippingByWeight> Find(Expression<Func<ShippingByWeight, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ShippingByWeight> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ShippingByWeight> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ShippingByWeight> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ShippingByWeight> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ShippingByWeight> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ShippingByWeight> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Zip.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ShippingByWeight)){
                ShippingByWeight compare=(ShippingByWeight)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Zip.ToString();
                    }

        public string DescriptorColumn() {
            return "Zip";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Zip";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StoreId;
        public int StoreId
        {
            get { return _StoreId; }
            set
            {
                if(_StoreId!=value){
                    _StoreId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StoreId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _WarehouseId;
        public int WarehouseId
        {
            get { return _WarehouseId; }
            set
            {
                if(_WarehouseId!=value){
                    _WarehouseId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WarehouseId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CountryId;
        public int CountryId
        {
            get { return _CountryId; }
            set
            {
                if(_CountryId!=value){
                    _CountryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StateProvinceId;
        public int StateProvinceId
        {
            get { return _StateProvinceId; }
            set
            {
                if(_StateProvinceId!=value){
                    _StateProvinceId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StateProvinceId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Zip;
        public string Zip
        {
            get { return _Zip; }
            set
            {
                if(_Zip!=value){
                    _Zip=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Zip");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ShippingMethodId;
        public int ShippingMethodId
        {
            get { return _ShippingMethodId; }
            set
            {
                if(_ShippingMethodId!=value){
                    _ShippingMethodId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ShippingMethodId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _From;
        public decimal From
        {
            get { return _From; }
            set
            {
                if(_From!=value){
                    _From=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="From");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _To;
        public decimal To
        {
            get { return _To; }
            set
            {
                if(_To!=value){
                    _To=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="To");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _AdditionalFixedCost;
        public decimal AdditionalFixedCost
        {
            get { return _AdditionalFixedCost; }
            set
            {
                if(_AdditionalFixedCost!=value){
                    _AdditionalFixedCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdditionalFixedCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _PercentageRateOfSubtotal;
        public decimal PercentageRateOfSubtotal
        {
            get { return _PercentageRateOfSubtotal; }
            set
            {
                if(_PercentageRateOfSubtotal!=value){
                    _PercentageRateOfSubtotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PercentageRateOfSubtotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _RatePerWeightUnit;
        public decimal RatePerWeightUnit
        {
            get { return _RatePerWeightUnit; }
            set
            {
                if(_RatePerWeightUnit!=value){
                    _RatePerWeightUnit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RatePerWeightUnit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _LowerWeightLimit;
        public decimal LowerWeightLimit
        {
            get { return _LowerWeightLimit; }
            set
            {
                if(_LowerWeightLimit!=value){
                    _LowerWeightLimit=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LowerWeightLimit");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ShippingByWeight, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_SPC_ProductsGroupItem table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_SPC_ProductsGroupItem: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_SPC_ProductsGroupItem> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_SPC_ProductsGroupItem>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_SPC_ProductsGroupItem> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_SPC_ProductsGroupItem item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_SPC_ProductsGroupItem item=new SS_SPC_ProductsGroupItem();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_SPC_ProductsGroupItem> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_SPC_ProductsGroupItem(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_SPC_ProductsGroupItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_SPC_ProductsGroupItem>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_SPC_ProductsGroupItem(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_SPC_ProductsGroupItem(Expression<Func<SS_SPC_ProductsGroupItem, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_SPC_ProductsGroupItem> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_SPC_ProductsGroupItem> _repo;
            
            if(db.TestMode){
                SS_SPC_ProductsGroupItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_SPC_ProductsGroupItem>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_SPC_ProductsGroupItem> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_SPC_ProductsGroupItem SingleOrDefault(Expression<Func<SS_SPC_ProductsGroupItem, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_SPC_ProductsGroupItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_SPC_ProductsGroupItem SingleOrDefault(Expression<Func<SS_SPC_ProductsGroupItem, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_SPC_ProductsGroupItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_SPC_ProductsGroupItem, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_SPC_ProductsGroupItem, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_SPC_ProductsGroupItem> Find(Expression<Func<SS_SPC_ProductsGroupItem, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_SPC_ProductsGroupItem> Find(Expression<Func<SS_SPC_ProductsGroupItem, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_SPC_ProductsGroupItem> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_SPC_ProductsGroupItem> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_SPC_ProductsGroupItem> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_SPC_ProductsGroupItem> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_SPC_ProductsGroupItem> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_SPC_ProductsGroupItem> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Title.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_SPC_ProductsGroupItem)){
                SS_SPC_ProductsGroupItem compare=(SS_SPC_ProductsGroupItem)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Title.ToString();
                    }

        public string DescriptorColumn() {
            return "Title";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Title";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SS_SPC_ProductsGroup> SS_SPC_ProductsGroups
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_SPC_ProductsGroup.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _GroupId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Active;
        public bool Active
        {
            get { return _Active; }
            set
            {
                if(_Active!=value){
                    _Active=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Active");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Title;
        public string Title
        {
            get { return _Title; }
            set
            {
                if(_Title!=value){
                    _Title=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Title");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SourceType;
        public int SourceType
        {
            get { return _SourceType; }
            set
            {
                if(_SourceType!=value){
                    _SourceType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SourceType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _EntityId;
        public int EntityId
        {
            get { return _EntityId; }
            set
            {
                if(_EntityId!=value){
                    _EntityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SortMethod;
        public int SortMethod
        {
            get { return _SortMethod; }
            set
            {
                if(_SortMethod!=value){
                    _SortMethod=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SortMethod");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _GroupId;
        public int GroupId
        {
            get { return _GroupId; }
            set
            {
                if(_GroupId!=value){
                    _GroupId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GroupId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_SPC_ProductsGroupItem, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the VendorNote table in the AliexpressDB Database.
    /// </summary>
    public partial class VendorNote: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<VendorNote> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<VendorNote>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<VendorNote> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(VendorNote item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                VendorNote item=new VendorNote();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<VendorNote> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public VendorNote(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                VendorNote.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<VendorNote>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public VendorNote(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public VendorNote(Expression<Func<VendorNote, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<VendorNote> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<VendorNote> _repo;
            
            if(db.TestMode){
                VendorNote.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<VendorNote>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<VendorNote> GetRepo(){
            return GetRepo("","");
        }
        
        public static VendorNote SingleOrDefault(Expression<Func<VendorNote, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            VendorNote single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static VendorNote SingleOrDefault(Expression<Func<VendorNote, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            VendorNote single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<VendorNote, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<VendorNote, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<VendorNote> Find(Expression<Func<VendorNote, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<VendorNote> Find(Expression<Func<VendorNote, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<VendorNote> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<VendorNote> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<VendorNote> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<VendorNote> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<VendorNote> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<VendorNote> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Note.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(VendorNote)){
                VendorNote compare=(VendorNote)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Note.ToString();
                    }

        public string DescriptorColumn() {
            return "Note";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Note";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Vendor> Vendors
        {
            get
            {
                
                  var repo=AliexpressDBA.Vendor.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _VendorId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _VendorId;
        public int VendorId
        {
            get { return _VendorId; }
            set
            {
                if(_VendorId!=value){
                    _VendorId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VendorId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Note;
        public string Note
        {
            get { return _Note; }
            set
            {
                if(_Note!=value){
                    _Note=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Note");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<VendorNote, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Language table in the AliexpressDB Database.
    /// </summary>
    public partial class Language: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Language> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Language>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Language> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Language item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Language item=new Language();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Language> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Language(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Language.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Language>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Language(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Language(Expression<Func<Language, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Language> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Language> _repo;
            
            if(db.TestMode){
                Language.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Language>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Language> GetRepo(){
            return GetRepo("","");
        }
        
        public static Language SingleOrDefault(Expression<Func<Language, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Language single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Language SingleOrDefault(Expression<Func<Language, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Language single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Language, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Language, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Language> Find(Expression<Func<Language, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Language> Find(Expression<Func<Language, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Language> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Language> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Language> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Language> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Language> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Language> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Language)){
                Language compare=(Language)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<BlogPost> BlogPosts
        {
            get
            {
                
                  var repo=AliexpressDBA.BlogPost.GetRepo();
                  return from items in repo.GetAll()
                       where items.LanguageId == _Id
                       select items;
            }
        }

        public IQueryable<LocaleStringResource> LocaleStringResources
        {
            get
            {
                
                  var repo=AliexpressDBA.LocaleStringResource.GetRepo();
                  return from items in repo.GetAll()
                       where items.LanguageId == _Id
                       select items;
            }
        }

        public IQueryable<LocalizedProperty> LocalizedProperties
        {
            get
            {
                
                  var repo=AliexpressDBA.LocalizedProperty.GetRepo();
                  return from items in repo.GetAll()
                       where items.LanguageId == _Id
                       select items;
            }
        }

        public IQueryable<News> News
        {
            get
            {
                
                  var repo=AliexpressDBA.News.GetRepo();
                  return from items in repo.GetAll()
                       where items.LanguageId == _Id
                       select items;
            }
        }

        public IQueryable<Poll> Polls
        {
            get
            {
                
                  var repo=AliexpressDBA.Poll.GetRepo();
                  return from items in repo.GetAll()
                       where items.LanguageId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LanguageCulture;
        public string LanguageCulture
        {
            get { return _LanguageCulture; }
            set
            {
                if(_LanguageCulture!=value){
                    _LanguageCulture=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LanguageCulture");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UniqueSeoCode;
        public string UniqueSeoCode
        {
            get { return _UniqueSeoCode; }
            set
            {
                if(_UniqueSeoCode!=value){
                    _UniqueSeoCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UniqueSeoCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FlagImageFileName;
        public string FlagImageFileName
        {
            get { return _FlagImageFileName; }
            set
            {
                if(_FlagImageFileName!=value){
                    _FlagImageFileName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FlagImageFileName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Rtl;
        public bool Rtl
        {
            get { return _Rtl; }
            set
            {
                if(_Rtl!=value){
                    _Rtl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Rtl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _LimitedToStores;
        public bool LimitedToStores
        {
            get { return _LimitedToStores; }
            set
            {
                if(_LimitedToStores!=value){
                    _LimitedToStores=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LimitedToStores");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DefaultCurrencyId;
        public int DefaultCurrencyId
        {
            get { return _DefaultCurrencyId; }
            set
            {
                if(_DefaultCurrencyId!=value){
                    _DefaultCurrencyId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DefaultCurrencyId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Published;
        public bool Published
        {
            get { return _Published; }
            set
            {
                if(_Published!=value){
                    _Published=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Published");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Language, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ProductReviewHelpfulness table in the AliexpressDB Database.
    /// </summary>
    public partial class ProductReviewHelpfulness: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ProductReviewHelpfulness> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ProductReviewHelpfulness>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ProductReviewHelpfulness> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ProductReviewHelpfulness item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ProductReviewHelpfulness item=new ProductReviewHelpfulness();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ProductReviewHelpfulness> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ProductReviewHelpfulness(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ProductReviewHelpfulness.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ProductReviewHelpfulness>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ProductReviewHelpfulness(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ProductReviewHelpfulness(Expression<Func<ProductReviewHelpfulness, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ProductReviewHelpfulness> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ProductReviewHelpfulness> _repo;
            
            if(db.TestMode){
                ProductReviewHelpfulness.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ProductReviewHelpfulness>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ProductReviewHelpfulness> GetRepo(){
            return GetRepo("","");
        }
        
        public static ProductReviewHelpfulness SingleOrDefault(Expression<Func<ProductReviewHelpfulness, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ProductReviewHelpfulness single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ProductReviewHelpfulness SingleOrDefault(Expression<Func<ProductReviewHelpfulness, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ProductReviewHelpfulness single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ProductReviewHelpfulness, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ProductReviewHelpfulness, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ProductReviewHelpfulness> Find(Expression<Func<ProductReviewHelpfulness, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ProductReviewHelpfulness> Find(Expression<Func<ProductReviewHelpfulness, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ProductReviewHelpfulness> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ProductReviewHelpfulness> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ProductReviewHelpfulness> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ProductReviewHelpfulness> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ProductReviewHelpfulness> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ProductReviewHelpfulness> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ProductReviewId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ProductReviewHelpfulness)){
                ProductReviewHelpfulness compare=(ProductReviewHelpfulness)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.ProductReviewId.ToString();
                    }

        public string DescriptorColumn() {
            return "ProductReviewId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "ProductReviewId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<ProductReview> ProductReviews
        {
            get
            {
                
                  var repo=AliexpressDBA.ProductReview.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ProductReviewId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductReviewId;
        public int ProductReviewId
        {
            get { return _ProductReviewId; }
            set
            {
                if(_ProductReviewId!=value){
                    _ProductReviewId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductReviewId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _WasHelpful;
        public bool WasHelpful
        {
            get { return _WasHelpful; }
            set
            {
                if(_WasHelpful!=value){
                    _WasHelpful=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WasHelpful");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerId;
        public int CustomerId
        {
            get { return _CustomerId; }
            set
            {
                if(_CustomerId!=value){
                    _CustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ProductReviewHelpfulness, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Category table in the AliexpressDB Database.
    /// </summary>
    public partial class Category: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Category> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Category>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Category> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Category item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Category item=new Category();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Category> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Category(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Category.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Category>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Category(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Category(Expression<Func<Category, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Category> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Category> _repo;
            
            if(db.TestMode){
                Category.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Category>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Category> GetRepo(){
            return GetRepo("","");
        }
        
        public static Category SingleOrDefault(Expression<Func<Category, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Category single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Category SingleOrDefault(Expression<Func<Category, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Category single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Category, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Category, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Category> Find(Expression<Func<Category, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Category> Find(Expression<Func<Category, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Category> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Category> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Category> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Category> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Category> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Category> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Category)){
                Category compare=(Category)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Discount_AppliedToCategory> Discount_AppliedToCategories
        {
            get
            {
                
                  var repo=AliexpressDBA.Discount_AppliedToCategory.GetRepo();
                  return from items in repo.GetAll()
                       where items.Category_Id == _Id
                       select items;
            }
        }

        public IQueryable<Product_Category_Mapping> Product_Category_Mappings
        {
            get
            {
                
                  var repo=AliexpressDBA.Product_Category_Mapping.GetRepo();
                  return from items in repo.GetAll()
                       where items.CategoryId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Description;
        public string Description
        {
            get { return _Description; }
            set
            {
                if(_Description!=value){
                    _Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CategoryTemplateId;
        public int CategoryTemplateId
        {
            get { return _CategoryTemplateId; }
            set
            {
                if(_CategoryTemplateId!=value){
                    _CategoryTemplateId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CategoryTemplateId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaKeywords;
        public string MetaKeywords
        {
            get { return _MetaKeywords; }
            set
            {
                if(_MetaKeywords!=value){
                    _MetaKeywords=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaKeywords");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaDescription;
        public string MetaDescription
        {
            get { return _MetaDescription; }
            set
            {
                if(_MetaDescription!=value){
                    _MetaDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaTitle;
        public string MetaTitle
        {
            get { return _MetaTitle; }
            set
            {
                if(_MetaTitle!=value){
                    _MetaTitle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaTitle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ParentCategoryId;
        public int ParentCategoryId
        {
            get { return _ParentCategoryId; }
            set
            {
                if(_ParentCategoryId!=value){
                    _ParentCategoryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParentCategoryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PictureId;
        public int PictureId
        {
            get { return _PictureId; }
            set
            {
                if(_PictureId!=value){
                    _PictureId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PictureId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PageSize;
        public int PageSize
        {
            get { return _PageSize; }
            set
            {
                if(_PageSize!=value){
                    _PageSize=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PageSize");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _AllowCustomersToSelectPageSize;
        public bool AllowCustomersToSelectPageSize
        {
            get { return _AllowCustomersToSelectPageSize; }
            set
            {
                if(_AllowCustomersToSelectPageSize!=value){
                    _AllowCustomersToSelectPageSize=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AllowCustomersToSelectPageSize");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PageSizeOptions;
        public string PageSizeOptions
        {
            get { return _PageSizeOptions; }
            set
            {
                if(_PageSizeOptions!=value){
                    _PageSizeOptions=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PageSizeOptions");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PriceRanges;
        public string PriceRanges
        {
            get { return _PriceRanges; }
            set
            {
                if(_PriceRanges!=value){
                    _PriceRanges=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PriceRanges");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _ShowOnHomePage;
        public bool ShowOnHomePage
        {
            get { return _ShowOnHomePage; }
            set
            {
                if(_ShowOnHomePage!=value){
                    _ShowOnHomePage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ShowOnHomePage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IncludeInTopMenu;
        public bool IncludeInTopMenu
        {
            get { return _IncludeInTopMenu; }
            set
            {
                if(_IncludeInTopMenu!=value){
                    _IncludeInTopMenu=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IncludeInTopMenu");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _SubjectToAcl;
        public bool SubjectToAcl
        {
            get { return _SubjectToAcl; }
            set
            {
                if(_SubjectToAcl!=value){
                    _SubjectToAcl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubjectToAcl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _LimitedToStores;
        public bool LimitedToStores
        {
            get { return _LimitedToStores; }
            set
            {
                if(_LimitedToStores!=value){
                    _LimitedToStores=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LimitedToStores");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Published;
        public bool Published
        {
            get { return _Published; }
            set
            {
                if(_Published!=value){
                    _Published=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Published");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Deleted;
        public bool Deleted
        {
            get { return _Deleted; }
            set
            {
                if(_Deleted!=value){
                    _Deleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Deleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _UpdatedOnUtc;
        public DateTime UpdatedOnUtc
        {
            get { return _UpdatedOnUtc; }
            set
            {
                if(_UpdatedOnUtc!=value){
                    _UpdatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.Deleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Category, bool>> expression) {
            var repo = GetRepo();
            
            
            List<Category> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.Deleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<Category, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the TaxRate table in the AliexpressDB Database.
    /// </summary>
    public partial class TaxRate: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<TaxRate> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<TaxRate>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<TaxRate> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(TaxRate item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                TaxRate item=new TaxRate();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<TaxRate> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public TaxRate(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                TaxRate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TaxRate>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public TaxRate(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public TaxRate(Expression<Func<TaxRate, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<TaxRate> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<TaxRate> _repo;
            
            if(db.TestMode){
                TaxRate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<TaxRate>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<TaxRate> GetRepo(){
            return GetRepo("","");
        }
        
        public static TaxRate SingleOrDefault(Expression<Func<TaxRate, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            TaxRate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static TaxRate SingleOrDefault(Expression<Func<TaxRate, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            TaxRate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<TaxRate, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<TaxRate, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<TaxRate> Find(Expression<Func<TaxRate, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<TaxRate> Find(Expression<Func<TaxRate, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<TaxRate> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<TaxRate> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<TaxRate> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<TaxRate> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<TaxRate> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<TaxRate> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Zip.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(TaxRate)){
                TaxRate compare=(TaxRate)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Zip.ToString();
                    }

        public string DescriptorColumn() {
            return "Zip";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Zip";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StoreId;
        public int StoreId
        {
            get { return _StoreId; }
            set
            {
                if(_StoreId!=value){
                    _StoreId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StoreId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TaxCategoryId;
        public int TaxCategoryId
        {
            get { return _TaxCategoryId; }
            set
            {
                if(_TaxCategoryId!=value){
                    _TaxCategoryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TaxCategoryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CountryId;
        public int CountryId
        {
            get { return _CountryId; }
            set
            {
                if(_CountryId!=value){
                    _CountryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StateProvinceId;
        public int StateProvinceId
        {
            get { return _StateProvinceId; }
            set
            {
                if(_StateProvinceId!=value){
                    _StateProvinceId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StateProvinceId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Zip;
        public string Zip
        {
            get { return _Zip; }
            set
            {
                if(_Zip!=value){
                    _Zip=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Zip");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _Percentage;
        public decimal Percentage
        {
            get { return _Percentage; }
            set
            {
                if(_Percentage!=value){
                    _Percentage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Percentage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<TaxRate, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Warehouse table in the AliexpressDB Database.
    /// </summary>
    public partial class Warehouse: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Warehouse> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Warehouse>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Warehouse> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Warehouse item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Warehouse item=new Warehouse();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Warehouse> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Warehouse(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Warehouse.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Warehouse>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Warehouse(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Warehouse(Expression<Func<Warehouse, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Warehouse> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Warehouse> _repo;
            
            if(db.TestMode){
                Warehouse.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Warehouse>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Warehouse> GetRepo(){
            return GetRepo("","");
        }
        
        public static Warehouse SingleOrDefault(Expression<Func<Warehouse, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Warehouse single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Warehouse SingleOrDefault(Expression<Func<Warehouse, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Warehouse single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Warehouse, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Warehouse, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Warehouse> Find(Expression<Func<Warehouse, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Warehouse> Find(Expression<Func<Warehouse, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Warehouse> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Warehouse> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Warehouse> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Warehouse> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Warehouse> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Warehouse> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Warehouse)){
                Warehouse compare=(Warehouse)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<ProductWarehouseInventory> ProductWarehouseInventories
        {
            get
            {
                
                  var repo=AliexpressDBA.ProductWarehouseInventory.GetRepo();
                  return from items in repo.GetAll()
                       where items.WarehouseId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AdminComment;
        public string AdminComment
        {
            get { return _AdminComment; }
            set
            {
                if(_AdminComment!=value){
                    _AdminComment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdminComment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AddressId;
        public int AddressId
        {
            get { return _AddressId; }
            set
            {
                if(_AddressId!=value){
                    _AddressId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AddressId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Warehouse, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the LocaleStringResource table in the AliexpressDB Database.
    /// </summary>
    public partial class LocaleStringResource: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<LocaleStringResource> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<LocaleStringResource>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<LocaleStringResource> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(LocaleStringResource item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                LocaleStringResource item=new LocaleStringResource();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<LocaleStringResource> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public LocaleStringResource(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                LocaleStringResource.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<LocaleStringResource>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public LocaleStringResource(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public LocaleStringResource(Expression<Func<LocaleStringResource, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<LocaleStringResource> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<LocaleStringResource> _repo;
            
            if(db.TestMode){
                LocaleStringResource.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<LocaleStringResource>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<LocaleStringResource> GetRepo(){
            return GetRepo("","");
        }
        
        public static LocaleStringResource SingleOrDefault(Expression<Func<LocaleStringResource, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            LocaleStringResource single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static LocaleStringResource SingleOrDefault(Expression<Func<LocaleStringResource, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            LocaleStringResource single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<LocaleStringResource, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<LocaleStringResource, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<LocaleStringResource> Find(Expression<Func<LocaleStringResource, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<LocaleStringResource> Find(Expression<Func<LocaleStringResource, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<LocaleStringResource> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<LocaleStringResource> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<LocaleStringResource> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<LocaleStringResource> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<LocaleStringResource> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<LocaleStringResource> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ResourceName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(LocaleStringResource)){
                LocaleStringResource compare=(LocaleStringResource)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.ResourceName.ToString();
                    }

        public string DescriptorColumn() {
            return "ResourceName";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "ResourceName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Language> Languages
        {
            get
            {
                
                  var repo=AliexpressDBA.Language.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _LanguageId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _LanguageId;
        public int LanguageId
        {
            get { return _LanguageId; }
            set
            {
                if(_LanguageId!=value){
                    _LanguageId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LanguageId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ResourceName;
        public string ResourceName
        {
            get { return _ResourceName; }
            set
            {
                if(_ResourceName!=value){
                    _ResourceName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ResourceName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ResourceValue;
        public string ResourceValue
        {
            get { return _ResourceValue; }
            set
            {
                if(_ResourceValue!=value){
                    _ResourceValue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ResourceValue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<LocaleStringResource, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Product_SpecificationAttribute_Mapping table in the AliexpressDB Database.
    /// </summary>
    public partial class Product_SpecificationAttribute_Mapping: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Product_SpecificationAttribute_Mapping> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Product_SpecificationAttribute_Mapping>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Product_SpecificationAttribute_Mapping> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Product_SpecificationAttribute_Mapping item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Product_SpecificationAttribute_Mapping item=new Product_SpecificationAttribute_Mapping();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Product_SpecificationAttribute_Mapping> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Product_SpecificationAttribute_Mapping(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Product_SpecificationAttribute_Mapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Product_SpecificationAttribute_Mapping>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Product_SpecificationAttribute_Mapping(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Product_SpecificationAttribute_Mapping(Expression<Func<Product_SpecificationAttribute_Mapping, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Product_SpecificationAttribute_Mapping> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Product_SpecificationAttribute_Mapping> _repo;
            
            if(db.TestMode){
                Product_SpecificationAttribute_Mapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Product_SpecificationAttribute_Mapping>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Product_SpecificationAttribute_Mapping> GetRepo(){
            return GetRepo("","");
        }
        
        public static Product_SpecificationAttribute_Mapping SingleOrDefault(Expression<Func<Product_SpecificationAttribute_Mapping, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Product_SpecificationAttribute_Mapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Product_SpecificationAttribute_Mapping SingleOrDefault(Expression<Func<Product_SpecificationAttribute_Mapping, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Product_SpecificationAttribute_Mapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Product_SpecificationAttribute_Mapping, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Product_SpecificationAttribute_Mapping, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Product_SpecificationAttribute_Mapping> Find(Expression<Func<Product_SpecificationAttribute_Mapping, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Product_SpecificationAttribute_Mapping> Find(Expression<Func<Product_SpecificationAttribute_Mapping, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Product_SpecificationAttribute_Mapping> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Product_SpecificationAttribute_Mapping> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Product_SpecificationAttribute_Mapping> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Product_SpecificationAttribute_Mapping> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Product_SpecificationAttribute_Mapping> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Product_SpecificationAttribute_Mapping> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.CustomValue.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Product_SpecificationAttribute_Mapping)){
                Product_SpecificationAttribute_Mapping compare=(Product_SpecificationAttribute_Mapping)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.CustomValue.ToString();
                    }

        public string DescriptorColumn() {
            return "CustomValue";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "CustomValue";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Product> Products
        {
            get
            {
                
                  var repo=AliexpressDBA.Product.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ProductId
                       select items;
            }
        }

        public IQueryable<SpecificationAttributeOption> SpecificationAttributeOptions
        {
            get
            {
                
                  var repo=AliexpressDBA.SpecificationAttributeOption.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _SpecificationAttributeOptionId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductId;
        public int ProductId
        {
            get { return _ProductId; }
            set
            {
                if(_ProductId!=value){
                    _ProductId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AttributeTypeId;
        public int AttributeTypeId
        {
            get { return _AttributeTypeId; }
            set
            {
                if(_AttributeTypeId!=value){
                    _AttributeTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AttributeTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SpecificationAttributeOptionId;
        public int SpecificationAttributeOptionId
        {
            get { return _SpecificationAttributeOptionId; }
            set
            {
                if(_SpecificationAttributeOptionId!=value){
                    _SpecificationAttributeOptionId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SpecificationAttributeOptionId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CustomValue;
        public string CustomValue
        {
            get { return _CustomValue; }
            set
            {
                if(_CustomValue!=value){
                    _CustomValue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomValue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _AllowFiltering;
        public bool AllowFiltering
        {
            get { return _AllowFiltering; }
            set
            {
                if(_AllowFiltering!=value){
                    _AllowFiltering=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AllowFiltering");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _ShowOnProductPage;
        public bool ShowOnProductPage
        {
            get { return _ShowOnProductPage; }
            set
            {
                if(_ShowOnProductPage!=value){
                    _ShowOnProductPage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ShowOnProductPage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Product_SpecificationAttribute_Mapping, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the CategoryTemplate table in the AliexpressDB Database.
    /// </summary>
    public partial class CategoryTemplate: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<CategoryTemplate> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<CategoryTemplate>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<CategoryTemplate> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(CategoryTemplate item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                CategoryTemplate item=new CategoryTemplate();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<CategoryTemplate> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public CategoryTemplate(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                CategoryTemplate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<CategoryTemplate>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public CategoryTemplate(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public CategoryTemplate(Expression<Func<CategoryTemplate, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<CategoryTemplate> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<CategoryTemplate> _repo;
            
            if(db.TestMode){
                CategoryTemplate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<CategoryTemplate>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<CategoryTemplate> GetRepo(){
            return GetRepo("","");
        }
        
        public static CategoryTemplate SingleOrDefault(Expression<Func<CategoryTemplate, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            CategoryTemplate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static CategoryTemplate SingleOrDefault(Expression<Func<CategoryTemplate, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            CategoryTemplate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<CategoryTemplate, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<CategoryTemplate, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<CategoryTemplate> Find(Expression<Func<CategoryTemplate, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<CategoryTemplate> Find(Expression<Func<CategoryTemplate, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<CategoryTemplate> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<CategoryTemplate> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<CategoryTemplate> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<CategoryTemplate> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<CategoryTemplate> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<CategoryTemplate> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(CategoryTemplate)){
                CategoryTemplate compare=(CategoryTemplate)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ViewPath;
        public string ViewPath
        {
            get { return _ViewPath; }
            set
            {
                if(_ViewPath!=value){
                    _ViewPath=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ViewPath");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<CategoryTemplate, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the LocalizedProperty table in the AliexpressDB Database.
    /// </summary>
    public partial class LocalizedProperty: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<LocalizedProperty> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<LocalizedProperty>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<LocalizedProperty> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(LocalizedProperty item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                LocalizedProperty item=new LocalizedProperty();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<LocalizedProperty> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public LocalizedProperty(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                LocalizedProperty.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<LocalizedProperty>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public LocalizedProperty(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public LocalizedProperty(Expression<Func<LocalizedProperty, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<LocalizedProperty> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<LocalizedProperty> _repo;
            
            if(db.TestMode){
                LocalizedProperty.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<LocalizedProperty>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<LocalizedProperty> GetRepo(){
            return GetRepo("","");
        }
        
        public static LocalizedProperty SingleOrDefault(Expression<Func<LocalizedProperty, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            LocalizedProperty single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static LocalizedProperty SingleOrDefault(Expression<Func<LocalizedProperty, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            LocalizedProperty single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<LocalizedProperty, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<LocalizedProperty, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<LocalizedProperty> Find(Expression<Func<LocalizedProperty, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<LocalizedProperty> Find(Expression<Func<LocalizedProperty, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<LocalizedProperty> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<LocalizedProperty> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<LocalizedProperty> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<LocalizedProperty> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<LocalizedProperty> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<LocalizedProperty> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.LocaleKeyGroup.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(LocalizedProperty)){
                LocalizedProperty compare=(LocalizedProperty)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.LocaleKeyGroup.ToString();
                    }

        public string DescriptorColumn() {
            return "LocaleKeyGroup";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "LocaleKeyGroup";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Language> Languages
        {
            get
            {
                
                  var repo=AliexpressDBA.Language.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _LanguageId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _EntityId;
        public int EntityId
        {
            get { return _EntityId; }
            set
            {
                if(_EntityId!=value){
                    _EntityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _LanguageId;
        public int LanguageId
        {
            get { return _LanguageId; }
            set
            {
                if(_LanguageId!=value){
                    _LanguageId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LanguageId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LocaleKeyGroup;
        public string LocaleKeyGroup
        {
            get { return _LocaleKeyGroup; }
            set
            {
                if(_LocaleKeyGroup!=value){
                    _LocaleKeyGroup=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocaleKeyGroup");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LocaleKey;
        public string LocaleKey
        {
            get { return _LocaleKey; }
            set
            {
                if(_LocaleKey!=value){
                    _LocaleKey=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocaleKey");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LocaleValue;
        public string LocaleValue
        {
            get { return _LocaleValue; }
            set
            {
                if(_LocaleValue!=value){
                    _LocaleValue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LocaleValue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<LocalizedProperty, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ProductTag table in the AliexpressDB Database.
    /// </summary>
    public partial class ProductTag: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ProductTag> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ProductTag>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ProductTag> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ProductTag item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ProductTag item=new ProductTag();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ProductTag> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ProductTag(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ProductTag.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ProductTag>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ProductTag(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ProductTag(Expression<Func<ProductTag, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ProductTag> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ProductTag> _repo;
            
            if(db.TestMode){
                ProductTag.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ProductTag>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ProductTag> GetRepo(){
            return GetRepo("","");
        }
        
        public static ProductTag SingleOrDefault(Expression<Func<ProductTag, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ProductTag single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ProductTag SingleOrDefault(Expression<Func<ProductTag, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ProductTag single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ProductTag, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ProductTag, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ProductTag> Find(Expression<Func<ProductTag, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ProductTag> Find(Expression<Func<ProductTag, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ProductTag> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ProductTag> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ProductTag> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ProductTag> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ProductTag> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ProductTag> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ProductTag)){
                ProductTag compare=(ProductTag)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Product_ProductTag_Mapping> Product_ProductTag_Mappings
        {
            get
            {
                
                  var repo=AliexpressDBA.Product_ProductTag_Mapping.GetRepo();
                  return from items in repo.GetAll()
                       where items.ProductTag_Id == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ProductTag, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the CheckoutAttribute table in the AliexpressDB Database.
    /// </summary>
    public partial class CheckoutAttribute: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<CheckoutAttribute> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<CheckoutAttribute>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<CheckoutAttribute> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(CheckoutAttribute item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                CheckoutAttribute item=new CheckoutAttribute();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<CheckoutAttribute> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public CheckoutAttribute(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                CheckoutAttribute.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<CheckoutAttribute>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public CheckoutAttribute(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public CheckoutAttribute(Expression<Func<CheckoutAttribute, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<CheckoutAttribute> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<CheckoutAttribute> _repo;
            
            if(db.TestMode){
                CheckoutAttribute.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<CheckoutAttribute>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<CheckoutAttribute> GetRepo(){
            return GetRepo("","");
        }
        
        public static CheckoutAttribute SingleOrDefault(Expression<Func<CheckoutAttribute, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            CheckoutAttribute single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static CheckoutAttribute SingleOrDefault(Expression<Func<CheckoutAttribute, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            CheckoutAttribute single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<CheckoutAttribute, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<CheckoutAttribute, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<CheckoutAttribute> Find(Expression<Func<CheckoutAttribute, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<CheckoutAttribute> Find(Expression<Func<CheckoutAttribute, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<CheckoutAttribute> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<CheckoutAttribute> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<CheckoutAttribute> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<CheckoutAttribute> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<CheckoutAttribute> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<CheckoutAttribute> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(CheckoutAttribute)){
                CheckoutAttribute compare=(CheckoutAttribute)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<CheckoutAttributeValue> CheckoutAttributeValues
        {
            get
            {
                
                  var repo=AliexpressDBA.CheckoutAttributeValue.GetRepo();
                  return from items in repo.GetAll()
                       where items.CheckoutAttributeId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TextPrompt;
        public string TextPrompt
        {
            get { return _TextPrompt; }
            set
            {
                if(_TextPrompt!=value){
                    _TextPrompt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TextPrompt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsRequired;
        public bool IsRequired
        {
            get { return _IsRequired; }
            set
            {
                if(_IsRequired!=value){
                    _IsRequired=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsRequired");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _ShippableProductRequired;
        public bool ShippableProductRequired
        {
            get { return _ShippableProductRequired; }
            set
            {
                if(_ShippableProductRequired!=value){
                    _ShippableProductRequired=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ShippableProductRequired");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsTaxExempt;
        public bool IsTaxExempt
        {
            get { return _IsTaxExempt; }
            set
            {
                if(_IsTaxExempt!=value){
                    _IsTaxExempt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsTaxExempt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TaxCategoryId;
        public int TaxCategoryId
        {
            get { return _TaxCategoryId; }
            set
            {
                if(_TaxCategoryId!=value){
                    _TaxCategoryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TaxCategoryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AttributeControlTypeId;
        public int AttributeControlTypeId
        {
            get { return _AttributeControlTypeId; }
            set
            {
                if(_AttributeControlTypeId!=value){
                    _AttributeControlTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AttributeControlTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _LimitedToStores;
        public bool LimitedToStores
        {
            get { return _LimitedToStores; }
            set
            {
                if(_LimitedToStores!=value){
                    _LimitedToStores=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LimitedToStores");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ValidationMinLength;
        public int? ValidationMinLength
        {
            get { return _ValidationMinLength; }
            set
            {
                if(_ValidationMinLength!=value){
                    _ValidationMinLength=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ValidationMinLength");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ValidationMaxLength;
        public int? ValidationMaxLength
        {
            get { return _ValidationMaxLength; }
            set
            {
                if(_ValidationMaxLength!=value){
                    _ValidationMaxLength=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ValidationMaxLength");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ValidationFileAllowedExtensions;
        public string ValidationFileAllowedExtensions
        {
            get { return _ValidationFileAllowedExtensions; }
            set
            {
                if(_ValidationFileAllowedExtensions!=value){
                    _ValidationFileAllowedExtensions=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ValidationFileAllowedExtensions");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ValidationFileMaximumSize;
        public int? ValidationFileMaximumSize
        {
            get { return _ValidationFileMaximumSize; }
            set
            {
                if(_ValidationFileMaximumSize!=value){
                    _ValidationFileMaximumSize=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ValidationFileMaximumSize");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DefaultValue;
        public string DefaultValue
        {
            get { return _DefaultValue; }
            set
            {
                if(_DefaultValue!=value){
                    _DefaultValue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DefaultValue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ConditionAttributeXml;
        public string ConditionAttributeXml
        {
            get { return _ConditionAttributeXml; }
            set
            {
                if(_ConditionAttributeXml!=value){
                    _ConditionAttributeXml=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConditionAttributeXml");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<CheckoutAttribute, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Log table in the AliexpressDB Database.
    /// </summary>
    public partial class Log: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Log> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Log>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Log> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Log item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Log item=new Log();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Log> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Log(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Log.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Log>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Log(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Log(Expression<Func<Log, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Log> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Log> _repo;
            
            if(db.TestMode){
                Log.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Log>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Log> GetRepo(){
            return GetRepo("","");
        }
        
        public static Log SingleOrDefault(Expression<Func<Log, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Log single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Log SingleOrDefault(Expression<Func<Log, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Log single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Log, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Log, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Log> Find(Expression<Func<Log, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Log> Find(Expression<Func<Log, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Log> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Log> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Log> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Log> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Log> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Log> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ShortMessage.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Log)){
                Log compare=(Log)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.ShortMessage.ToString();
                    }

        public string DescriptorColumn() {
            return "ShortMessage";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "ShortMessage";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Customer> Customers
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _LogLevelId;
        public int LogLevelId
        {
            get { return _LogLevelId; }
            set
            {
                if(_LogLevelId!=value){
                    _LogLevelId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LogLevelId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ShortMessage;
        public string ShortMessage
        {
            get { return _ShortMessage; }
            set
            {
                if(_ShortMessage!=value){
                    _ShortMessage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ShortMessage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FullMessage;
        public string FullMessage
        {
            get { return _FullMessage; }
            set
            {
                if(_FullMessage!=value){
                    _FullMessage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FullMessage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _IpAddress;
        public string IpAddress
        {
            get { return _IpAddress; }
            set
            {
                if(_IpAddress!=value){
                    _IpAddress=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IpAddress");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _CustomerId;
        public int? CustomerId
        {
            get { return _CustomerId; }
            set
            {
                if(_CustomerId!=value){
                    _CustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PageUrl;
        public string PageUrl
        {
            get { return _PageUrl; }
            set
            {
                if(_PageUrl!=value){
                    _PageUrl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PageUrl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ReferrerUrl;
        public string ReferrerUrl
        {
            get { return _ReferrerUrl; }
            set
            {
                if(_ReferrerUrl!=value){
                    _ReferrerUrl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReferrerUrl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Log, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ProductTemplate table in the AliexpressDB Database.
    /// </summary>
    public partial class ProductTemplate: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ProductTemplate> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ProductTemplate>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ProductTemplate> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ProductTemplate item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ProductTemplate item=new ProductTemplate();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ProductTemplate> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ProductTemplate(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ProductTemplate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ProductTemplate>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ProductTemplate(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ProductTemplate(Expression<Func<ProductTemplate, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ProductTemplate> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ProductTemplate> _repo;
            
            if(db.TestMode){
                ProductTemplate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ProductTemplate>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ProductTemplate> GetRepo(){
            return GetRepo("","");
        }
        
        public static ProductTemplate SingleOrDefault(Expression<Func<ProductTemplate, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ProductTemplate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ProductTemplate SingleOrDefault(Expression<Func<ProductTemplate, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ProductTemplate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ProductTemplate, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ProductTemplate, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ProductTemplate> Find(Expression<Func<ProductTemplate, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ProductTemplate> Find(Expression<Func<ProductTemplate, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ProductTemplate> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ProductTemplate> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ProductTemplate> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ProductTemplate> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ProductTemplate> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ProductTemplate> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ProductTemplate)){
                ProductTemplate compare=(ProductTemplate)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ViewPath;
        public string ViewPath
        {
            get { return _ViewPath; }
            set
            {
                if(_ViewPath!=value){
                    _ViewPath=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ViewPath");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _IgnoredProductTypes;
        public string IgnoredProductTypes
        {
            get { return _IgnoredProductTypes; }
            set
            {
                if(_IgnoredProductTypes!=value){
                    _IgnoredProductTypes=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IgnoredProductTypes");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ProductTemplate, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the CheckoutAttributeValue table in the AliexpressDB Database.
    /// </summary>
    public partial class CheckoutAttributeValue: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<CheckoutAttributeValue> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<CheckoutAttributeValue>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<CheckoutAttributeValue> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(CheckoutAttributeValue item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                CheckoutAttributeValue item=new CheckoutAttributeValue();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<CheckoutAttributeValue> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public CheckoutAttributeValue(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                CheckoutAttributeValue.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<CheckoutAttributeValue>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public CheckoutAttributeValue(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public CheckoutAttributeValue(Expression<Func<CheckoutAttributeValue, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<CheckoutAttributeValue> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<CheckoutAttributeValue> _repo;
            
            if(db.TestMode){
                CheckoutAttributeValue.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<CheckoutAttributeValue>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<CheckoutAttributeValue> GetRepo(){
            return GetRepo("","");
        }
        
        public static CheckoutAttributeValue SingleOrDefault(Expression<Func<CheckoutAttributeValue, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            CheckoutAttributeValue single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static CheckoutAttributeValue SingleOrDefault(Expression<Func<CheckoutAttributeValue, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            CheckoutAttributeValue single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<CheckoutAttributeValue, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<CheckoutAttributeValue, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<CheckoutAttributeValue> Find(Expression<Func<CheckoutAttributeValue, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<CheckoutAttributeValue> Find(Expression<Func<CheckoutAttributeValue, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<CheckoutAttributeValue> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<CheckoutAttributeValue> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<CheckoutAttributeValue> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<CheckoutAttributeValue> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<CheckoutAttributeValue> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<CheckoutAttributeValue> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(CheckoutAttributeValue)){
                CheckoutAttributeValue compare=(CheckoutAttributeValue)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<CheckoutAttribute> CheckoutAttributes
        {
            get
            {
                
                  var repo=AliexpressDBA.CheckoutAttribute.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CheckoutAttributeId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CheckoutAttributeId;
        public int CheckoutAttributeId
        {
            get { return _CheckoutAttributeId; }
            set
            {
                if(_CheckoutAttributeId!=value){
                    _CheckoutAttributeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CheckoutAttributeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ColorSquaresRgb;
        public string ColorSquaresRgb
        {
            get { return _ColorSquaresRgb; }
            set
            {
                if(_ColorSquaresRgb!=value){
                    _ColorSquaresRgb=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ColorSquaresRgb");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _PriceAdjustment;
        public decimal PriceAdjustment
        {
            get { return _PriceAdjustment; }
            set
            {
                if(_PriceAdjustment!=value){
                    _PriceAdjustment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PriceAdjustment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _WeightAdjustment;
        public decimal WeightAdjustment
        {
            get { return _WeightAdjustment; }
            set
            {
                if(_WeightAdjustment!=value){
                    _WeightAdjustment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WeightAdjustment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsPreSelected;
        public bool IsPreSelected
        {
            get { return _IsPreSelected; }
            set
            {
                if(_IsPreSelected!=value){
                    _IsPreSelected=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsPreSelected");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<CheckoutAttributeValue, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Manufacturer table in the AliexpressDB Database.
    /// </summary>
    public partial class Manufacturer: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Manufacturer> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Manufacturer>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Manufacturer> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Manufacturer item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Manufacturer item=new Manufacturer();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Manufacturer> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Manufacturer(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Manufacturer.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Manufacturer>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Manufacturer(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Manufacturer(Expression<Func<Manufacturer, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Manufacturer> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Manufacturer> _repo;
            
            if(db.TestMode){
                Manufacturer.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Manufacturer>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Manufacturer> GetRepo(){
            return GetRepo("","");
        }
        
        public static Manufacturer SingleOrDefault(Expression<Func<Manufacturer, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Manufacturer single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Manufacturer SingleOrDefault(Expression<Func<Manufacturer, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Manufacturer single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Manufacturer, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Manufacturer, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Manufacturer> Find(Expression<Func<Manufacturer, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Manufacturer> Find(Expression<Func<Manufacturer, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Manufacturer> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Manufacturer> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Manufacturer> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Manufacturer> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Manufacturer> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Manufacturer> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Manufacturer)){
                Manufacturer compare=(Manufacturer)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Discount_AppliedToManufacturer> Discount_AppliedToManufacturers
        {
            get
            {
                
                  var repo=AliexpressDBA.Discount_AppliedToManufacturer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Manufacturer_Id == _Id
                       select items;
            }
        }

        public IQueryable<Product_Manufacturer_Mapping> Product_Manufacturer_Mappings
        {
            get
            {
                
                  var repo=AliexpressDBA.Product_Manufacturer_Mapping.GetRepo();
                  return from items in repo.GetAll()
                       where items.ManufacturerId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Description;
        public string Description
        {
            get { return _Description; }
            set
            {
                if(_Description!=value){
                    _Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ManufacturerTemplateId;
        public int ManufacturerTemplateId
        {
            get { return _ManufacturerTemplateId; }
            set
            {
                if(_ManufacturerTemplateId!=value){
                    _ManufacturerTemplateId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ManufacturerTemplateId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaKeywords;
        public string MetaKeywords
        {
            get { return _MetaKeywords; }
            set
            {
                if(_MetaKeywords!=value){
                    _MetaKeywords=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaKeywords");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaDescription;
        public string MetaDescription
        {
            get { return _MetaDescription; }
            set
            {
                if(_MetaDescription!=value){
                    _MetaDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaTitle;
        public string MetaTitle
        {
            get { return _MetaTitle; }
            set
            {
                if(_MetaTitle!=value){
                    _MetaTitle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaTitle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PictureId;
        public int PictureId
        {
            get { return _PictureId; }
            set
            {
                if(_PictureId!=value){
                    _PictureId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PictureId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PageSize;
        public int PageSize
        {
            get { return _PageSize; }
            set
            {
                if(_PageSize!=value){
                    _PageSize=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PageSize");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _AllowCustomersToSelectPageSize;
        public bool AllowCustomersToSelectPageSize
        {
            get { return _AllowCustomersToSelectPageSize; }
            set
            {
                if(_AllowCustomersToSelectPageSize!=value){
                    _AllowCustomersToSelectPageSize=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AllowCustomersToSelectPageSize");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PageSizeOptions;
        public string PageSizeOptions
        {
            get { return _PageSizeOptions; }
            set
            {
                if(_PageSizeOptions!=value){
                    _PageSizeOptions=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PageSizeOptions");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PriceRanges;
        public string PriceRanges
        {
            get { return _PriceRanges; }
            set
            {
                if(_PriceRanges!=value){
                    _PriceRanges=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PriceRanges");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _SubjectToAcl;
        public bool SubjectToAcl
        {
            get { return _SubjectToAcl; }
            set
            {
                if(_SubjectToAcl!=value){
                    _SubjectToAcl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubjectToAcl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _LimitedToStores;
        public bool LimitedToStores
        {
            get { return _LimitedToStores; }
            set
            {
                if(_LimitedToStores!=value){
                    _LimitedToStores=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LimitedToStores");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Published;
        public bool Published
        {
            get { return _Published; }
            set
            {
                if(_Published!=value){
                    _Published=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Published");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Deleted;
        public bool Deleted
        {
            get { return _Deleted; }
            set
            {
                if(_Deleted!=value){
                    _Deleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Deleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _UpdatedOnUtc;
        public DateTime UpdatedOnUtc
        {
            get { return _UpdatedOnUtc; }
            set
            {
                if(_UpdatedOnUtc!=value){
                    _UpdatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.Deleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Manufacturer, bool>> expression) {
            var repo = GetRepo();
            
            
            List<Manufacturer> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.Deleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<Manufacturer, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ProductWarehouseInventory table in the AliexpressDB Database.
    /// </summary>
    public partial class ProductWarehouseInventory: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ProductWarehouseInventory> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ProductWarehouseInventory>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ProductWarehouseInventory> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ProductWarehouseInventory item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ProductWarehouseInventory item=new ProductWarehouseInventory();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ProductWarehouseInventory> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ProductWarehouseInventory(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ProductWarehouseInventory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ProductWarehouseInventory>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ProductWarehouseInventory(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ProductWarehouseInventory(Expression<Func<ProductWarehouseInventory, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ProductWarehouseInventory> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ProductWarehouseInventory> _repo;
            
            if(db.TestMode){
                ProductWarehouseInventory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ProductWarehouseInventory>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ProductWarehouseInventory> GetRepo(){
            return GetRepo("","");
        }
        
        public static ProductWarehouseInventory SingleOrDefault(Expression<Func<ProductWarehouseInventory, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ProductWarehouseInventory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ProductWarehouseInventory SingleOrDefault(Expression<Func<ProductWarehouseInventory, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ProductWarehouseInventory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ProductWarehouseInventory, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ProductWarehouseInventory, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ProductWarehouseInventory> Find(Expression<Func<ProductWarehouseInventory, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ProductWarehouseInventory> Find(Expression<Func<ProductWarehouseInventory, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ProductWarehouseInventory> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ProductWarehouseInventory> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ProductWarehouseInventory> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ProductWarehouseInventory> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ProductWarehouseInventory> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ProductWarehouseInventory> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ProductId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ProductWarehouseInventory)){
                ProductWarehouseInventory compare=(ProductWarehouseInventory)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.ProductId.ToString();
                    }

        public string DescriptorColumn() {
            return "ProductId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "ProductId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Product> Products
        {
            get
            {
                
                  var repo=AliexpressDBA.Product.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ProductId
                       select items;
            }
        }

        public IQueryable<Warehouse> Warehouses
        {
            get
            {
                
                  var repo=AliexpressDBA.Warehouse.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _WarehouseId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductId;
        public int ProductId
        {
            get { return _ProductId; }
            set
            {
                if(_ProductId!=value){
                    _ProductId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _WarehouseId;
        public int WarehouseId
        {
            get { return _WarehouseId; }
            set
            {
                if(_WarehouseId!=value){
                    _WarehouseId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WarehouseId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StockQuantity;
        public int StockQuantity
        {
            get { return _StockQuantity; }
            set
            {
                if(_StockQuantity!=value){
                    _StockQuantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StockQuantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ReservedQuantity;
        public int ReservedQuantity
        {
            get { return _ReservedQuantity; }
            set
            {
                if(_ReservedQuantity!=value){
                    _ReservedQuantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReservedQuantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ProductWarehouseInventory, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Country table in the AliexpressDB Database.
    /// </summary>
    public partial class Country: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Country> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Country>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Country> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Country item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Country item=new Country();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Country> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Country(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Country.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Country>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Country(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Country(Expression<Func<Country, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Country> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Country> _repo;
            
            if(db.TestMode){
                Country.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Country>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Country> GetRepo(){
            return GetRepo("","");
        }
        
        public static Country SingleOrDefault(Expression<Func<Country, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Country single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Country SingleOrDefault(Expression<Func<Country, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Country single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Country, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Country, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Country> Find(Expression<Func<Country, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Country> Find(Expression<Func<Country, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Country> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Country> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Country> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Country> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Country> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Country> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Country)){
                Country compare=(Country)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Address> Addresses
        {
            get
            {
                
                  var repo=AliexpressDBA.Address.GetRepo();
                  return from items in repo.GetAll()
                       where items.CountryId == _Id
                       select items;
            }
        }

        public IQueryable<ShippingMethodRestriction> ShippingMethodRestrictions
        {
            get
            {
                
                  var repo=AliexpressDBA.ShippingMethodRestriction.GetRepo();
                  return from items in repo.GetAll()
                       where items.Country_Id == _Id
                       select items;
            }
        }

        public IQueryable<StateProvince> StateProvinces
        {
            get
            {
                
                  var repo=AliexpressDBA.StateProvince.GetRepo();
                  return from items in repo.GetAll()
                       where items.CountryId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _AllowsBilling;
        public bool AllowsBilling
        {
            get { return _AllowsBilling; }
            set
            {
                if(_AllowsBilling!=value){
                    _AllowsBilling=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AllowsBilling");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _AllowsShipping;
        public bool AllowsShipping
        {
            get { return _AllowsShipping; }
            set
            {
                if(_AllowsShipping!=value){
                    _AllowsShipping=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AllowsShipping");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TwoLetterIsoCode;
        public string TwoLetterIsoCode
        {
            get { return _TwoLetterIsoCode; }
            set
            {
                if(_TwoLetterIsoCode!=value){
                    _TwoLetterIsoCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TwoLetterIsoCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ThreeLetterIsoCode;
        public string ThreeLetterIsoCode
        {
            get { return _ThreeLetterIsoCode; }
            set
            {
                if(_ThreeLetterIsoCode!=value){
                    _ThreeLetterIsoCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ThreeLetterIsoCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _NumericIsoCode;
        public int NumericIsoCode
        {
            get { return _NumericIsoCode; }
            set
            {
                if(_NumericIsoCode!=value){
                    _NumericIsoCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NumericIsoCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _SubjectToVat;
        public bool SubjectToVat
        {
            get { return _SubjectToVat; }
            set
            {
                if(_SubjectToVat!=value){
                    _SubjectToVat=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubjectToVat");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Published;
        public bool Published
        {
            get { return _Published; }
            set
            {
                if(_Published!=value){
                    _Published=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Published");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _LimitedToStores;
        public bool LimitedToStores
        {
            get { return _LimitedToStores; }
            set
            {
                if(_LimitedToStores!=value){
                    _LimitedToStores=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LimitedToStores");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Country, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ManufacturerTemplate table in the AliexpressDB Database.
    /// </summary>
    public partial class ManufacturerTemplate: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ManufacturerTemplate> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ManufacturerTemplate>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ManufacturerTemplate> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ManufacturerTemplate item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ManufacturerTemplate item=new ManufacturerTemplate();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ManufacturerTemplate> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ManufacturerTemplate(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ManufacturerTemplate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ManufacturerTemplate>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ManufacturerTemplate(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ManufacturerTemplate(Expression<Func<ManufacturerTemplate, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ManufacturerTemplate> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ManufacturerTemplate> _repo;
            
            if(db.TestMode){
                ManufacturerTemplate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ManufacturerTemplate>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ManufacturerTemplate> GetRepo(){
            return GetRepo("","");
        }
        
        public static ManufacturerTemplate SingleOrDefault(Expression<Func<ManufacturerTemplate, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ManufacturerTemplate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ManufacturerTemplate SingleOrDefault(Expression<Func<ManufacturerTemplate, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ManufacturerTemplate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ManufacturerTemplate, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ManufacturerTemplate, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ManufacturerTemplate> Find(Expression<Func<ManufacturerTemplate, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ManufacturerTemplate> Find(Expression<Func<ManufacturerTemplate, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ManufacturerTemplate> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ManufacturerTemplate> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ManufacturerTemplate> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ManufacturerTemplate> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ManufacturerTemplate> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ManufacturerTemplate> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ManufacturerTemplate)){
                ManufacturerTemplate compare=(ManufacturerTemplate)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ViewPath;
        public string ViewPath
        {
            get { return _ViewPath; }
            set
            {
                if(_ViewPath!=value){
                    _ViewPath=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ViewPath");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ManufacturerTemplate, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the QueuedEmail table in the AliexpressDB Database.
    /// </summary>
    public partial class QueuedEmail: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<QueuedEmail> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<QueuedEmail>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<QueuedEmail> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(QueuedEmail item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                QueuedEmail item=new QueuedEmail();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<QueuedEmail> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public QueuedEmail(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                QueuedEmail.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<QueuedEmail>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public QueuedEmail(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public QueuedEmail(Expression<Func<QueuedEmail, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<QueuedEmail> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<QueuedEmail> _repo;
            
            if(db.TestMode){
                QueuedEmail.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<QueuedEmail>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<QueuedEmail> GetRepo(){
            return GetRepo("","");
        }
        
        public static QueuedEmail SingleOrDefault(Expression<Func<QueuedEmail, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            QueuedEmail single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static QueuedEmail SingleOrDefault(Expression<Func<QueuedEmail, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            QueuedEmail single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<QueuedEmail, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<QueuedEmail, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<QueuedEmail> Find(Expression<Func<QueuedEmail, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<QueuedEmail> Find(Expression<Func<QueuedEmail, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<QueuedEmail> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<QueuedEmail> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<QueuedEmail> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<QueuedEmail> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<QueuedEmail> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<QueuedEmail> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.From.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(QueuedEmail)){
                QueuedEmail compare=(QueuedEmail)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.From.ToString();
                    }

        public string DescriptorColumn() {
            return "From";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "From";
        }
        
        #region ' Foreign Keys '
        public IQueryable<EmailAccount> EmailAccounts
        {
            get
            {
                
                  var repo=AliexpressDBA.EmailAccount.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _EmailAccountId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PriorityId;
        public int PriorityId
        {
            get { return _PriorityId; }
            set
            {
                if(_PriorityId!=value){
                    _PriorityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PriorityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _From;
        public string From
        {
            get { return _From; }
            set
            {
                if(_From!=value){
                    _From=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="From");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FromName;
        public string FromName
        {
            get { return _FromName; }
            set
            {
                if(_FromName!=value){
                    _FromName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FromName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _To;
        public string To
        {
            get { return _To; }
            set
            {
                if(_To!=value){
                    _To=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="To");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ToName;
        public string ToName
        {
            get { return _ToName; }
            set
            {
                if(_ToName!=value){
                    _ToName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ToName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ReplyTo;
        public string ReplyTo
        {
            get { return _ReplyTo; }
            set
            {
                if(_ReplyTo!=value){
                    _ReplyTo=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReplyTo");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ReplyToName;
        public string ReplyToName
        {
            get { return _ReplyToName; }
            set
            {
                if(_ReplyToName!=value){
                    _ReplyToName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReplyToName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CC;
        public string CC
        {
            get { return _CC; }
            set
            {
                if(_CC!=value){
                    _CC=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CC");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Bcc;
        public string Bcc
        {
            get { return _Bcc; }
            set
            {
                if(_Bcc!=value){
                    _Bcc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Bcc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Subject;
        public string Subject
        {
            get { return _Subject; }
            set
            {
                if(_Subject!=value){
                    _Subject=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Subject");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Body;
        public string Body
        {
            get { return _Body; }
            set
            {
                if(_Body!=value){
                    _Body=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Body");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AttachmentFilePath;
        public string AttachmentFilePath
        {
            get { return _AttachmentFilePath; }
            set
            {
                if(_AttachmentFilePath!=value){
                    _AttachmentFilePath=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AttachmentFilePath");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AttachmentFileName;
        public string AttachmentFileName
        {
            get { return _AttachmentFileName; }
            set
            {
                if(_AttachmentFileName!=value){
                    _AttachmentFileName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AttachmentFileName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AttachedDownloadId;
        public int AttachedDownloadId
        {
            get { return _AttachedDownloadId; }
            set
            {
                if(_AttachedDownloadId!=value){
                    _AttachedDownloadId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AttachedDownloadId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _DontSendBeforeDateUtc;
        public DateTime? DontSendBeforeDateUtc
        {
            get { return _DontSendBeforeDateUtc; }
            set
            {
                if(_DontSendBeforeDateUtc!=value){
                    _DontSendBeforeDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DontSendBeforeDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SentTries;
        public int SentTries
        {
            get { return _SentTries; }
            set
            {
                if(_SentTries!=value){
                    _SentTries=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SentTries");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _SentOnUtc;
        public DateTime? SentOnUtc
        {
            get { return _SentOnUtc; }
            set
            {
                if(_SentOnUtc!=value){
                    _SentOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SentOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _EmailAccountId;
        public int EmailAccountId
        {
            get { return _EmailAccountId; }
            set
            {
                if(_EmailAccountId!=value){
                    _EmailAccountId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EmailAccountId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<QueuedEmail, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the CrossSellProduct table in the AliexpressDB Database.
    /// </summary>
    public partial class CrossSellProduct: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<CrossSellProduct> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<CrossSellProduct>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<CrossSellProduct> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(CrossSellProduct item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                CrossSellProduct item=new CrossSellProduct();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<CrossSellProduct> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public CrossSellProduct(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                CrossSellProduct.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<CrossSellProduct>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public CrossSellProduct(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public CrossSellProduct(Expression<Func<CrossSellProduct, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<CrossSellProduct> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<CrossSellProduct> _repo;
            
            if(db.TestMode){
                CrossSellProduct.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<CrossSellProduct>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<CrossSellProduct> GetRepo(){
            return GetRepo("","");
        }
        
        public static CrossSellProduct SingleOrDefault(Expression<Func<CrossSellProduct, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            CrossSellProduct single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static CrossSellProduct SingleOrDefault(Expression<Func<CrossSellProduct, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            CrossSellProduct single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<CrossSellProduct, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<CrossSellProduct, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<CrossSellProduct> Find(Expression<Func<CrossSellProduct, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<CrossSellProduct> Find(Expression<Func<CrossSellProduct, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<CrossSellProduct> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<CrossSellProduct> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<CrossSellProduct> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<CrossSellProduct> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<CrossSellProduct> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<CrossSellProduct> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ProductId1.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(CrossSellProduct)){
                CrossSellProduct compare=(CrossSellProduct)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.ProductId1.ToString();
                    }

        public string DescriptorColumn() {
            return "ProductId1";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "ProductId1";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductId1;
        public int ProductId1
        {
            get { return _ProductId1; }
            set
            {
                if(_ProductId1!=value){
                    _ProductId1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductId1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductId2;
        public int ProductId2
        {
            get { return _ProductId2; }
            set
            {
                if(_ProductId2!=value){
                    _ProductId2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductId2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<CrossSellProduct, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_AS_AnywhereSlider table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_AS_AnywhereSlider: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_AS_AnywhereSlider> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_AS_AnywhereSlider>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_AS_AnywhereSlider> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_AS_AnywhereSlider item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_AS_AnywhereSlider item=new SS_AS_AnywhereSlider();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_AS_AnywhereSlider> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_AS_AnywhereSlider(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_AS_AnywhereSlider.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_AS_AnywhereSlider>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_AS_AnywhereSlider(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_AS_AnywhereSlider(Expression<Func<SS_AS_AnywhereSlider, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_AS_AnywhereSlider> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_AS_AnywhereSlider> _repo;
            
            if(db.TestMode){
                SS_AS_AnywhereSlider.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_AS_AnywhereSlider>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_AS_AnywhereSlider> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_AS_AnywhereSlider SingleOrDefault(Expression<Func<SS_AS_AnywhereSlider, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_AS_AnywhereSlider single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_AS_AnywhereSlider SingleOrDefault(Expression<Func<SS_AS_AnywhereSlider, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_AS_AnywhereSlider single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_AS_AnywhereSlider, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_AS_AnywhereSlider, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_AS_AnywhereSlider> Find(Expression<Func<SS_AS_AnywhereSlider, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_AS_AnywhereSlider> Find(Expression<Func<SS_AS_AnywhereSlider, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_AS_AnywhereSlider> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_AS_AnywhereSlider> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_AS_AnywhereSlider> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_AS_AnywhereSlider> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_AS_AnywhereSlider> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_AS_AnywhereSlider> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.SystemName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_AS_AnywhereSlider)){
                SS_AS_AnywhereSlider compare=(SS_AS_AnywhereSlider)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.SystemName.ToString();
                    }

        public string DescriptorColumn() {
            return "SystemName";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "SystemName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SS_AS_SliderImage> SS_AS_SliderImages
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_AS_SliderImage.GetRepo();
                  return from items in repo.GetAll()
                       where items.SliderId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SystemName;
        public string SystemName
        {
            get { return _SystemName; }
            set
            {
                if(_SystemName!=value){
                    _SystemName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SystemName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SliderType;
        public int SliderType
        {
            get { return _SliderType; }
            set
            {
                if(_SliderType!=value){
                    _SliderType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SliderType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _LanguageId;
        public int LanguageId
        {
            get { return _LanguageId; }
            set
            {
                if(_LanguageId!=value){
                    _LanguageId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LanguageId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _LimitedToStores;
        public bool LimitedToStores
        {
            get { return _LimitedToStores; }
            set
            {
                if(_LimitedToStores!=value){
                    _LimitedToStores=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LimitedToStores");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_AS_AnywhereSlider, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MeasureDimension table in the AliexpressDB Database.
    /// </summary>
    public partial class MeasureDimension: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MeasureDimension> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MeasureDimension>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MeasureDimension> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MeasureDimension item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MeasureDimension item=new MeasureDimension();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MeasureDimension> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public MeasureDimension(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MeasureDimension.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeasureDimension>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MeasureDimension(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MeasureDimension(Expression<Func<MeasureDimension, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MeasureDimension> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<MeasureDimension> _repo;
            
            if(db.TestMode){
                MeasureDimension.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeasureDimension>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MeasureDimension> GetRepo(){
            return GetRepo("","");
        }
        
        public static MeasureDimension SingleOrDefault(Expression<Func<MeasureDimension, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MeasureDimension single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MeasureDimension SingleOrDefault(Expression<Func<MeasureDimension, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MeasureDimension single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MeasureDimension, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MeasureDimension, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MeasureDimension> Find(Expression<Func<MeasureDimension, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MeasureDimension> Find(Expression<Func<MeasureDimension, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MeasureDimension> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MeasureDimension> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MeasureDimension> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MeasureDimension> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MeasureDimension> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MeasureDimension> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MeasureDimension)){
                MeasureDimension compare=(MeasureDimension)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SystemKeyword;
        public string SystemKeyword
        {
            get { return _SystemKeyword; }
            set
            {
                if(_SystemKeyword!=value){
                    _SystemKeyword=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SystemKeyword");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _Ratio;
        public decimal Ratio
        {
            get { return _Ratio; }
            set
            {
                if(_Ratio!=value){
                    _Ratio=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Ratio");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MeasureDimension, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the RecurringPayment table in the AliexpressDB Database.
    /// </summary>
    public partial class RecurringPayment: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<RecurringPayment> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<RecurringPayment>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<RecurringPayment> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(RecurringPayment item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                RecurringPayment item=new RecurringPayment();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<RecurringPayment> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public RecurringPayment(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                RecurringPayment.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<RecurringPayment>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public RecurringPayment(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public RecurringPayment(Expression<Func<RecurringPayment, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<RecurringPayment> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<RecurringPayment> _repo;
            
            if(db.TestMode){
                RecurringPayment.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<RecurringPayment>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<RecurringPayment> GetRepo(){
            return GetRepo("","");
        }
        
        public static RecurringPayment SingleOrDefault(Expression<Func<RecurringPayment, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            RecurringPayment single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static RecurringPayment SingleOrDefault(Expression<Func<RecurringPayment, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            RecurringPayment single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<RecurringPayment, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<RecurringPayment, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<RecurringPayment> Find(Expression<Func<RecurringPayment, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<RecurringPayment> Find(Expression<Func<RecurringPayment, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<RecurringPayment> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<RecurringPayment> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<RecurringPayment> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<RecurringPayment> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<RecurringPayment> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<RecurringPayment> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.CycleLength.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(RecurringPayment)){
                RecurringPayment compare=(RecurringPayment)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.CycleLength.ToString();
                    }

        public string DescriptorColumn() {
            return "CycleLength";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "CycleLength";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Order> Orders
        {
            get
            {
                
                  var repo=AliexpressDBA.Order.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _InitialOrderId
                       select items;
            }
        }

        public IQueryable<RecurringPaymentHistory> RecurringPaymentHistories
        {
            get
            {
                
                  var repo=AliexpressDBA.RecurringPaymentHistory.GetRepo();
                  return from items in repo.GetAll()
                       where items.RecurringPaymentId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CycleLength;
        public int CycleLength
        {
            get { return _CycleLength; }
            set
            {
                if(_CycleLength!=value){
                    _CycleLength=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CycleLength");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CyclePeriodId;
        public int CyclePeriodId
        {
            get { return _CyclePeriodId; }
            set
            {
                if(_CyclePeriodId!=value){
                    _CyclePeriodId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CyclePeriodId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TotalCycles;
        public int TotalCycles
        {
            get { return _TotalCycles; }
            set
            {
                if(_TotalCycles!=value){
                    _TotalCycles=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalCycles");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _StartDateUtc;
        public DateTime StartDateUtc
        {
            get { return _StartDateUtc; }
            set
            {
                if(_StartDateUtc!=value){
                    _StartDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StartDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsActive;
        public bool IsActive
        {
            get { return _IsActive; }
            set
            {
                if(_IsActive!=value){
                    _IsActive=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsActive");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _LastPaymentFailed;
        public bool LastPaymentFailed
        {
            get { return _LastPaymentFailed; }
            set
            {
                if(_LastPaymentFailed!=value){
                    _LastPaymentFailed=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastPaymentFailed");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Deleted;
        public bool Deleted
        {
            get { return _Deleted; }
            set
            {
                if(_Deleted!=value){
                    _Deleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Deleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _InitialOrderId;
        public int InitialOrderId
        {
            get { return _InitialOrderId; }
            set
            {
                if(_InitialOrderId!=value){
                    _InitialOrderId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InitialOrderId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.Deleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<RecurringPayment, bool>> expression) {
            var repo = GetRepo();
            
            
            List<RecurringPayment> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.Deleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<RecurringPayment, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Currency table in the AliexpressDB Database.
    /// </summary>
    public partial class Currency: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Currency> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Currency>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Currency> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Currency item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Currency item=new Currency();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Currency> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Currency(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Currency.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Currency>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Currency(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Currency(Expression<Func<Currency, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Currency> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Currency> _repo;
            
            if(db.TestMode){
                Currency.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Currency>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Currency> GetRepo(){
            return GetRepo("","");
        }
        
        public static Currency SingleOrDefault(Expression<Func<Currency, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Currency single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Currency SingleOrDefault(Expression<Func<Currency, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Currency single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Currency, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Currency, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Currency> Find(Expression<Func<Currency, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Currency> Find(Expression<Func<Currency, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Currency> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Currency> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Currency> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Currency> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Currency> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Currency> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Currency)){
                Currency compare=(Currency)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CurrencyCode;
        public string CurrencyCode
        {
            get { return _CurrencyCode; }
            set
            {
                if(_CurrencyCode!=value){
                    _CurrencyCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CurrencyCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _Rate;
        public decimal Rate
        {
            get { return _Rate; }
            set
            {
                if(_Rate!=value){
                    _Rate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Rate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DisplayLocale;
        public string DisplayLocale
        {
            get { return _DisplayLocale; }
            set
            {
                if(_DisplayLocale!=value){
                    _DisplayLocale=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayLocale");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CustomFormatting;
        public string CustomFormatting
        {
            get { return _CustomFormatting; }
            set
            {
                if(_CustomFormatting!=value){
                    _CustomFormatting=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomFormatting");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _LimitedToStores;
        public bool LimitedToStores
        {
            get { return _LimitedToStores; }
            set
            {
                if(_LimitedToStores!=value){
                    _LimitedToStores=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LimitedToStores");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Published;
        public bool Published
        {
            get { return _Published; }
            set
            {
                if(_Published!=value){
                    _Published=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Published");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _UpdatedOnUtc;
        public DateTime UpdatedOnUtc
        {
            get { return _UpdatedOnUtc; }
            set
            {
                if(_UpdatedOnUtc!=value){
                    _UpdatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _RoundingTypeId;
        public int RoundingTypeId
        {
            get { return _RoundingTypeId; }
            set
            {
                if(_RoundingTypeId!=value){
                    _RoundingTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RoundingTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Currency, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_AS_SliderImage table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_AS_SliderImage: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_AS_SliderImage> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_AS_SliderImage>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_AS_SliderImage> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_AS_SliderImage item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_AS_SliderImage item=new SS_AS_SliderImage();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_AS_SliderImage> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_AS_SliderImage(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_AS_SliderImage.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_AS_SliderImage>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_AS_SliderImage(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_AS_SliderImage(Expression<Func<SS_AS_SliderImage, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_AS_SliderImage> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_AS_SliderImage> _repo;
            
            if(db.TestMode){
                SS_AS_SliderImage.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_AS_SliderImage>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_AS_SliderImage> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_AS_SliderImage SingleOrDefault(Expression<Func<SS_AS_SliderImage, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_AS_SliderImage single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_AS_SliderImage SingleOrDefault(Expression<Func<SS_AS_SliderImage, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_AS_SliderImage single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_AS_SliderImage, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_AS_SliderImage, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_AS_SliderImage> Find(Expression<Func<SS_AS_SliderImage, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_AS_SliderImage> Find(Expression<Func<SS_AS_SliderImage, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_AS_SliderImage> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_AS_SliderImage> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_AS_SliderImage> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_AS_SliderImage> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_AS_SliderImage> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_AS_SliderImage> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.DisplayText.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_AS_SliderImage)){
                SS_AS_SliderImage compare=(SS_AS_SliderImage)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.DisplayText.ToString();
                    }

        public string DescriptorColumn() {
            return "DisplayText";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "DisplayText";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SS_AS_AnywhereSlider> SS_AS_AnywhereSliders
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_AS_AnywhereSlider.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _SliderId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DisplayText;
        public string DisplayText
        {
            get { return _DisplayText; }
            set
            {
                if(_DisplayText!=value){
                    _DisplayText=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayText");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Url;
        public string Url
        {
            get { return _Url; }
            set
            {
                if(_Url!=value){
                    _Url=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Url");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Alt;
        public string Alt
        {
            get { return _Alt; }
            set
            {
                if(_Alt!=value){
                    _Alt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Alt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Visible;
        public bool Visible
        {
            get { return _Visible; }
            set
            {
                if(_Visible!=value){
                    _Visible=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Visible");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PictureId;
        public int PictureId
        {
            get { return _PictureId; }
            set
            {
                if(_PictureId!=value){
                    _PictureId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PictureId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SliderId;
        public int SliderId
        {
            get { return _SliderId; }
            set
            {
                if(_SliderId!=value){
                    _SliderId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SliderId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_AS_SliderImage, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MeasureWeight table in the AliexpressDB Database.
    /// </summary>
    public partial class MeasureWeight: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MeasureWeight> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MeasureWeight>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MeasureWeight> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MeasureWeight item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MeasureWeight item=new MeasureWeight();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MeasureWeight> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public MeasureWeight(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MeasureWeight.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeasureWeight>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MeasureWeight(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MeasureWeight(Expression<Func<MeasureWeight, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MeasureWeight> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<MeasureWeight> _repo;
            
            if(db.TestMode){
                MeasureWeight.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MeasureWeight>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MeasureWeight> GetRepo(){
            return GetRepo("","");
        }
        
        public static MeasureWeight SingleOrDefault(Expression<Func<MeasureWeight, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MeasureWeight single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MeasureWeight SingleOrDefault(Expression<Func<MeasureWeight, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MeasureWeight single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MeasureWeight, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MeasureWeight, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MeasureWeight> Find(Expression<Func<MeasureWeight, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MeasureWeight> Find(Expression<Func<MeasureWeight, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MeasureWeight> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MeasureWeight> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MeasureWeight> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MeasureWeight> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MeasureWeight> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MeasureWeight> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MeasureWeight)){
                MeasureWeight compare=(MeasureWeight)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SystemKeyword;
        public string SystemKeyword
        {
            get { return _SystemKeyword; }
            set
            {
                if(_SystemKeyword!=value){
                    _SystemKeyword=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SystemKeyword");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _Ratio;
        public decimal Ratio
        {
            get { return _Ratio; }
            set
            {
                if(_Ratio!=value){
                    _Ratio=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Ratio");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MeasureWeight, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the RecurringPaymentHistory table in the AliexpressDB Database.
    /// </summary>
    public partial class RecurringPaymentHistory: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<RecurringPaymentHistory> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<RecurringPaymentHistory>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<RecurringPaymentHistory> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(RecurringPaymentHistory item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                RecurringPaymentHistory item=new RecurringPaymentHistory();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<RecurringPaymentHistory> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public RecurringPaymentHistory(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                RecurringPaymentHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<RecurringPaymentHistory>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public RecurringPaymentHistory(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public RecurringPaymentHistory(Expression<Func<RecurringPaymentHistory, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<RecurringPaymentHistory> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<RecurringPaymentHistory> _repo;
            
            if(db.TestMode){
                RecurringPaymentHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<RecurringPaymentHistory>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<RecurringPaymentHistory> GetRepo(){
            return GetRepo("","");
        }
        
        public static RecurringPaymentHistory SingleOrDefault(Expression<Func<RecurringPaymentHistory, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            RecurringPaymentHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static RecurringPaymentHistory SingleOrDefault(Expression<Func<RecurringPaymentHistory, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            RecurringPaymentHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<RecurringPaymentHistory, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<RecurringPaymentHistory, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<RecurringPaymentHistory> Find(Expression<Func<RecurringPaymentHistory, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<RecurringPaymentHistory> Find(Expression<Func<RecurringPaymentHistory, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<RecurringPaymentHistory> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<RecurringPaymentHistory> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<RecurringPaymentHistory> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<RecurringPaymentHistory> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<RecurringPaymentHistory> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<RecurringPaymentHistory> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.RecurringPaymentId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(RecurringPaymentHistory)){
                RecurringPaymentHistory compare=(RecurringPaymentHistory)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.RecurringPaymentId.ToString();
                    }

        public string DescriptorColumn() {
            return "RecurringPaymentId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "RecurringPaymentId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<RecurringPayment> RecurringPayments
        {
            get
            {
                
                  var repo=AliexpressDBA.RecurringPayment.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _RecurringPaymentId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _RecurringPaymentId;
        public int RecurringPaymentId
        {
            get { return _RecurringPaymentId; }
            set
            {
                if(_RecurringPaymentId!=value){
                    _RecurringPaymentId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RecurringPaymentId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderId;
        public int OrderId
        {
            get { return _OrderId; }
            set
            {
                if(_OrderId!=value){
                    _OrderId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<RecurringPaymentHistory, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Customer table in the AliexpressDB Database.
    /// </summary>
    public partial class Customer: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Customer> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Customer>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Customer> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Customer item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Customer item=new Customer();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Customer> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Customer(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Customer.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Customer>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Customer(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Customer(Expression<Func<Customer, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Customer> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Customer> _repo;
            
            if(db.TestMode){
                Customer.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Customer>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Customer> GetRepo(){
            return GetRepo("","");
        }
        
        public static Customer SingleOrDefault(Expression<Func<Customer, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Customer single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Customer SingleOrDefault(Expression<Func<Customer, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Customer single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Customer, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Customer, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Customer> Find(Expression<Func<Customer, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Customer> Find(Expression<Func<Customer, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Customer> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Customer> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Customer> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Customer> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Customer> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Customer> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Username.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Customer)){
                Customer compare=(Customer)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Username.ToString();
                    }

        public string DescriptorColumn() {
            return "Username";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Username";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Address> Addresses
        {
            get
            {
                
                  var repo=AliexpressDBA.Address.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _BillingAddress_Id
                       select items;
            }
        }

        public IQueryable<Address> Addresses1
        {
            get
            {
                
                  var repo=AliexpressDBA.Address.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ShippingAddress_Id
                       select items;
            }
        }

        public IQueryable<ActivityLog> ActivityLogs
        {
            get
            {
                
                  var repo=AliexpressDBA.ActivityLog.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerId == _Id
                       select items;
            }
        }

        public IQueryable<BackInStockSubscription> BackInStockSubscriptions
        {
            get
            {
                
                  var repo=AliexpressDBA.BackInStockSubscription.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerId == _Id
                       select items;
            }
        }

        public IQueryable<BlogComment> BlogComments
        {
            get
            {
                
                  var repo=AliexpressDBA.BlogComment.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerId == _Id
                       select items;
            }
        }

        public IQueryable<CustomerAddress> CustomerAddresses
        {
            get
            {
                
                  var repo=AliexpressDBA.CustomerAddress.GetRepo();
                  return from items in repo.GetAll()
                       where items.Customer_Id == _Id
                       select items;
            }
        }

        public IQueryable<Customer_CustomerRole_Mapping> Customer_CustomerRole_Mappings
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer_CustomerRole_Mapping.GetRepo();
                  return from items in repo.GetAll()
                       where items.Customer_Id == _Id
                       select items;
            }
        }

        public IQueryable<CustomerPassword> CustomerPasswords
        {
            get
            {
                
                  var repo=AliexpressDBA.CustomerPassword.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerId == _Id
                       select items;
            }
        }

        public IQueryable<ReturnRequest> ReturnRequests
        {
            get
            {
                
                  var repo=AliexpressDBA.ReturnRequest.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerId == _Id
                       select items;
            }
        }

        public IQueryable<RewardPointsHistory> RewardPointsHistories
        {
            get
            {
                
                  var repo=AliexpressDBA.RewardPointsHistory.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerId == _Id
                       select items;
            }
        }

        public IQueryable<ShoppingCartItem> ShoppingCartItems
        {
            get
            {
                
                  var repo=AliexpressDBA.ShoppingCartItem.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerId == _Id
                       select items;
            }
        }

        public IQueryable<Order> Orders
        {
            get
            {
                
                  var repo=AliexpressDBA.Order.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerId == _Id
                       select items;
            }
        }

        public IQueryable<PollVotingRecord> PollVotingRecords
        {
            get
            {
                
                  var repo=AliexpressDBA.PollVotingRecord.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerId == _Id
                       select items;
            }
        }

        public IQueryable<Forums_PrivateMessage> Forums_PrivateMessages
        {
            get
            {
                
                  var repo=AliexpressDBA.Forums_PrivateMessage.GetRepo();
                  return from items in repo.GetAll()
                       where items.FromCustomerId == _Id
                       select items;
            }
        }

        public IQueryable<Forums_PrivateMessage> Forums_PrivateMessages14
        {
            get
            {
                
                  var repo=AliexpressDBA.Forums_PrivateMessage.GetRepo();
                  return from items in repo.GetAll()
                       where items.ToCustomerId == _Id
                       select items;
            }
        }

        public IQueryable<ProductReview> ProductReviews
        {
            get
            {
                
                  var repo=AliexpressDBA.ProductReview.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerId == _Id
                       select items;
            }
        }

        public IQueryable<ExternalAuthenticationRecord> ExternalAuthenticationRecords
        {
            get
            {
                
                  var repo=AliexpressDBA.ExternalAuthenticationRecord.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerId == _Id
                       select items;
            }
        }

        public IQueryable<Forums_Post> Forums_Posts
        {
            get
            {
                
                  var repo=AliexpressDBA.Forums_Post.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerId == _Id
                       select items;
            }
        }

        public IQueryable<Forums_Subscription> Forums_Subscriptions
        {
            get
            {
                
                  var repo=AliexpressDBA.Forums_Subscription.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerId == _Id
                       select items;
            }
        }

        public IQueryable<Forums_Topic> Forums_Topics
        {
            get
            {
                
                  var repo=AliexpressDBA.Forums_Topic.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerId == _Id
                       select items;
            }
        }

        public IQueryable<Log> Logs
        {
            get
            {
                
                  var repo=AliexpressDBA.Log.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerId == _Id
                       select items;
            }
        }

        public IQueryable<NewsComment> NewsComments
        {
            get
            {
                
                  var repo=AliexpressDBA.NewsComment.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid _CustomerGuid;
        public Guid CustomerGuid
        {
            get { return _CustomerGuid; }
            set
            {
                if(_CustomerGuid!=value){
                    _CustomerGuid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerGuid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Username;
        public string Username
        {
            get { return _Username; }
            set
            {
                if(_Username!=value){
                    _Username=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Username");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Email;
        public string Email
        {
            get { return _Email; }
            set
            {
                if(_Email!=value){
                    _Email=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Email");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EmailToRevalidate;
        public string EmailToRevalidate
        {
            get { return _EmailToRevalidate; }
            set
            {
                if(_EmailToRevalidate!=value){
                    _EmailToRevalidate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EmailToRevalidate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AdminComment;
        public string AdminComment
        {
            get { return _AdminComment; }
            set
            {
                if(_AdminComment!=value){
                    _AdminComment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdminComment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsTaxExempt;
        public bool IsTaxExempt
        {
            get { return _IsTaxExempt; }
            set
            {
                if(_IsTaxExempt!=value){
                    _IsTaxExempt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsTaxExempt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AffiliateId;
        public int AffiliateId
        {
            get { return _AffiliateId; }
            set
            {
                if(_AffiliateId!=value){
                    _AffiliateId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AffiliateId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _VendorId;
        public int VendorId
        {
            get { return _VendorId; }
            set
            {
                if(_VendorId!=value){
                    _VendorId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VendorId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _HasShoppingCartItems;
        public bool HasShoppingCartItems
        {
            get { return _HasShoppingCartItems; }
            set
            {
                if(_HasShoppingCartItems!=value){
                    _HasShoppingCartItems=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HasShoppingCartItems");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _RequireReLogin;
        public bool RequireReLogin
        {
            get { return _RequireReLogin; }
            set
            {
                if(_RequireReLogin!=value){
                    _RequireReLogin=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RequireReLogin");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _FailedLoginAttempts;
        public int FailedLoginAttempts
        {
            get { return _FailedLoginAttempts; }
            set
            {
                if(_FailedLoginAttempts!=value){
                    _FailedLoginAttempts=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FailedLoginAttempts");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _CannotLoginUntilDateUtc;
        public DateTime? CannotLoginUntilDateUtc
        {
            get { return _CannotLoginUntilDateUtc; }
            set
            {
                if(_CannotLoginUntilDateUtc!=value){
                    _CannotLoginUntilDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CannotLoginUntilDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Active;
        public bool Active
        {
            get { return _Active; }
            set
            {
                if(_Active!=value){
                    _Active=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Active");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Deleted;
        public bool Deleted
        {
            get { return _Deleted; }
            set
            {
                if(_Deleted!=value){
                    _Deleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Deleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsSystemAccount;
        public bool IsSystemAccount
        {
            get { return _IsSystemAccount; }
            set
            {
                if(_IsSystemAccount!=value){
                    _IsSystemAccount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsSystemAccount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SystemName;
        public string SystemName
        {
            get { return _SystemName; }
            set
            {
                if(_SystemName!=value){
                    _SystemName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SystemName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LastIpAddress;
        public string LastIpAddress
        {
            get { return _LastIpAddress; }
            set
            {
                if(_LastIpAddress!=value){
                    _LastIpAddress=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastIpAddress");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _LastLoginDateUtc;
        public DateTime? LastLoginDateUtc
        {
            get { return _LastLoginDateUtc; }
            set
            {
                if(_LastLoginDateUtc!=value){
                    _LastLoginDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastLoginDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _LastActivityDateUtc;
        public DateTime LastActivityDateUtc
        {
            get { return _LastActivityDateUtc; }
            set
            {
                if(_LastActivityDateUtc!=value){
                    _LastActivityDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastActivityDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _RegisteredInStoreId;
        public int RegisteredInStoreId
        {
            get { return _RegisteredInStoreId; }
            set
            {
                if(_RegisteredInStoreId!=value){
                    _RegisteredInStoreId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RegisteredInStoreId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _BillingAddress_Id;
        public int? BillingAddress_Id
        {
            get { return _BillingAddress_Id; }
            set
            {
                if(_BillingAddress_Id!=value){
                    _BillingAddress_Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BillingAddress_Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ShippingAddress_Id;
        public int? ShippingAddress_Id
        {
            get { return _ShippingAddress_Id; }
            set
            {
                if(_ShippingAddress_Id!=value){
                    _ShippingAddress_Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ShippingAddress_Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.Deleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Customer, bool>> expression) {
            var repo = GetRepo();
            
            
            List<Customer> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.Deleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<Customer, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_C_Condition table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_C_Condition: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_C_Condition> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_C_Condition>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_C_Condition> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_C_Condition item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_C_Condition item=new SS_C_Condition();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_C_Condition> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_C_Condition(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_C_Condition.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_C_Condition>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_C_Condition(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_C_Condition(Expression<Func<SS_C_Condition, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_C_Condition> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_C_Condition> _repo;
            
            if(db.TestMode){
                SS_C_Condition.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_C_Condition>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_C_Condition> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_C_Condition SingleOrDefault(Expression<Func<SS_C_Condition, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_C_Condition single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_C_Condition SingleOrDefault(Expression<Func<SS_C_Condition, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_C_Condition single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_C_Condition, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_C_Condition, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_C_Condition> Find(Expression<Func<SS_C_Condition, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_C_Condition> Find(Expression<Func<SS_C_Condition, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_C_Condition> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_C_Condition> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_C_Condition> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_C_Condition> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_C_Condition> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_C_Condition> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_C_Condition)){
                SS_C_Condition compare=(SS_C_Condition)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SS_C_ConditionGroup> SS_C_ConditionGroups
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_C_ConditionGroup.GetRepo();
                  return from items in repo.GetAll()
                       where items.ConditionId == _Id
                       select items;
            }
        }

        public IQueryable<SS_C_CustomerOverride> SS_C_CustomerOverrides
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_C_CustomerOverride.GetRepo();
                  return from items in repo.GetAll()
                       where items.ConditionId == _Id
                       select items;
            }
        }

        public IQueryable<SS_C_EntityCondition> SS_C_EntityConditions
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_C_EntityCondition.GetRepo();
                  return from items in repo.GetAll()
                       where items.ConditionId == _Id
                       select items;
            }
        }

        public IQueryable<SS_C_ProductOverride> SS_C_ProductOverrides
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_C_ProductOverride.GetRepo();
                  return from items in repo.GetAll()
                       where items.ConditionId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Active;
        public bool Active
        {
            get { return _Active; }
            set
            {
                if(_Active!=value){
                    _Active=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Active");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_C_Condition, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the MessageTemplate table in the AliexpressDB Database.
    /// </summary>
    public partial class MessageTemplate: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<MessageTemplate> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<MessageTemplate>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<MessageTemplate> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(MessageTemplate item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                MessageTemplate item=new MessageTemplate();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<MessageTemplate> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public MessageTemplate(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                MessageTemplate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MessageTemplate>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public MessageTemplate(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public MessageTemplate(Expression<Func<MessageTemplate, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<MessageTemplate> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<MessageTemplate> _repo;
            
            if(db.TestMode){
                MessageTemplate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<MessageTemplate>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<MessageTemplate> GetRepo(){
            return GetRepo("","");
        }
        
        public static MessageTemplate SingleOrDefault(Expression<Func<MessageTemplate, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            MessageTemplate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static MessageTemplate SingleOrDefault(Expression<Func<MessageTemplate, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            MessageTemplate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<MessageTemplate, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<MessageTemplate, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<MessageTemplate> Find(Expression<Func<MessageTemplate, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<MessageTemplate> Find(Expression<Func<MessageTemplate, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<MessageTemplate> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<MessageTemplate> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<MessageTemplate> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<MessageTemplate> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<MessageTemplate> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<MessageTemplate> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(MessageTemplate)){
                MessageTemplate compare=(MessageTemplate)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _BccEmailAddresses;
        public string BccEmailAddresses
        {
            get { return _BccEmailAddresses; }
            set
            {
                if(_BccEmailAddresses!=value){
                    _BccEmailAddresses=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BccEmailAddresses");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Subject;
        public string Subject
        {
            get { return _Subject; }
            set
            {
                if(_Subject!=value){
                    _Subject=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Subject");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Body;
        public string Body
        {
            get { return _Body; }
            set
            {
                if(_Body!=value){
                    _Body=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Body");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsActive;
        public bool IsActive
        {
            get { return _IsActive; }
            set
            {
                if(_IsActive!=value){
                    _IsActive=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsActive");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DelayBeforeSend;
        public int? DelayBeforeSend
        {
            get { return _DelayBeforeSend; }
            set
            {
                if(_DelayBeforeSend!=value){
                    _DelayBeforeSend=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DelayBeforeSend");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DelayPeriodId;
        public int DelayPeriodId
        {
            get { return _DelayPeriodId; }
            set
            {
                if(_DelayPeriodId!=value){
                    _DelayPeriodId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DelayPeriodId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AttachedDownloadId;
        public int AttachedDownloadId
        {
            get { return _AttachedDownloadId; }
            set
            {
                if(_AttachedDownloadId!=value){
                    _AttachedDownloadId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AttachedDownloadId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _EmailAccountId;
        public int EmailAccountId
        {
            get { return _EmailAccountId; }
            set
            {
                if(_EmailAccountId!=value){
                    _EmailAccountId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EmailAccountId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _LimitedToStores;
        public bool LimitedToStores
        {
            get { return _LimitedToStores; }
            set
            {
                if(_LimitedToStores!=value){
                    _LimitedToStores=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LimitedToStores");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<MessageTemplate, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the RelatedProduct table in the AliexpressDB Database.
    /// </summary>
    public partial class RelatedProduct: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<RelatedProduct> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<RelatedProduct>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<RelatedProduct> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(RelatedProduct item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                RelatedProduct item=new RelatedProduct();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<RelatedProduct> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public RelatedProduct(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                RelatedProduct.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<RelatedProduct>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public RelatedProduct(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public RelatedProduct(Expression<Func<RelatedProduct, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<RelatedProduct> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<RelatedProduct> _repo;
            
            if(db.TestMode){
                RelatedProduct.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<RelatedProduct>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<RelatedProduct> GetRepo(){
            return GetRepo("","");
        }
        
        public static RelatedProduct SingleOrDefault(Expression<Func<RelatedProduct, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            RelatedProduct single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static RelatedProduct SingleOrDefault(Expression<Func<RelatedProduct, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            RelatedProduct single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<RelatedProduct, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<RelatedProduct, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<RelatedProduct> Find(Expression<Func<RelatedProduct, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<RelatedProduct> Find(Expression<Func<RelatedProduct, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<RelatedProduct> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<RelatedProduct> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<RelatedProduct> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<RelatedProduct> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<RelatedProduct> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<RelatedProduct> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ProductId1.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(RelatedProduct)){
                RelatedProduct compare=(RelatedProduct)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.ProductId1.ToString();
                    }

        public string DescriptorColumn() {
            return "ProductId1";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "ProductId1";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductId1;
        public int ProductId1
        {
            get { return _ProductId1; }
            set
            {
                if(_ProductId1!=value){
                    _ProductId1=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductId1");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductId2;
        public int ProductId2
        {
            get { return _ProductId2; }
            set
            {
                if(_ProductId2!=value){
                    _ProductId2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductId2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<RelatedProduct, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the CustomerAddresses table in the AliexpressDB Database.
    /// </summary>
    public partial class CustomerAddress: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<CustomerAddress> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<CustomerAddress>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<CustomerAddress> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(CustomerAddress item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                CustomerAddress item=new CustomerAddress();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<CustomerAddress> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public CustomerAddress(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                CustomerAddress.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<CustomerAddress>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public CustomerAddress(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public CustomerAddress(Expression<Func<CustomerAddress, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<CustomerAddress> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<CustomerAddress> _repo;
            
            if(db.TestMode){
                CustomerAddress.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<CustomerAddress>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<CustomerAddress> GetRepo(){
            return GetRepo("","");
        }
        
        public static CustomerAddress SingleOrDefault(Expression<Func<CustomerAddress, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            CustomerAddress single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static CustomerAddress SingleOrDefault(Expression<Func<CustomerAddress, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            CustomerAddress single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<CustomerAddress, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<CustomerAddress, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<CustomerAddress> Find(Expression<Func<CustomerAddress, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<CustomerAddress> Find(Expression<Func<CustomerAddress, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<CustomerAddress> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<CustomerAddress> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<CustomerAddress> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<CustomerAddress> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<CustomerAddress> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<CustomerAddress> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Address_Id";
        }

        public object KeyValue()
        {
            return this.Address_Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Address_Id.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(CustomerAddress)){
                CustomerAddress compare=(CustomerAddress)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Address_Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Address_Id.ToString();
                    }

        public string DescriptorColumn() {
            return "Address_Id";
        }
        public static string GetKeyColumn()
        {
            return "Address_Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Address_Id";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Address> Addresses
        {
            get
            {
                
                  var repo=AliexpressDBA.Address.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _Address_Id
                       select items;
            }
        }

        public IQueryable<Customer> Customers
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _Customer_Id
                       select items;
            }
        }

        #endregion
        

        int _Customer_Id;
        public int Customer_Id
        {
            get { return _Customer_Id; }
            set
            {
                if(_Customer_Id!=value){
                    _Customer_Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Customer_Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Address_Id;
        public int Address_Id
        {
            get { return _Address_Id; }
            set
            {
                if(_Address_Id!=value){
                    _Address_Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Address_Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<CustomerAddress, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_C_ConditionGroup table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_C_ConditionGroup: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_C_ConditionGroup> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_C_ConditionGroup>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_C_ConditionGroup> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_C_ConditionGroup item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_C_ConditionGroup item=new SS_C_ConditionGroup();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_C_ConditionGroup> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_C_ConditionGroup(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_C_ConditionGroup.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_C_ConditionGroup>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_C_ConditionGroup(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_C_ConditionGroup(Expression<Func<SS_C_ConditionGroup, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_C_ConditionGroup> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_C_ConditionGroup> _repo;
            
            if(db.TestMode){
                SS_C_ConditionGroup.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_C_ConditionGroup>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_C_ConditionGroup> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_C_ConditionGroup SingleOrDefault(Expression<Func<SS_C_ConditionGroup, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_C_ConditionGroup single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_C_ConditionGroup SingleOrDefault(Expression<Func<SS_C_ConditionGroup, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_C_ConditionGroup single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_C_ConditionGroup, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_C_ConditionGroup, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_C_ConditionGroup> Find(Expression<Func<SS_C_ConditionGroup, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_C_ConditionGroup> Find(Expression<Func<SS_C_ConditionGroup, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_C_ConditionGroup> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_C_ConditionGroup> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_C_ConditionGroup> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_C_ConditionGroup> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_C_ConditionGroup> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_C_ConditionGroup> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ConditionId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_C_ConditionGroup)){
                SS_C_ConditionGroup compare=(SS_C_ConditionGroup)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.ConditionId.ToString();
                    }

        public string DescriptorColumn() {
            return "ConditionId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "ConditionId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SS_C_Condition> SS_C_Conditions
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_C_Condition.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ConditionId
                       select items;
            }
        }

        public IQueryable<SS_C_ConditionStatement> SS_C_ConditionStatements
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_C_ConditionStatement.GetRepo();
                  return from items in repo.GetAll()
                       where items.ConditionGroupId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ConditionId;
        public int ConditionId
        {
            get { return _ConditionId; }
            set
            {
                if(_ConditionId!=value){
                    _ConditionId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConditionId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_C_ConditionGroup, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the NewsComment table in the AliexpressDB Database.
    /// </summary>
    public partial class NewsComment: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<NewsComment> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<NewsComment>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<NewsComment> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(NewsComment item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                NewsComment item=new NewsComment();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<NewsComment> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public NewsComment(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                NewsComment.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<NewsComment>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public NewsComment(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public NewsComment(Expression<Func<NewsComment, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<NewsComment> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<NewsComment> _repo;
            
            if(db.TestMode){
                NewsComment.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<NewsComment>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<NewsComment> GetRepo(){
            return GetRepo("","");
        }
        
        public static NewsComment SingleOrDefault(Expression<Func<NewsComment, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            NewsComment single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static NewsComment SingleOrDefault(Expression<Func<NewsComment, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            NewsComment single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<NewsComment, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<NewsComment, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<NewsComment> Find(Expression<Func<NewsComment, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<NewsComment> Find(Expression<Func<NewsComment, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<NewsComment> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<NewsComment> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<NewsComment> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<NewsComment> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<NewsComment> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<NewsComment> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.CommentTitle.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(NewsComment)){
                NewsComment compare=(NewsComment)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.CommentTitle.ToString();
                    }

        public string DescriptorColumn() {
            return "CommentTitle";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "CommentTitle";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Customer> Customers
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerId
                       select items;
            }
        }

        public IQueryable<News> News
        {
            get
            {
                
                  var repo=AliexpressDBA.News.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _NewsItemId
                       select items;
            }
        }

        public IQueryable<Store> Stores
        {
            get
            {
                
                  var repo=AliexpressDBA.Store.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _StoreId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CommentTitle;
        public string CommentTitle
        {
            get { return _CommentTitle; }
            set
            {
                if(_CommentTitle!=value){
                    _CommentTitle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CommentTitle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CommentText;
        public string CommentText
        {
            get { return _CommentText; }
            set
            {
                if(_CommentText!=value){
                    _CommentText=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CommentText");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _NewsItemId;
        public int NewsItemId
        {
            get { return _NewsItemId; }
            set
            {
                if(_NewsItemId!=value){
                    _NewsItemId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NewsItemId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerId;
        public int CustomerId
        {
            get { return _CustomerId; }
            set
            {
                if(_CustomerId!=value){
                    _CustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsApproved;
        public bool IsApproved
        {
            get { return _IsApproved; }
            set
            {
                if(_IsApproved!=value){
                    _IsApproved=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsApproved");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StoreId;
        public int StoreId
        {
            get { return _StoreId; }
            set
            {
                if(_StoreId!=value){
                    _StoreId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StoreId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<NewsComment, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ReturnRequest table in the AliexpressDB Database.
    /// </summary>
    public partial class ReturnRequest: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ReturnRequest> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ReturnRequest>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ReturnRequest> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ReturnRequest item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ReturnRequest item=new ReturnRequest();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ReturnRequest> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ReturnRequest(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ReturnRequest.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ReturnRequest>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ReturnRequest(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ReturnRequest(Expression<Func<ReturnRequest, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ReturnRequest> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ReturnRequest> _repo;
            
            if(db.TestMode){
                ReturnRequest.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ReturnRequest>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ReturnRequest> GetRepo(){
            return GetRepo("","");
        }
        
        public static ReturnRequest SingleOrDefault(Expression<Func<ReturnRequest, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ReturnRequest single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ReturnRequest SingleOrDefault(Expression<Func<ReturnRequest, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ReturnRequest single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ReturnRequest, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ReturnRequest, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ReturnRequest> Find(Expression<Func<ReturnRequest, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ReturnRequest> Find(Expression<Func<ReturnRequest, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ReturnRequest> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ReturnRequest> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ReturnRequest> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ReturnRequest> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ReturnRequest> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ReturnRequest> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.CustomNumber.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ReturnRequest)){
                ReturnRequest compare=(ReturnRequest)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.CustomNumber.ToString();
                    }

        public string DescriptorColumn() {
            return "CustomNumber";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "CustomNumber";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Customer> Customers
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CustomNumber;
        public string CustomNumber
        {
            get { return _CustomNumber; }
            set
            {
                if(_CustomNumber!=value){
                    _CustomNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StoreId;
        public int StoreId
        {
            get { return _StoreId; }
            set
            {
                if(_StoreId!=value){
                    _StoreId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StoreId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderItemId;
        public int OrderItemId
        {
            get { return _OrderItemId; }
            set
            {
                if(_OrderItemId!=value){
                    _OrderItemId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderItemId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerId;
        public int CustomerId
        {
            get { return _CustomerId; }
            set
            {
                if(_CustomerId!=value){
                    _CustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Quantity;
        public int Quantity
        {
            get { return _Quantity; }
            set
            {
                if(_Quantity!=value){
                    _Quantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Quantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ReasonForReturn;
        public string ReasonForReturn
        {
            get { return _ReasonForReturn; }
            set
            {
                if(_ReasonForReturn!=value){
                    _ReasonForReturn=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReasonForReturn");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RequestedAction;
        public string RequestedAction
        {
            get { return _RequestedAction; }
            set
            {
                if(_RequestedAction!=value){
                    _RequestedAction=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RequestedAction");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CustomerComments;
        public string CustomerComments
        {
            get { return _CustomerComments; }
            set
            {
                if(_CustomerComments!=value){
                    _CustomerComments=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerComments");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _UploadedFileId;
        public int UploadedFileId
        {
            get { return _UploadedFileId; }
            set
            {
                if(_UploadedFileId!=value){
                    _UploadedFileId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UploadedFileId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _StaffNotes;
        public string StaffNotes
        {
            get { return _StaffNotes; }
            set
            {
                if(_StaffNotes!=value){
                    _StaffNotes=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StaffNotes");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ReturnRequestStatusId;
        public int ReturnRequestStatusId
        {
            get { return _ReturnRequestStatusId; }
            set
            {
                if(_ReturnRequestStatusId!=value){
                    _ReturnRequestStatusId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ReturnRequestStatusId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _UpdatedOnUtc;
        public DateTime UpdatedOnUtc
        {
            get { return _UpdatedOnUtc; }
            set
            {
                if(_UpdatedOnUtc!=value){
                    _UpdatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ReturnRequest, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the CustomerAttribute table in the AliexpressDB Database.
    /// </summary>
    public partial class CustomerAttribute: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<CustomerAttribute> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<CustomerAttribute>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<CustomerAttribute> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(CustomerAttribute item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                CustomerAttribute item=new CustomerAttribute();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<CustomerAttribute> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public CustomerAttribute(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                CustomerAttribute.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<CustomerAttribute>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public CustomerAttribute(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public CustomerAttribute(Expression<Func<CustomerAttribute, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<CustomerAttribute> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<CustomerAttribute> _repo;
            
            if(db.TestMode){
                CustomerAttribute.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<CustomerAttribute>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<CustomerAttribute> GetRepo(){
            return GetRepo("","");
        }
        
        public static CustomerAttribute SingleOrDefault(Expression<Func<CustomerAttribute, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            CustomerAttribute single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static CustomerAttribute SingleOrDefault(Expression<Func<CustomerAttribute, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            CustomerAttribute single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<CustomerAttribute, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<CustomerAttribute, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<CustomerAttribute> Find(Expression<Func<CustomerAttribute, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<CustomerAttribute> Find(Expression<Func<CustomerAttribute, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<CustomerAttribute> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<CustomerAttribute> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<CustomerAttribute> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<CustomerAttribute> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<CustomerAttribute> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<CustomerAttribute> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(CustomerAttribute)){
                CustomerAttribute compare=(CustomerAttribute)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<CustomerAttributeValue> CustomerAttributeValues
        {
            get
            {
                
                  var repo=AliexpressDBA.CustomerAttributeValue.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerAttributeId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsRequired;
        public bool IsRequired
        {
            get { return _IsRequired; }
            set
            {
                if(_IsRequired!=value){
                    _IsRequired=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsRequired");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AttributeControlTypeId;
        public int AttributeControlTypeId
        {
            get { return _AttributeControlTypeId; }
            set
            {
                if(_AttributeControlTypeId!=value){
                    _AttributeControlTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AttributeControlTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<CustomerAttribute, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_C_ConditionStatement table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_C_ConditionStatement: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_C_ConditionStatement> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_C_ConditionStatement>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_C_ConditionStatement> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_C_ConditionStatement item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_C_ConditionStatement item=new SS_C_ConditionStatement();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_C_ConditionStatement> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_C_ConditionStatement(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_C_ConditionStatement.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_C_ConditionStatement>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_C_ConditionStatement(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_C_ConditionStatement(Expression<Func<SS_C_ConditionStatement, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_C_ConditionStatement> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_C_ConditionStatement> _repo;
            
            if(db.TestMode){
                SS_C_ConditionStatement.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_C_ConditionStatement>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_C_ConditionStatement> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_C_ConditionStatement SingleOrDefault(Expression<Func<SS_C_ConditionStatement, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_C_ConditionStatement single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_C_ConditionStatement SingleOrDefault(Expression<Func<SS_C_ConditionStatement, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_C_ConditionStatement single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_C_ConditionStatement, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_C_ConditionStatement, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_C_ConditionStatement> Find(Expression<Func<SS_C_ConditionStatement, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_C_ConditionStatement> Find(Expression<Func<SS_C_ConditionStatement, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_C_ConditionStatement> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_C_ConditionStatement> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_C_ConditionStatement> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_C_ConditionStatement> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_C_ConditionStatement> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_C_ConditionStatement> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Value.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_C_ConditionStatement)){
                SS_C_ConditionStatement compare=(SS_C_ConditionStatement)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Value.ToString();
                    }

        public string DescriptorColumn() {
            return "Value";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Value";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SS_C_ConditionGroup> SS_C_ConditionGroups
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_C_ConditionGroup.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ConditionGroupId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ConditionType;
        public int ConditionType
        {
            get { return _ConditionType; }
            set
            {
                if(_ConditionType!=value){
                    _ConditionType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConditionType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ConditionProperty;
        public int ConditionProperty
        {
            get { return _ConditionProperty; }
            set
            {
                if(_ConditionProperty!=value){
                    _ConditionProperty=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConditionProperty");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OperatorType;
        public int OperatorType
        {
            get { return _OperatorType; }
            set
            {
                if(_OperatorType!=value){
                    _OperatorType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OperatorType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Value;
        public string Value
        {
            get { return _Value; }
            set
            {
                if(_Value!=value){
                    _Value=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Value");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ConditionGroupId;
        public int ConditionGroupId
        {
            get { return _ConditionGroupId; }
            set
            {
                if(_ConditionGroupId!=value){
                    _ConditionGroupId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConditionGroupId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_C_ConditionStatement, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the News table in the AliexpressDB Database.
    /// </summary>
    public partial class News: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<News> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<News>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<News> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(News item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                News item=new News();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<News> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public News(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                News.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<News>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public News(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public News(Expression<Func<News, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<News> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<News> _repo;
            
            if(db.TestMode){
                News.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<News>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<News> GetRepo(){
            return GetRepo("","");
        }
        
        public static News SingleOrDefault(Expression<Func<News, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            News single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static News SingleOrDefault(Expression<Func<News, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            News single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<News, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<News, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<News> Find(Expression<Func<News, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<News> Find(Expression<Func<News, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<News> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<News> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<News> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<News> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<News> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<News> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Title.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(News)){
                News compare=(News)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Title.ToString();
                    }

        public string DescriptorColumn() {
            return "Title";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Title";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Language> Languages
        {
            get
            {
                
                  var repo=AliexpressDBA.Language.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _LanguageId
                       select items;
            }
        }

        public IQueryable<NewsComment> NewsComments
        {
            get
            {
                
                  var repo=AliexpressDBA.NewsComment.GetRepo();
                  return from items in repo.GetAll()
                       where items.NewsItemId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _LanguageId;
        public int LanguageId
        {
            get { return _LanguageId; }
            set
            {
                if(_LanguageId!=value){
                    _LanguageId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LanguageId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Title;
        public string Title
        {
            get { return _Title; }
            set
            {
                if(_Title!=value){
                    _Title=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Title");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Short;
        public string Short
        {
            get { return _Short; }
            set
            {
                if(_Short!=value){
                    _Short=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Short");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Full;
        public string Full
        {
            get { return _Full; }
            set
            {
                if(_Full!=value){
                    _Full=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Full");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Published;
        public bool Published
        {
            get { return _Published; }
            set
            {
                if(_Published!=value){
                    _Published=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Published");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _StartDateUtc;
        public DateTime? StartDateUtc
        {
            get { return _StartDateUtc; }
            set
            {
                if(_StartDateUtc!=value){
                    _StartDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StartDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _EndDateUtc;
        public DateTime? EndDateUtc
        {
            get { return _EndDateUtc; }
            set
            {
                if(_EndDateUtc!=value){
                    _EndDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EndDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _AllowComments;
        public bool AllowComments
        {
            get { return _AllowComments; }
            set
            {
                if(_AllowComments!=value){
                    _AllowComments=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AllowComments");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _LimitedToStores;
        public bool LimitedToStores
        {
            get { return _LimitedToStores; }
            set
            {
                if(_LimitedToStores!=value){
                    _LimitedToStores=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LimitedToStores");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaKeywords;
        public string MetaKeywords
        {
            get { return _MetaKeywords; }
            set
            {
                if(_MetaKeywords!=value){
                    _MetaKeywords=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaKeywords");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaDescription;
        public string MetaDescription
        {
            get { return _MetaDescription; }
            set
            {
                if(_MetaDescription!=value){
                    _MetaDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaTitle;
        public string MetaTitle
        {
            get { return _MetaTitle; }
            set
            {
                if(_MetaTitle!=value){
                    _MetaTitle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaTitle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<News, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ReturnRequestAction table in the AliexpressDB Database.
    /// </summary>
    public partial class ReturnRequestAction: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ReturnRequestAction> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ReturnRequestAction>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ReturnRequestAction> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ReturnRequestAction item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ReturnRequestAction item=new ReturnRequestAction();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ReturnRequestAction> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ReturnRequestAction(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ReturnRequestAction.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ReturnRequestAction>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ReturnRequestAction(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ReturnRequestAction(Expression<Func<ReturnRequestAction, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ReturnRequestAction> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ReturnRequestAction> _repo;
            
            if(db.TestMode){
                ReturnRequestAction.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ReturnRequestAction>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ReturnRequestAction> GetRepo(){
            return GetRepo("","");
        }
        
        public static ReturnRequestAction SingleOrDefault(Expression<Func<ReturnRequestAction, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ReturnRequestAction single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ReturnRequestAction SingleOrDefault(Expression<Func<ReturnRequestAction, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ReturnRequestAction single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ReturnRequestAction, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ReturnRequestAction, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ReturnRequestAction> Find(Expression<Func<ReturnRequestAction, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ReturnRequestAction> Find(Expression<Func<ReturnRequestAction, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ReturnRequestAction> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ReturnRequestAction> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ReturnRequestAction> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ReturnRequestAction> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ReturnRequestAction> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ReturnRequestAction> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ReturnRequestAction)){
                ReturnRequestAction compare=(ReturnRequestAction)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ReturnRequestAction, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the CustomerAttributeValue table in the AliexpressDB Database.
    /// </summary>
    public partial class CustomerAttributeValue: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<CustomerAttributeValue> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<CustomerAttributeValue>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<CustomerAttributeValue> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(CustomerAttributeValue item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                CustomerAttributeValue item=new CustomerAttributeValue();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<CustomerAttributeValue> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public CustomerAttributeValue(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                CustomerAttributeValue.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<CustomerAttributeValue>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public CustomerAttributeValue(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public CustomerAttributeValue(Expression<Func<CustomerAttributeValue, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<CustomerAttributeValue> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<CustomerAttributeValue> _repo;
            
            if(db.TestMode){
                CustomerAttributeValue.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<CustomerAttributeValue>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<CustomerAttributeValue> GetRepo(){
            return GetRepo("","");
        }
        
        public static CustomerAttributeValue SingleOrDefault(Expression<Func<CustomerAttributeValue, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            CustomerAttributeValue single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static CustomerAttributeValue SingleOrDefault(Expression<Func<CustomerAttributeValue, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            CustomerAttributeValue single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<CustomerAttributeValue, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<CustomerAttributeValue, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<CustomerAttributeValue> Find(Expression<Func<CustomerAttributeValue, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<CustomerAttributeValue> Find(Expression<Func<CustomerAttributeValue, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<CustomerAttributeValue> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<CustomerAttributeValue> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<CustomerAttributeValue> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<CustomerAttributeValue> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<CustomerAttributeValue> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<CustomerAttributeValue> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(CustomerAttributeValue)){
                CustomerAttributeValue compare=(CustomerAttributeValue)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<CustomerAttribute> CustomerAttributes
        {
            get
            {
                
                  var repo=AliexpressDBA.CustomerAttribute.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerAttributeId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerAttributeId;
        public int CustomerAttributeId
        {
            get { return _CustomerAttributeId; }
            set
            {
                if(_CustomerAttributeId!=value){
                    _CustomerAttributeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerAttributeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsPreSelected;
        public bool IsPreSelected
        {
            get { return _IsPreSelected; }
            set
            {
                if(_IsPreSelected!=value){
                    _IsPreSelected=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsPreSelected");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<CustomerAttributeValue, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_C_CustomerOverride table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_C_CustomerOverride: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_C_CustomerOverride> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_C_CustomerOverride>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_C_CustomerOverride> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_C_CustomerOverride item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_C_CustomerOverride item=new SS_C_CustomerOverride();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_C_CustomerOverride> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_C_CustomerOverride(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_C_CustomerOverride.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_C_CustomerOverride>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_C_CustomerOverride(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_C_CustomerOverride(Expression<Func<SS_C_CustomerOverride, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_C_CustomerOverride> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_C_CustomerOverride> _repo;
            
            if(db.TestMode){
                SS_C_CustomerOverride.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_C_CustomerOverride>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_C_CustomerOverride> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_C_CustomerOverride SingleOrDefault(Expression<Func<SS_C_CustomerOverride, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_C_CustomerOverride single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_C_CustomerOverride SingleOrDefault(Expression<Func<SS_C_CustomerOverride, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_C_CustomerOverride single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_C_CustomerOverride, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_C_CustomerOverride, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_C_CustomerOverride> Find(Expression<Func<SS_C_CustomerOverride, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_C_CustomerOverride> Find(Expression<Func<SS_C_CustomerOverride, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_C_CustomerOverride> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_C_CustomerOverride> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_C_CustomerOverride> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_C_CustomerOverride> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_C_CustomerOverride> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_C_CustomerOverride> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ConditionId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_C_CustomerOverride)){
                SS_C_CustomerOverride compare=(SS_C_CustomerOverride)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.ConditionId.ToString();
                    }

        public string DescriptorColumn() {
            return "ConditionId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "ConditionId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SS_C_Condition> SS_C_Conditions
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_C_Condition.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ConditionId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ConditionId;
        public int ConditionId
        {
            get { return _ConditionId; }
            set
            {
                if(_ConditionId!=value){
                    _ConditionId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConditionId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerId;
        public int CustomerId
        {
            get { return _CustomerId; }
            set
            {
                if(_CustomerId!=value){
                    _CustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OverrideState;
        public int OverrideState
        {
            get { return _OverrideState; }
            set
            {
                if(_OverrideState!=value){
                    _OverrideState=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OverrideState");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_C_CustomerOverride, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the NewsLetterSubscription table in the AliexpressDB Database.
    /// </summary>
    public partial class NewsLetterSubscription: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<NewsLetterSubscription> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<NewsLetterSubscription>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<NewsLetterSubscription> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(NewsLetterSubscription item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                NewsLetterSubscription item=new NewsLetterSubscription();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<NewsLetterSubscription> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public NewsLetterSubscription(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                NewsLetterSubscription.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<NewsLetterSubscription>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public NewsLetterSubscription(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public NewsLetterSubscription(Expression<Func<NewsLetterSubscription, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<NewsLetterSubscription> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<NewsLetterSubscription> _repo;
            
            if(db.TestMode){
                NewsLetterSubscription.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<NewsLetterSubscription>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<NewsLetterSubscription> GetRepo(){
            return GetRepo("","");
        }
        
        public static NewsLetterSubscription SingleOrDefault(Expression<Func<NewsLetterSubscription, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            NewsLetterSubscription single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static NewsLetterSubscription SingleOrDefault(Expression<Func<NewsLetterSubscription, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            NewsLetterSubscription single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<NewsLetterSubscription, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<NewsLetterSubscription, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<NewsLetterSubscription> Find(Expression<Func<NewsLetterSubscription, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<NewsLetterSubscription> Find(Expression<Func<NewsLetterSubscription, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<NewsLetterSubscription> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<NewsLetterSubscription> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<NewsLetterSubscription> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<NewsLetterSubscription> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<NewsLetterSubscription> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<NewsLetterSubscription> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Email.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(NewsLetterSubscription)){
                NewsLetterSubscription compare=(NewsLetterSubscription)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Email.ToString();
                    }

        public string DescriptorColumn() {
            return "Email";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Email";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid _NewsLetterSubscriptionGuid;
        public Guid NewsLetterSubscriptionGuid
        {
            get { return _NewsLetterSubscriptionGuid; }
            set
            {
                if(_NewsLetterSubscriptionGuid!=value){
                    _NewsLetterSubscriptionGuid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NewsLetterSubscriptionGuid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Email;
        public string Email
        {
            get { return _Email; }
            set
            {
                if(_Email!=value){
                    _Email=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Email");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Active;
        public bool Active
        {
            get { return _Active; }
            set
            {
                if(_Active!=value){
                    _Active=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Active");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StoreId;
        public int StoreId
        {
            get { return _StoreId; }
            set
            {
                if(_StoreId!=value){
                    _StoreId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StoreId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<NewsLetterSubscription, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ReturnRequestReason table in the AliexpressDB Database.
    /// </summary>
    public partial class ReturnRequestReason: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ReturnRequestReason> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ReturnRequestReason>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ReturnRequestReason> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ReturnRequestReason item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ReturnRequestReason item=new ReturnRequestReason();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ReturnRequestReason> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ReturnRequestReason(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ReturnRequestReason.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ReturnRequestReason>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ReturnRequestReason(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ReturnRequestReason(Expression<Func<ReturnRequestReason, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ReturnRequestReason> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ReturnRequestReason> _repo;
            
            if(db.TestMode){
                ReturnRequestReason.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ReturnRequestReason>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ReturnRequestReason> GetRepo(){
            return GetRepo("","");
        }
        
        public static ReturnRequestReason SingleOrDefault(Expression<Func<ReturnRequestReason, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ReturnRequestReason single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ReturnRequestReason SingleOrDefault(Expression<Func<ReturnRequestReason, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ReturnRequestReason single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ReturnRequestReason, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ReturnRequestReason, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ReturnRequestReason> Find(Expression<Func<ReturnRequestReason, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ReturnRequestReason> Find(Expression<Func<ReturnRequestReason, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ReturnRequestReason> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ReturnRequestReason> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ReturnRequestReason> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ReturnRequestReason> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ReturnRequestReason> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ReturnRequestReason> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ReturnRequestReason)){
                ReturnRequestReason compare=(ReturnRequestReason)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ReturnRequestReason, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Customer_CustomerRole_Mapping table in the AliexpressDB Database.
    /// </summary>
    public partial class Customer_CustomerRole_Mapping: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Customer_CustomerRole_Mapping> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Customer_CustomerRole_Mapping>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Customer_CustomerRole_Mapping> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Customer_CustomerRole_Mapping item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Customer_CustomerRole_Mapping item=new Customer_CustomerRole_Mapping();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Customer_CustomerRole_Mapping> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Customer_CustomerRole_Mapping(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Customer_CustomerRole_Mapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Customer_CustomerRole_Mapping>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Customer_CustomerRole_Mapping(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Customer_CustomerRole_Mapping(Expression<Func<Customer_CustomerRole_Mapping, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Customer_CustomerRole_Mapping> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Customer_CustomerRole_Mapping> _repo;
            
            if(db.TestMode){
                Customer_CustomerRole_Mapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Customer_CustomerRole_Mapping>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Customer_CustomerRole_Mapping> GetRepo(){
            return GetRepo("","");
        }
        
        public static Customer_CustomerRole_Mapping SingleOrDefault(Expression<Func<Customer_CustomerRole_Mapping, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Customer_CustomerRole_Mapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Customer_CustomerRole_Mapping SingleOrDefault(Expression<Func<Customer_CustomerRole_Mapping, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Customer_CustomerRole_Mapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Customer_CustomerRole_Mapping, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Customer_CustomerRole_Mapping, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Customer_CustomerRole_Mapping> Find(Expression<Func<Customer_CustomerRole_Mapping, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Customer_CustomerRole_Mapping> Find(Expression<Func<Customer_CustomerRole_Mapping, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Customer_CustomerRole_Mapping> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Customer_CustomerRole_Mapping> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Customer_CustomerRole_Mapping> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Customer_CustomerRole_Mapping> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Customer_CustomerRole_Mapping> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Customer_CustomerRole_Mapping> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Customer_Id";
        }

        public object KeyValue()
        {
            return this.Customer_Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.CustomerRole_Id.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Customer_CustomerRole_Mapping)){
                Customer_CustomerRole_Mapping compare=(Customer_CustomerRole_Mapping)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Customer_Id;
        }
        
        public string DescriptorValue()
        {
                            return this.CustomerRole_Id.ToString();
                    }

        public string DescriptorColumn() {
            return "CustomerRole_Id";
        }
        public static string GetKeyColumn()
        {
            return "Customer_Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "CustomerRole_Id";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Customer> Customers
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _Customer_Id
                       select items;
            }
        }

        public IQueryable<CustomerRole> CustomerRoles
        {
            get
            {
                
                  var repo=AliexpressDBA.CustomerRole.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerRole_Id
                       select items;
            }
        }

        #endregion
        

        int _Customer_Id;
        public int Customer_Id
        {
            get { return _Customer_Id; }
            set
            {
                if(_Customer_Id!=value){
                    _Customer_Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Customer_Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerRole_Id;
        public int CustomerRole_Id
        {
            get { return _CustomerRole_Id; }
            set
            {
                if(_CustomerRole_Id!=value){
                    _CustomerRole_Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerRole_Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Customer_CustomerRole_Mapping, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_C_EntityCondition table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_C_EntityCondition: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_C_EntityCondition> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_C_EntityCondition>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_C_EntityCondition> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_C_EntityCondition item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_C_EntityCondition item=new SS_C_EntityCondition();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_C_EntityCondition> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_C_EntityCondition(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_C_EntityCondition.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_C_EntityCondition>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_C_EntityCondition(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_C_EntityCondition(Expression<Func<SS_C_EntityCondition, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_C_EntityCondition> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_C_EntityCondition> _repo;
            
            if(db.TestMode){
                SS_C_EntityCondition.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_C_EntityCondition>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_C_EntityCondition> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_C_EntityCondition SingleOrDefault(Expression<Func<SS_C_EntityCondition, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_C_EntityCondition single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_C_EntityCondition SingleOrDefault(Expression<Func<SS_C_EntityCondition, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_C_EntityCondition single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_C_EntityCondition, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_C_EntityCondition, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_C_EntityCondition> Find(Expression<Func<SS_C_EntityCondition, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_C_EntityCondition> Find(Expression<Func<SS_C_EntityCondition, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_C_EntityCondition> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_C_EntityCondition> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_C_EntityCondition> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_C_EntityCondition> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_C_EntityCondition> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_C_EntityCondition> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ConditionId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_C_EntityCondition)){
                SS_C_EntityCondition compare=(SS_C_EntityCondition)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.ConditionId.ToString();
                    }

        public string DescriptorColumn() {
            return "ConditionId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "ConditionId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SS_C_Condition> SS_C_Conditions
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_C_Condition.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ConditionId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ConditionId;
        public int ConditionId
        {
            get { return _ConditionId; }
            set
            {
                if(_ConditionId!=value){
                    _ConditionId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConditionId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _EntityType;
        public int EntityType
        {
            get { return _EntityType; }
            set
            {
                if(_EntityType!=value){
                    _EntityType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _EntityId;
        public int EntityId
        {
            get { return _EntityId; }
            set
            {
                if(_EntityId!=value){
                    _EntityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _LimitedToStores;
        public bool LimitedToStores
        {
            get { return _LimitedToStores; }
            set
            {
                if(_LimitedToStores!=value){
                    _LimitedToStores=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LimitedToStores");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_C_EntityCondition, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Order table in the AliexpressDB Database.
    /// </summary>
    public partial class Order: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Order> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Order>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Order> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Order item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Order item=new Order();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Order> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Order(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Order.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Order>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Order(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Order(Expression<Func<Order, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Order> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Order> _repo;
            
            if(db.TestMode){
                Order.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Order>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Order> GetRepo(){
            return GetRepo("","");
        }
        
        public static Order SingleOrDefault(Expression<Func<Order, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Order single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Order SingleOrDefault(Expression<Func<Order, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Order single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Order, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Order, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Order> Find(Expression<Func<Order, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Order> Find(Expression<Func<Order, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Order> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Order> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Order> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Order> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Order> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Order> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.PaymentMethodSystemName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Order)){
                Order compare=(Order)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.PaymentMethodSystemName.ToString();
                    }

        public string DescriptorColumn() {
            return "PaymentMethodSystemName";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "PaymentMethodSystemName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Address> Addresses
        {
            get
            {
                
                  var repo=AliexpressDBA.Address.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _BillingAddressId
                       select items;
            }
        }

        public IQueryable<Address> Addresses1
        {
            get
            {
                
                  var repo=AliexpressDBA.Address.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _PickupAddressId
                       select items;
            }
        }

        public IQueryable<Address> Addresses2
        {
            get
            {
                
                  var repo=AliexpressDBA.Address.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ShippingAddressId
                       select items;
            }
        }

        public IQueryable<Customer> Customers
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerId
                       select items;
            }
        }

        public IQueryable<DiscountUsageHistory> DiscountUsageHistories
        {
            get
            {
                
                  var repo=AliexpressDBA.DiscountUsageHistory.GetRepo();
                  return from items in repo.GetAll()
                       where items.OrderId == _Id
                       select items;
            }
        }

        public IQueryable<GiftCardUsageHistory> GiftCardUsageHistories
        {
            get
            {
                
                  var repo=AliexpressDBA.GiftCardUsageHistory.GetRepo();
                  return from items in repo.GetAll()
                       where items.UsedWithOrderId == _Id
                       select items;
            }
        }

        public IQueryable<OrderItem> OrderItems
        {
            get
            {
                
                  var repo=AliexpressDBA.OrderItem.GetRepo();
                  return from items in repo.GetAll()
                       where items.OrderId == _Id
                       select items;
            }
        }

        public IQueryable<OrderNote> OrderNotes
        {
            get
            {
                
                  var repo=AliexpressDBA.OrderNote.GetRepo();
                  return from items in repo.GetAll()
                       where items.OrderId == _Id
                       select items;
            }
        }

        public IQueryable<RecurringPayment> RecurringPayments
        {
            get
            {
                
                  var repo=AliexpressDBA.RecurringPayment.GetRepo();
                  return from items in repo.GetAll()
                       where items.InitialOrderId == _Id
                       select items;
            }
        }

        public IQueryable<RewardPointsHistory> RewardPointsHistories
        {
            get
            {
                
                  var repo=AliexpressDBA.RewardPointsHistory.GetRepo();
                  return from items in repo.GetAll()
                       where items.UsedWithOrder_Id == _Id
                       select items;
            }
        }

        public IQueryable<Shipment> Shipments
        {
            get
            {
                
                  var repo=AliexpressDBA.Shipment.GetRepo();
                  return from items in repo.GetAll()
                       where items.OrderId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid _OrderGuid;
        public Guid OrderGuid
        {
            get { return _OrderGuid; }
            set
            {
                if(_OrderGuid!=value){
                    _OrderGuid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderGuid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StoreId;
        public int StoreId
        {
            get { return _StoreId; }
            set
            {
                if(_StoreId!=value){
                    _StoreId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StoreId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerId;
        public int CustomerId
        {
            get { return _CustomerId; }
            set
            {
                if(_CustomerId!=value){
                    _CustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _BillingAddressId;
        public int BillingAddressId
        {
            get { return _BillingAddressId; }
            set
            {
                if(_BillingAddressId!=value){
                    _BillingAddressId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BillingAddressId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ShippingAddressId;
        public int? ShippingAddressId
        {
            get { return _ShippingAddressId; }
            set
            {
                if(_ShippingAddressId!=value){
                    _ShippingAddressId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ShippingAddressId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _PickupAddressId;
        public int? PickupAddressId
        {
            get { return _PickupAddressId; }
            set
            {
                if(_PickupAddressId!=value){
                    _PickupAddressId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PickupAddressId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _PickUpInStore;
        public bool PickUpInStore
        {
            get { return _PickUpInStore; }
            set
            {
                if(_PickUpInStore!=value){
                    _PickUpInStore=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PickUpInStore");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderStatusId;
        public int OrderStatusId
        {
            get { return _OrderStatusId; }
            set
            {
                if(_OrderStatusId!=value){
                    _OrderStatusId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderStatusId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ShippingStatusId;
        public int ShippingStatusId
        {
            get { return _ShippingStatusId; }
            set
            {
                if(_ShippingStatusId!=value){
                    _ShippingStatusId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ShippingStatusId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PaymentStatusId;
        public int PaymentStatusId
        {
            get { return _PaymentStatusId; }
            set
            {
                if(_PaymentStatusId!=value){
                    _PaymentStatusId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PaymentStatusId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PaymentMethodSystemName;
        public string PaymentMethodSystemName
        {
            get { return _PaymentMethodSystemName; }
            set
            {
                if(_PaymentMethodSystemName!=value){
                    _PaymentMethodSystemName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PaymentMethodSystemName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CustomerCurrencyCode;
        public string CustomerCurrencyCode
        {
            get { return _CustomerCurrencyCode; }
            set
            {
                if(_CustomerCurrencyCode!=value){
                    _CustomerCurrencyCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerCurrencyCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _CurrencyRate;
        public decimal CurrencyRate
        {
            get { return _CurrencyRate; }
            set
            {
                if(_CurrencyRate!=value){
                    _CurrencyRate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CurrencyRate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerTaxDisplayTypeId;
        public int CustomerTaxDisplayTypeId
        {
            get { return _CustomerTaxDisplayTypeId; }
            set
            {
                if(_CustomerTaxDisplayTypeId!=value){
                    _CustomerTaxDisplayTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerTaxDisplayTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _VatNumber;
        public string VatNumber
        {
            get { return _VatNumber; }
            set
            {
                if(_VatNumber!=value){
                    _VatNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VatNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderSubtotalInclTax;
        public decimal OrderSubtotalInclTax
        {
            get { return _OrderSubtotalInclTax; }
            set
            {
                if(_OrderSubtotalInclTax!=value){
                    _OrderSubtotalInclTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderSubtotalInclTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderSubtotalExclTax;
        public decimal OrderSubtotalExclTax
        {
            get { return _OrderSubtotalExclTax; }
            set
            {
                if(_OrderSubtotalExclTax!=value){
                    _OrderSubtotalExclTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderSubtotalExclTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderSubTotalDiscountInclTax;
        public decimal OrderSubTotalDiscountInclTax
        {
            get { return _OrderSubTotalDiscountInclTax; }
            set
            {
                if(_OrderSubTotalDiscountInclTax!=value){
                    _OrderSubTotalDiscountInclTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderSubTotalDiscountInclTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderSubTotalDiscountExclTax;
        public decimal OrderSubTotalDiscountExclTax
        {
            get { return _OrderSubTotalDiscountExclTax; }
            set
            {
                if(_OrderSubTotalDiscountExclTax!=value){
                    _OrderSubTotalDiscountExclTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderSubTotalDiscountExclTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderShippingInclTax;
        public decimal OrderShippingInclTax
        {
            get { return _OrderShippingInclTax; }
            set
            {
                if(_OrderShippingInclTax!=value){
                    _OrderShippingInclTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderShippingInclTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderShippingExclTax;
        public decimal OrderShippingExclTax
        {
            get { return _OrderShippingExclTax; }
            set
            {
                if(_OrderShippingExclTax!=value){
                    _OrderShippingExclTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderShippingExclTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _PaymentMethodAdditionalFeeInclTax;
        public decimal PaymentMethodAdditionalFeeInclTax
        {
            get { return _PaymentMethodAdditionalFeeInclTax; }
            set
            {
                if(_PaymentMethodAdditionalFeeInclTax!=value){
                    _PaymentMethodAdditionalFeeInclTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PaymentMethodAdditionalFeeInclTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _PaymentMethodAdditionalFeeExclTax;
        public decimal PaymentMethodAdditionalFeeExclTax
        {
            get { return _PaymentMethodAdditionalFeeExclTax; }
            set
            {
                if(_PaymentMethodAdditionalFeeExclTax!=value){
                    _PaymentMethodAdditionalFeeExclTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PaymentMethodAdditionalFeeExclTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TaxRates;
        public string TaxRates
        {
            get { return _TaxRates; }
            set
            {
                if(_TaxRates!=value){
                    _TaxRates=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TaxRates");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderTax;
        public decimal OrderTax
        {
            get { return _OrderTax; }
            set
            {
                if(_OrderTax!=value){
                    _OrderTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderDiscount;
        public decimal OrderDiscount
        {
            get { return _OrderDiscount; }
            set
            {
                if(_OrderDiscount!=value){
                    _OrderDiscount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderDiscount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OrderTotal;
        public decimal OrderTotal
        {
            get { return _OrderTotal; }
            set
            {
                if(_OrderTotal!=value){
                    _OrderTotal=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderTotal");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _RefundedAmount;
        public decimal RefundedAmount
        {
            get { return _RefundedAmount; }
            set
            {
                if(_RefundedAmount!=value){
                    _RefundedAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RefundedAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _RewardPointsHistoryEntryId;
        public int? RewardPointsHistoryEntryId
        {
            get { return _RewardPointsHistoryEntryId; }
            set
            {
                if(_RewardPointsHistoryEntryId!=value){
                    _RewardPointsHistoryEntryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RewardPointsHistoryEntryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CheckoutAttributeDescription;
        public string CheckoutAttributeDescription
        {
            get { return _CheckoutAttributeDescription; }
            set
            {
                if(_CheckoutAttributeDescription!=value){
                    _CheckoutAttributeDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CheckoutAttributeDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CheckoutAttributesXml;
        public string CheckoutAttributesXml
        {
            get { return _CheckoutAttributesXml; }
            set
            {
                if(_CheckoutAttributesXml!=value){
                    _CheckoutAttributesXml=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CheckoutAttributesXml");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerLanguageId;
        public int CustomerLanguageId
        {
            get { return _CustomerLanguageId; }
            set
            {
                if(_CustomerLanguageId!=value){
                    _CustomerLanguageId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerLanguageId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _AffiliateId;
        public int AffiliateId
        {
            get { return _AffiliateId; }
            set
            {
                if(_AffiliateId!=value){
                    _AffiliateId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AffiliateId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CustomerIp;
        public string CustomerIp
        {
            get { return _CustomerIp; }
            set
            {
                if(_CustomerIp!=value){
                    _CustomerIp=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerIp");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _AllowStoringCreditCardNumber;
        public bool AllowStoringCreditCardNumber
        {
            get { return _AllowStoringCreditCardNumber; }
            set
            {
                if(_AllowStoringCreditCardNumber!=value){
                    _AllowStoringCreditCardNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AllowStoringCreditCardNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CardType;
        public string CardType
        {
            get { return _CardType; }
            set
            {
                if(_CardType!=value){
                    _CardType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CardType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CardName;
        public string CardName
        {
            get { return _CardName; }
            set
            {
                if(_CardName!=value){
                    _CardName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CardName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CardNumber;
        public string CardNumber
        {
            get { return _CardNumber; }
            set
            {
                if(_CardNumber!=value){
                    _CardNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CardNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MaskedCreditCardNumber;
        public string MaskedCreditCardNumber
        {
            get { return _MaskedCreditCardNumber; }
            set
            {
                if(_MaskedCreditCardNumber!=value){
                    _MaskedCreditCardNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MaskedCreditCardNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CardCvv2;
        public string CardCvv2
        {
            get { return _CardCvv2; }
            set
            {
                if(_CardCvv2!=value){
                    _CardCvv2=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CardCvv2");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CardExpirationMonth;
        public string CardExpirationMonth
        {
            get { return _CardExpirationMonth; }
            set
            {
                if(_CardExpirationMonth!=value){
                    _CardExpirationMonth=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CardExpirationMonth");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CardExpirationYear;
        public string CardExpirationYear
        {
            get { return _CardExpirationYear; }
            set
            {
                if(_CardExpirationYear!=value){
                    _CardExpirationYear=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CardExpirationYear");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AuthorizationTransactionId;
        public string AuthorizationTransactionId
        {
            get { return _AuthorizationTransactionId; }
            set
            {
                if(_AuthorizationTransactionId!=value){
                    _AuthorizationTransactionId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AuthorizationTransactionId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AuthorizationTransactionCode;
        public string AuthorizationTransactionCode
        {
            get { return _AuthorizationTransactionCode; }
            set
            {
                if(_AuthorizationTransactionCode!=value){
                    _AuthorizationTransactionCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AuthorizationTransactionCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AuthorizationTransactionResult;
        public string AuthorizationTransactionResult
        {
            get { return _AuthorizationTransactionResult; }
            set
            {
                if(_AuthorizationTransactionResult!=value){
                    _AuthorizationTransactionResult=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AuthorizationTransactionResult");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CaptureTransactionId;
        public string CaptureTransactionId
        {
            get { return _CaptureTransactionId; }
            set
            {
                if(_CaptureTransactionId!=value){
                    _CaptureTransactionId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CaptureTransactionId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CaptureTransactionResult;
        public string CaptureTransactionResult
        {
            get { return _CaptureTransactionResult; }
            set
            {
                if(_CaptureTransactionResult!=value){
                    _CaptureTransactionResult=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CaptureTransactionResult");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SubscriptionTransactionId;
        public string SubscriptionTransactionId
        {
            get { return _SubscriptionTransactionId; }
            set
            {
                if(_SubscriptionTransactionId!=value){
                    _SubscriptionTransactionId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubscriptionTransactionId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _PaidDateUtc;
        public DateTime? PaidDateUtc
        {
            get { return _PaidDateUtc; }
            set
            {
                if(_PaidDateUtc!=value){
                    _PaidDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PaidDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ShippingMethod;
        public string ShippingMethod
        {
            get { return _ShippingMethod; }
            set
            {
                if(_ShippingMethod!=value){
                    _ShippingMethod=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ShippingMethod");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ShippingRateComputationMethodSystemName;
        public string ShippingRateComputationMethodSystemName
        {
            get { return _ShippingRateComputationMethodSystemName; }
            set
            {
                if(_ShippingRateComputationMethodSystemName!=value){
                    _ShippingRateComputationMethodSystemName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ShippingRateComputationMethodSystemName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CustomValuesXml;
        public string CustomValuesXml
        {
            get { return _CustomValuesXml; }
            set
            {
                if(_CustomValuesXml!=value){
                    _CustomValuesXml=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomValuesXml");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Deleted;
        public bool Deleted
        {
            get { return _Deleted; }
            set
            {
                if(_Deleted!=value){
                    _Deleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Deleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CustomOrderNumber;
        public string CustomOrderNumber
        {
            get { return _CustomOrderNumber; }
            set
            {
                if(_CustomOrderNumber!=value){
                    _CustomOrderNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomOrderNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.Deleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Order, bool>> expression) {
            var repo = GetRepo();
            
            
            List<Order> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.Deleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<Order, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the RewardPointsHistory table in the AliexpressDB Database.
    /// </summary>
    public partial class RewardPointsHistory: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<RewardPointsHistory> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<RewardPointsHistory>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<RewardPointsHistory> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(RewardPointsHistory item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                RewardPointsHistory item=new RewardPointsHistory();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<RewardPointsHistory> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public RewardPointsHistory(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                RewardPointsHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<RewardPointsHistory>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public RewardPointsHistory(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public RewardPointsHistory(Expression<Func<RewardPointsHistory, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<RewardPointsHistory> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<RewardPointsHistory> _repo;
            
            if(db.TestMode){
                RewardPointsHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<RewardPointsHistory>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<RewardPointsHistory> GetRepo(){
            return GetRepo("","");
        }
        
        public static RewardPointsHistory SingleOrDefault(Expression<Func<RewardPointsHistory, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            RewardPointsHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static RewardPointsHistory SingleOrDefault(Expression<Func<RewardPointsHistory, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            RewardPointsHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<RewardPointsHistory, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<RewardPointsHistory, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<RewardPointsHistory> Find(Expression<Func<RewardPointsHistory, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<RewardPointsHistory> Find(Expression<Func<RewardPointsHistory, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<RewardPointsHistory> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<RewardPointsHistory> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<RewardPointsHistory> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<RewardPointsHistory> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<RewardPointsHistory> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<RewardPointsHistory> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Message.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(RewardPointsHistory)){
                RewardPointsHistory compare=(RewardPointsHistory)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Message.ToString();
                    }

        public string DescriptorColumn() {
            return "Message";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Message";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Customer> Customers
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerId
                       select items;
            }
        }

        public IQueryable<Order> Orders
        {
            get
            {
                
                  var repo=AliexpressDBA.Order.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _UsedWithOrder_Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerId;
        public int CustomerId
        {
            get { return _CustomerId; }
            set
            {
                if(_CustomerId!=value){
                    _CustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StoreId;
        public int StoreId
        {
            get { return _StoreId; }
            set
            {
                if(_StoreId!=value){
                    _StoreId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StoreId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Points;
        public int Points
        {
            get { return _Points; }
            set
            {
                if(_Points!=value){
                    _Points=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Points");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _PointsBalance;
        public int? PointsBalance
        {
            get { return _PointsBalance; }
            set
            {
                if(_PointsBalance!=value){
                    _PointsBalance=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PointsBalance");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _UsedAmount;
        public decimal UsedAmount
        {
            get { return _UsedAmount; }
            set
            {
                if(_UsedAmount!=value){
                    _UsedAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UsedAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Message;
        public string Message
        {
            get { return _Message; }
            set
            {
                if(_Message!=value){
                    _Message=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Message");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _UsedWithOrder_Id;
        public int? UsedWithOrder_Id
        {
            get { return _UsedWithOrder_Id; }
            set
            {
                if(_UsedWithOrder_Id!=value){
                    _UsedWithOrder_Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UsedWithOrder_Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<RewardPointsHistory, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the CustomerPassword table in the AliexpressDB Database.
    /// </summary>
    public partial class CustomerPassword: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<CustomerPassword> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<CustomerPassword>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<CustomerPassword> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(CustomerPassword item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                CustomerPassword item=new CustomerPassword();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<CustomerPassword> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public CustomerPassword(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                CustomerPassword.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<CustomerPassword>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public CustomerPassword(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public CustomerPassword(Expression<Func<CustomerPassword, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<CustomerPassword> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<CustomerPassword> _repo;
            
            if(db.TestMode){
                CustomerPassword.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<CustomerPassword>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<CustomerPassword> GetRepo(){
            return GetRepo("","");
        }
        
        public static CustomerPassword SingleOrDefault(Expression<Func<CustomerPassword, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            CustomerPassword single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static CustomerPassword SingleOrDefault(Expression<Func<CustomerPassword, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            CustomerPassword single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<CustomerPassword, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<CustomerPassword, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<CustomerPassword> Find(Expression<Func<CustomerPassword, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<CustomerPassword> Find(Expression<Func<CustomerPassword, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<CustomerPassword> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<CustomerPassword> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<CustomerPassword> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<CustomerPassword> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<CustomerPassword> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<CustomerPassword> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Password.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(CustomerPassword)){
                CustomerPassword compare=(CustomerPassword)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Password.ToString();
                    }

        public string DescriptorColumn() {
            return "Password";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Password";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Customer> Customers
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerId;
        public int CustomerId
        {
            get { return _CustomerId; }
            set
            {
                if(_CustomerId!=value){
                    _CustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Password;
        public string Password
        {
            get { return _Password; }
            set
            {
                if(_Password!=value){
                    _Password=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Password");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PasswordFormatId;
        public int PasswordFormatId
        {
            get { return _PasswordFormatId; }
            set
            {
                if(_PasswordFormatId!=value){
                    _PasswordFormatId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PasswordFormatId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _PasswordSalt;
        public string PasswordSalt
        {
            get { return _PasswordSalt; }
            set
            {
                if(_PasswordSalt!=value){
                    _PasswordSalt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PasswordSalt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<CustomerPassword, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_C_ProductOverride table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_C_ProductOverride: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_C_ProductOverride> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_C_ProductOverride>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_C_ProductOverride> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_C_ProductOverride item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_C_ProductOverride item=new SS_C_ProductOverride();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_C_ProductOverride> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_C_ProductOverride(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_C_ProductOverride.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_C_ProductOverride>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_C_ProductOverride(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_C_ProductOverride(Expression<Func<SS_C_ProductOverride, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_C_ProductOverride> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_C_ProductOverride> _repo;
            
            if(db.TestMode){
                SS_C_ProductOverride.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_C_ProductOverride>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_C_ProductOverride> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_C_ProductOverride SingleOrDefault(Expression<Func<SS_C_ProductOverride, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_C_ProductOverride single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_C_ProductOverride SingleOrDefault(Expression<Func<SS_C_ProductOverride, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_C_ProductOverride single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_C_ProductOverride, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_C_ProductOverride, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_C_ProductOverride> Find(Expression<Func<SS_C_ProductOverride, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_C_ProductOverride> Find(Expression<Func<SS_C_ProductOverride, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_C_ProductOverride> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_C_ProductOverride> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_C_ProductOverride> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_C_ProductOverride> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_C_ProductOverride> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_C_ProductOverride> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ConditionId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_C_ProductOverride)){
                SS_C_ProductOverride compare=(SS_C_ProductOverride)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.ConditionId.ToString();
                    }

        public string DescriptorColumn() {
            return "ConditionId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "ConditionId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SS_C_Condition> SS_C_Conditions
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_C_Condition.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ConditionId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ConditionId;
        public int ConditionId
        {
            get { return _ConditionId; }
            set
            {
                if(_ConditionId!=value){
                    _ConditionId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ConditionId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductId;
        public int ProductId
        {
            get { return _ProductId; }
            set
            {
                if(_ProductId!=value){
                    _ProductId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductState;
        public int ProductState
        {
            get { return _ProductState; }
            set
            {
                if(_ProductState!=value){
                    _ProductState=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductState");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_C_ProductOverride, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the OrderItem table in the AliexpressDB Database.
    /// </summary>
    public partial class OrderItem: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<OrderItem> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<OrderItem>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<OrderItem> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(OrderItem item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                OrderItem item=new OrderItem();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<OrderItem> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public OrderItem(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                OrderItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<OrderItem>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public OrderItem(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public OrderItem(Expression<Func<OrderItem, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<OrderItem> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<OrderItem> _repo;
            
            if(db.TestMode){
                OrderItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<OrderItem>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<OrderItem> GetRepo(){
            return GetRepo("","");
        }
        
        public static OrderItem SingleOrDefault(Expression<Func<OrderItem, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            OrderItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static OrderItem SingleOrDefault(Expression<Func<OrderItem, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            OrderItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<OrderItem, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<OrderItem, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<OrderItem> Find(Expression<Func<OrderItem, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<OrderItem> Find(Expression<Func<OrderItem, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<OrderItem> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<OrderItem> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<OrderItem> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<OrderItem> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<OrderItem> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<OrderItem> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.AttributeDescription.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(OrderItem)){
                OrderItem compare=(OrderItem)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.AttributeDescription.ToString();
                    }

        public string DescriptorColumn() {
            return "AttributeDescription";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "AttributeDescription";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Order> Orders
        {
            get
            {
                
                  var repo=AliexpressDBA.Order.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _OrderId
                       select items;
            }
        }

        public IQueryable<GiftCard> GiftCards
        {
            get
            {
                
                  var repo=AliexpressDBA.GiftCard.GetRepo();
                  return from items in repo.GetAll()
                       where items.PurchasedWithOrderItemId == _Id
                       select items;
            }
        }

        public IQueryable<Product> Products
        {
            get
            {
                
                  var repo=AliexpressDBA.Product.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ProductId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid _OrderItemGuid;
        public Guid OrderItemGuid
        {
            get { return _OrderItemGuid; }
            set
            {
                if(_OrderItemGuid!=value){
                    _OrderItemGuid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderItemGuid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderId;
        public int OrderId
        {
            get { return _OrderId; }
            set
            {
                if(_OrderId!=value){
                    _OrderId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductId;
        public int ProductId
        {
            get { return _ProductId; }
            set
            {
                if(_ProductId!=value){
                    _ProductId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Quantity;
        public int Quantity
        {
            get { return _Quantity; }
            set
            {
                if(_Quantity!=value){
                    _Quantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Quantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _UnitPriceInclTax;
        public decimal UnitPriceInclTax
        {
            get { return _UnitPriceInclTax; }
            set
            {
                if(_UnitPriceInclTax!=value){
                    _UnitPriceInclTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UnitPriceInclTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _UnitPriceExclTax;
        public decimal UnitPriceExclTax
        {
            get { return _UnitPriceExclTax; }
            set
            {
                if(_UnitPriceExclTax!=value){
                    _UnitPriceExclTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UnitPriceExclTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _PriceInclTax;
        public decimal PriceInclTax
        {
            get { return _PriceInclTax; }
            set
            {
                if(_PriceInclTax!=value){
                    _PriceInclTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PriceInclTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _PriceExclTax;
        public decimal PriceExclTax
        {
            get { return _PriceExclTax; }
            set
            {
                if(_PriceExclTax!=value){
                    _PriceExclTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PriceExclTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _DiscountAmountInclTax;
        public decimal DiscountAmountInclTax
        {
            get { return _DiscountAmountInclTax; }
            set
            {
                if(_DiscountAmountInclTax!=value){
                    _DiscountAmountInclTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DiscountAmountInclTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _DiscountAmountExclTax;
        public decimal DiscountAmountExclTax
        {
            get { return _DiscountAmountExclTax; }
            set
            {
                if(_DiscountAmountExclTax!=value){
                    _DiscountAmountExclTax=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DiscountAmountExclTax");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OriginalProductCost;
        public decimal OriginalProductCost
        {
            get { return _OriginalProductCost; }
            set
            {
                if(_OriginalProductCost!=value){
                    _OriginalProductCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OriginalProductCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AttributeDescription;
        public string AttributeDescription
        {
            get { return _AttributeDescription; }
            set
            {
                if(_AttributeDescription!=value){
                    _AttributeDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AttributeDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AttributesXml;
        public string AttributesXml
        {
            get { return _AttributesXml; }
            set
            {
                if(_AttributesXml!=value){
                    _AttributesXml=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AttributesXml");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DownloadCount;
        public int DownloadCount
        {
            get { return _DownloadCount; }
            set
            {
                if(_DownloadCount!=value){
                    _DownloadCount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DownloadCount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsDownloadActivated;
        public bool IsDownloadActivated
        {
            get { return _IsDownloadActivated; }
            set
            {
                if(_IsDownloadActivated!=value){
                    _IsDownloadActivated=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDownloadActivated");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _LicenseDownloadId;
        public int? LicenseDownloadId
        {
            get { return _LicenseDownloadId; }
            set
            {
                if(_LicenseDownloadId!=value){
                    _LicenseDownloadId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LicenseDownloadId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal? _ItemWeight;
        public decimal? ItemWeight
        {
            get { return _ItemWeight; }
            set
            {
                if(_ItemWeight!=value){
                    _ItemWeight=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ItemWeight");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _RentalStartDateUtc;
        public DateTime? RentalStartDateUtc
        {
            get { return _RentalStartDateUtc; }
            set
            {
                if(_RentalStartDateUtc!=value){
                    _RentalStartDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RentalStartDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _RentalEndDateUtc;
        public DateTime? RentalEndDateUtc
        {
            get { return _RentalEndDateUtc; }
            set
            {
                if(_RentalEndDateUtc!=value){
                    _RentalEndDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RentalEndDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<OrderItem, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ScheduleTask table in the AliexpressDB Database.
    /// </summary>
    public partial class ScheduleTask: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ScheduleTask> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ScheduleTask>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ScheduleTask> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ScheduleTask item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ScheduleTask item=new ScheduleTask();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ScheduleTask> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ScheduleTask(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ScheduleTask.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ScheduleTask>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ScheduleTask(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ScheduleTask(Expression<Func<ScheduleTask, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ScheduleTask> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ScheduleTask> _repo;
            
            if(db.TestMode){
                ScheduleTask.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ScheduleTask>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ScheduleTask> GetRepo(){
            return GetRepo("","");
        }
        
        public static ScheduleTask SingleOrDefault(Expression<Func<ScheduleTask, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ScheduleTask single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ScheduleTask SingleOrDefault(Expression<Func<ScheduleTask, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ScheduleTask single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ScheduleTask, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ScheduleTask, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ScheduleTask> Find(Expression<Func<ScheduleTask, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ScheduleTask> Find(Expression<Func<ScheduleTask, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ScheduleTask> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ScheduleTask> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ScheduleTask> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ScheduleTask> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ScheduleTask> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ScheduleTask> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ScheduleTask)){
                ScheduleTask compare=(ScheduleTask)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Seconds;
        public int Seconds
        {
            get { return _Seconds; }
            set
            {
                if(_Seconds!=value){
                    _Seconds=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Seconds");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Type;
        public string Type
        {
            get { return _Type; }
            set
            {
                if(_Type!=value){
                    _Type=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Type");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Enabled;
        public bool Enabled
        {
            get { return _Enabled; }
            set
            {
                if(_Enabled!=value){
                    _Enabled=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Enabled");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _StopOnError;
        public bool StopOnError
        {
            get { return _StopOnError; }
            set
            {
                if(_StopOnError!=value){
                    _StopOnError=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StopOnError");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _LeasedByMachineName;
        public string LeasedByMachineName
        {
            get { return _LeasedByMachineName; }
            set
            {
                if(_LeasedByMachineName!=value){
                    _LeasedByMachineName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LeasedByMachineName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _LeasedUntilUtc;
        public DateTime? LeasedUntilUtc
        {
            get { return _LeasedUntilUtc; }
            set
            {
                if(_LeasedUntilUtc!=value){
                    _LeasedUntilUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LeasedUntilUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _LastStartUtc;
        public DateTime? LastStartUtc
        {
            get { return _LastStartUtc; }
            set
            {
                if(_LastStartUtc!=value){
                    _LastStartUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastStartUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _LastEndUtc;
        public DateTime? LastEndUtc
        {
            get { return _LastEndUtc; }
            set
            {
                if(_LastEndUtc!=value){
                    _LastEndUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastEndUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _LastSuccessUtc;
        public DateTime? LastSuccessUtc
        {
            get { return _LastSuccessUtc; }
            set
            {
                if(_LastSuccessUtc!=value){
                    _LastSuccessUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LastSuccessUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ScheduleTask, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the CustomerRole table in the AliexpressDB Database.
    /// </summary>
    public partial class CustomerRole: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<CustomerRole> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<CustomerRole>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<CustomerRole> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(CustomerRole item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                CustomerRole item=new CustomerRole();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<CustomerRole> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public CustomerRole(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                CustomerRole.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<CustomerRole>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public CustomerRole(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public CustomerRole(Expression<Func<CustomerRole, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<CustomerRole> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<CustomerRole> _repo;
            
            if(db.TestMode){
                CustomerRole.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<CustomerRole>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<CustomerRole> GetRepo(){
            return GetRepo("","");
        }
        
        public static CustomerRole SingleOrDefault(Expression<Func<CustomerRole, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            CustomerRole single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static CustomerRole SingleOrDefault(Expression<Func<CustomerRole, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            CustomerRole single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<CustomerRole, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<CustomerRole, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<CustomerRole> Find(Expression<Func<CustomerRole, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<CustomerRole> Find(Expression<Func<CustomerRole, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<CustomerRole> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<CustomerRole> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<CustomerRole> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<CustomerRole> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<CustomerRole> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<CustomerRole> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(CustomerRole)){
                CustomerRole compare=(CustomerRole)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<AclRecord> AclRecords
        {
            get
            {
                
                  var repo=AliexpressDBA.AclRecord.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerRoleId == _Id
                       select items;
            }
        }

        public IQueryable<Customer_CustomerRole_Mapping> Customer_CustomerRole_Mappings
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer_CustomerRole_Mapping.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerRole_Id == _Id
                       select items;
            }
        }

        public IQueryable<PermissionRecord_Role_Mapping> PermissionRecord_Role_Mappings
        {
            get
            {
                
                  var repo=AliexpressDBA.PermissionRecord_Role_Mapping.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerRole_Id == _Id
                       select items;
            }
        }

        public IQueryable<TierPrice> TierPrices
        {
            get
            {
                
                  var repo=AliexpressDBA.TierPrice.GetRepo();
                  return from items in repo.GetAll()
                       where items.CustomerRoleId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _FreeShipping;
        public bool FreeShipping
        {
            get { return _FreeShipping; }
            set
            {
                if(_FreeShipping!=value){
                    _FreeShipping=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FreeShipping");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _TaxExempt;
        public bool TaxExempt
        {
            get { return _TaxExempt; }
            set
            {
                if(_TaxExempt!=value){
                    _TaxExempt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TaxExempt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Active;
        public bool Active
        {
            get { return _Active; }
            set
            {
                if(_Active!=value){
                    _Active=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Active");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsSystemRole;
        public bool IsSystemRole
        {
            get { return _IsSystemRole; }
            set
            {
                if(_IsSystemRole!=value){
                    _IsSystemRole=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsSystemRole");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SystemName;
        public string SystemName
        {
            get { return _SystemName; }
            set
            {
                if(_SystemName!=value){
                    _SystemName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SystemName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _EnablePasswordLifetime;
        public bool EnablePasswordLifetime
        {
            get { return _EnablePasswordLifetime; }
            set
            {
                if(_EnablePasswordLifetime!=value){
                    _EnablePasswordLifetime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EnablePasswordLifetime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PurchasedWithProductId;
        public int PurchasedWithProductId
        {
            get { return _PurchasedWithProductId; }
            set
            {
                if(_PurchasedWithProductId!=value){
                    _PurchasedWithProductId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PurchasedWithProductId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<CustomerRole, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the OrderNote table in the AliexpressDB Database.
    /// </summary>
    public partial class OrderNote: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<OrderNote> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<OrderNote>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<OrderNote> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(OrderNote item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                OrderNote item=new OrderNote();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<OrderNote> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public OrderNote(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                OrderNote.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<OrderNote>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public OrderNote(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public OrderNote(Expression<Func<OrderNote, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<OrderNote> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<OrderNote> _repo;
            
            if(db.TestMode){
                OrderNote.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<OrderNote>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<OrderNote> GetRepo(){
            return GetRepo("","");
        }
        
        public static OrderNote SingleOrDefault(Expression<Func<OrderNote, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            OrderNote single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static OrderNote SingleOrDefault(Expression<Func<OrderNote, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            OrderNote single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<OrderNote, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<OrderNote, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<OrderNote> Find(Expression<Func<OrderNote, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<OrderNote> Find(Expression<Func<OrderNote, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<OrderNote> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<OrderNote> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<OrderNote> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<OrderNote> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<OrderNote> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<OrderNote> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Note.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(OrderNote)){
                OrderNote compare=(OrderNote)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Note.ToString();
                    }

        public string DescriptorColumn() {
            return "Note";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Note";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Order> Orders
        {
            get
            {
                
                  var repo=AliexpressDBA.Order.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _OrderId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderId;
        public int OrderId
        {
            get { return _OrderId; }
            set
            {
                if(_OrderId!=value){
                    _OrderId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Note;
        public string Note
        {
            get { return _Note; }
            set
            {
                if(_Note!=value){
                    _Note=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Note");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DownloadId;
        public int DownloadId
        {
            get { return _DownloadId; }
            set
            {
                if(_DownloadId!=value){
                    _DownloadId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DownloadId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _DisplayToCustomer;
        public bool DisplayToCustomer
        {
            get { return _DisplayToCustomer; }
            set
            {
                if(_DisplayToCustomer!=value){
                    _DisplayToCustomer=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayToCustomer");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<OrderNote, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SearchTerm table in the AliexpressDB Database.
    /// </summary>
    public partial class SearchTerm: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SearchTerm> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SearchTerm>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SearchTerm> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SearchTerm item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SearchTerm item=new SearchTerm();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SearchTerm> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SearchTerm(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SearchTerm.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SearchTerm>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SearchTerm(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SearchTerm(Expression<Func<SearchTerm, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SearchTerm> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SearchTerm> _repo;
            
            if(db.TestMode){
                SearchTerm.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SearchTerm>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SearchTerm> GetRepo(){
            return GetRepo("","");
        }
        
        public static SearchTerm SingleOrDefault(Expression<Func<SearchTerm, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SearchTerm single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SearchTerm SingleOrDefault(Expression<Func<SearchTerm, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SearchTerm single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SearchTerm, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SearchTerm, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SearchTerm> Find(Expression<Func<SearchTerm, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SearchTerm> Find(Expression<Func<SearchTerm, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SearchTerm> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SearchTerm> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SearchTerm> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SearchTerm> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SearchTerm> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SearchTerm> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Keyword.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SearchTerm)){
                SearchTerm compare=(SearchTerm)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Keyword.ToString();
                    }

        public string DescriptorColumn() {
            return "Keyword";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Keyword";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Keyword;
        public string Keyword
        {
            get { return _Keyword; }
            set
            {
                if(_Keyword!=value){
                    _Keyword=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Keyword");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StoreId;
        public int StoreId
        {
            get { return _StoreId; }
            set
            {
                if(_StoreId!=value){
                    _StoreId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StoreId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Count;
        public int Count
        {
            get { return _Count; }
            set
            {
                if(_Count!=value){
                    _Count=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Count");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SearchTerm, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the DeliveryDate table in the AliexpressDB Database.
    /// </summary>
    public partial class DeliveryDate: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<DeliveryDate> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<DeliveryDate>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<DeliveryDate> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(DeliveryDate item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                DeliveryDate item=new DeliveryDate();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<DeliveryDate> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public DeliveryDate(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                DeliveryDate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<DeliveryDate>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public DeliveryDate(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public DeliveryDate(Expression<Func<DeliveryDate, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<DeliveryDate> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<DeliveryDate> _repo;
            
            if(db.TestMode){
                DeliveryDate.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<DeliveryDate>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<DeliveryDate> GetRepo(){
            return GetRepo("","");
        }
        
        public static DeliveryDate SingleOrDefault(Expression<Func<DeliveryDate, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            DeliveryDate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static DeliveryDate SingleOrDefault(Expression<Func<DeliveryDate, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            DeliveryDate single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<DeliveryDate, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<DeliveryDate, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<DeliveryDate> Find(Expression<Func<DeliveryDate, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<DeliveryDate> Find(Expression<Func<DeliveryDate, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<DeliveryDate> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<DeliveryDate> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<DeliveryDate> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<DeliveryDate> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<DeliveryDate> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<DeliveryDate> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(DeliveryDate)){
                DeliveryDate compare=(DeliveryDate)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<DeliveryDate, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the PermissionRecord table in the AliexpressDB Database.
    /// </summary>
    public partial class PermissionRecord: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<PermissionRecord> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<PermissionRecord>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<PermissionRecord> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(PermissionRecord item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                PermissionRecord item=new PermissionRecord();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<PermissionRecord> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public PermissionRecord(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                PermissionRecord.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<PermissionRecord>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public PermissionRecord(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public PermissionRecord(Expression<Func<PermissionRecord, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<PermissionRecord> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<PermissionRecord> _repo;
            
            if(db.TestMode){
                PermissionRecord.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<PermissionRecord>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<PermissionRecord> GetRepo(){
            return GetRepo("","");
        }
        
        public static PermissionRecord SingleOrDefault(Expression<Func<PermissionRecord, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            PermissionRecord single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static PermissionRecord SingleOrDefault(Expression<Func<PermissionRecord, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            PermissionRecord single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<PermissionRecord, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<PermissionRecord, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<PermissionRecord> Find(Expression<Func<PermissionRecord, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<PermissionRecord> Find(Expression<Func<PermissionRecord, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<PermissionRecord> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<PermissionRecord> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<PermissionRecord> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<PermissionRecord> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<PermissionRecord> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<PermissionRecord> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(PermissionRecord)){
                PermissionRecord compare=(PermissionRecord)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<PermissionRecord_Role_Mapping> PermissionRecord_Role_Mappings
        {
            get
            {
                
                  var repo=AliexpressDBA.PermissionRecord_Role_Mapping.GetRepo();
                  return from items in repo.GetAll()
                       where items.PermissionRecord_Id == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SystemName;
        public string SystemName
        {
            get { return _SystemName; }
            set
            {
                if(_SystemName!=value){
                    _SystemName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SystemName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Category;
        public string Category
        {
            get { return _Category; }
            set
            {
                if(_Category!=value){
                    _Category=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Category");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<PermissionRecord, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_MAP_EntityMapping table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_MAP_EntityMapping: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_MAP_EntityMapping> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_MAP_EntityMapping>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_MAP_EntityMapping> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_MAP_EntityMapping item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_MAP_EntityMapping item=new SS_MAP_EntityMapping();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_MAP_EntityMapping> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_MAP_EntityMapping(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_MAP_EntityMapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_MAP_EntityMapping>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_MAP_EntityMapping(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_MAP_EntityMapping(Expression<Func<SS_MAP_EntityMapping, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_MAP_EntityMapping> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_MAP_EntityMapping> _repo;
            
            if(db.TestMode){
                SS_MAP_EntityMapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_MAP_EntityMapping>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_MAP_EntityMapping> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_MAP_EntityMapping SingleOrDefault(Expression<Func<SS_MAP_EntityMapping, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_MAP_EntityMapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_MAP_EntityMapping SingleOrDefault(Expression<Func<SS_MAP_EntityMapping, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_MAP_EntityMapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_MAP_EntityMapping, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_MAP_EntityMapping, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_MAP_EntityMapping> Find(Expression<Func<SS_MAP_EntityMapping, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_MAP_EntityMapping> Find(Expression<Func<SS_MAP_EntityMapping, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_MAP_EntityMapping> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_MAP_EntityMapping> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_MAP_EntityMapping> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_MAP_EntityMapping> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_MAP_EntityMapping> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_MAP_EntityMapping> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.EntityType.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_MAP_EntityMapping)){
                SS_MAP_EntityMapping compare=(SS_MAP_EntityMapping)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.EntityType.ToString();
                    }

        public string DescriptorColumn() {
            return "EntityType";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "EntityType";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _EntityType;
        public int EntityType
        {
            get { return _EntityType; }
            set
            {
                if(_EntityType!=value){
                    _EntityType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _EntityId;
        public int EntityId
        {
            get { return _EntityId; }
            set
            {
                if(_EntityId!=value){
                    _EntityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _MappedEntityId;
        public int MappedEntityId
        {
            get { return _MappedEntityId; }
            set
            {
                if(_MappedEntityId!=value){
                    _MappedEntityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MappedEntityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _MappingType;
        public int MappingType
        {
            get { return _MappingType; }
            set
            {
                if(_MappingType!=value){
                    _MappingType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MappingType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_MAP_EntityMapping, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Setting table in the AliexpressDB Database.
    /// </summary>
    public partial class Setting: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Setting> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Setting>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Setting> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Setting item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Setting item=new Setting();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Setting> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Setting(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Setting.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Setting>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Setting(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Setting(Expression<Func<Setting, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Setting> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Setting> _repo;
            
            if(db.TestMode){
                Setting.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Setting>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Setting> GetRepo(){
            return GetRepo("","");
        }
        
        public static Setting SingleOrDefault(Expression<Func<Setting, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Setting single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Setting SingleOrDefault(Expression<Func<Setting, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Setting single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Setting, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Setting, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Setting> Find(Expression<Func<Setting, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Setting> Find(Expression<Func<Setting, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Setting> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Setting> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Setting> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Setting> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Setting> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Setting> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Setting)){
                Setting compare=(Setting)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Value;
        public string Value
        {
            get { return _Value; }
            set
            {
                if(_Value!=value){
                    _Value=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Value");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StoreId;
        public int StoreId
        {
            get { return _StoreId; }
            set
            {
                if(_StoreId!=value){
                    _StoreId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StoreId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Setting, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Discount table in the AliexpressDB Database.
    /// </summary>
    public partial class Discount: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Discount> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Discount>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Discount> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Discount item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Discount item=new Discount();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Discount> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Discount(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Discount.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Discount>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Discount(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Discount(Expression<Func<Discount, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Discount> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Discount> _repo;
            
            if(db.TestMode){
                Discount.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Discount>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Discount> GetRepo(){
            return GetRepo("","");
        }
        
        public static Discount SingleOrDefault(Expression<Func<Discount, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Discount single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Discount SingleOrDefault(Expression<Func<Discount, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Discount single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Discount, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Discount, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Discount> Find(Expression<Func<Discount, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Discount> Find(Expression<Func<Discount, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Discount> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Discount> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Discount> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Discount> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Discount> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Discount> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Discount)){
                Discount compare=(Discount)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Discount_AppliedToCategory> Discount_AppliedToCategories
        {
            get
            {
                
                  var repo=AliexpressDBA.Discount_AppliedToCategory.GetRepo();
                  return from items in repo.GetAll()
                       where items.Discount_Id == _Id
                       select items;
            }
        }

        public IQueryable<Discount_AppliedToManufacturer> Discount_AppliedToManufacturers
        {
            get
            {
                
                  var repo=AliexpressDBA.Discount_AppliedToManufacturer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Discount_Id == _Id
                       select items;
            }
        }

        public IQueryable<Discount_AppliedToProduct> Discount_AppliedToProducts
        {
            get
            {
                
                  var repo=AliexpressDBA.Discount_AppliedToProduct.GetRepo();
                  return from items in repo.GetAll()
                       where items.Discount_Id == _Id
                       select items;
            }
        }

        public IQueryable<DiscountRequirement> DiscountRequirements
        {
            get
            {
                
                  var repo=AliexpressDBA.DiscountRequirement.GetRepo();
                  return from items in repo.GetAll()
                       where items.DiscountId == _Id
                       select items;
            }
        }

        public IQueryable<DiscountUsageHistory> DiscountUsageHistories
        {
            get
            {
                
                  var repo=AliexpressDBA.DiscountUsageHistory.GetRepo();
                  return from items in repo.GetAll()
                       where items.DiscountId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DiscountTypeId;
        public int DiscountTypeId
        {
            get { return _DiscountTypeId; }
            set
            {
                if(_DiscountTypeId!=value){
                    _DiscountTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DiscountTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _UsePercentage;
        public bool UsePercentage
        {
            get { return _UsePercentage; }
            set
            {
                if(_UsePercentage!=value){
                    _UsePercentage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UsePercentage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _DiscountPercentage;
        public decimal DiscountPercentage
        {
            get { return _DiscountPercentage; }
            set
            {
                if(_DiscountPercentage!=value){
                    _DiscountPercentage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DiscountPercentage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _DiscountAmount;
        public decimal DiscountAmount
        {
            get { return _DiscountAmount; }
            set
            {
                if(_DiscountAmount!=value){
                    _DiscountAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DiscountAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal? _MaximumDiscountAmount;
        public decimal? MaximumDiscountAmount
        {
            get { return _MaximumDiscountAmount; }
            set
            {
                if(_MaximumDiscountAmount!=value){
                    _MaximumDiscountAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MaximumDiscountAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _StartDateUtc;
        public DateTime? StartDateUtc
        {
            get { return _StartDateUtc; }
            set
            {
                if(_StartDateUtc!=value){
                    _StartDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StartDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _EndDateUtc;
        public DateTime? EndDateUtc
        {
            get { return _EndDateUtc; }
            set
            {
                if(_EndDateUtc!=value){
                    _EndDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EndDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _RequiresCouponCode;
        public bool RequiresCouponCode
        {
            get { return _RequiresCouponCode; }
            set
            {
                if(_RequiresCouponCode!=value){
                    _RequiresCouponCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RequiresCouponCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CouponCode;
        public string CouponCode
        {
            get { return _CouponCode; }
            set
            {
                if(_CouponCode!=value){
                    _CouponCode=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CouponCode");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsCumulative;
        public bool IsCumulative
        {
            get { return _IsCumulative; }
            set
            {
                if(_IsCumulative!=value){
                    _IsCumulative=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsCumulative");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DiscountLimitationId;
        public int DiscountLimitationId
        {
            get { return _DiscountLimitationId; }
            set
            {
                if(_DiscountLimitationId!=value){
                    _DiscountLimitationId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DiscountLimitationId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _LimitationTimes;
        public int LimitationTimes
        {
            get { return _LimitationTimes; }
            set
            {
                if(_LimitationTimes!=value){
                    _LimitationTimes=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LimitationTimes");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MaximumDiscountedQuantity;
        public int? MaximumDiscountedQuantity
        {
            get { return _MaximumDiscountedQuantity; }
            set
            {
                if(_MaximumDiscountedQuantity!=value){
                    _MaximumDiscountedQuantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MaximumDiscountedQuantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _AppliedToSubCategories;
        public bool AppliedToSubCategories
        {
            get { return _AppliedToSubCategories; }
            set
            {
                if(_AppliedToSubCategories!=value){
                    _AppliedToSubCategories=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AppliedToSubCategories");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Discount, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the PermissionRecord_Role_Mapping table in the AliexpressDB Database.
    /// </summary>
    public partial class PermissionRecord_Role_Mapping: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<PermissionRecord_Role_Mapping> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<PermissionRecord_Role_Mapping>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<PermissionRecord_Role_Mapping> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(PermissionRecord_Role_Mapping item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                PermissionRecord_Role_Mapping item=new PermissionRecord_Role_Mapping();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<PermissionRecord_Role_Mapping> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public PermissionRecord_Role_Mapping(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                PermissionRecord_Role_Mapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<PermissionRecord_Role_Mapping>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public PermissionRecord_Role_Mapping(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public PermissionRecord_Role_Mapping(Expression<Func<PermissionRecord_Role_Mapping, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<PermissionRecord_Role_Mapping> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<PermissionRecord_Role_Mapping> _repo;
            
            if(db.TestMode){
                PermissionRecord_Role_Mapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<PermissionRecord_Role_Mapping>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<PermissionRecord_Role_Mapping> GetRepo(){
            return GetRepo("","");
        }
        
        public static PermissionRecord_Role_Mapping SingleOrDefault(Expression<Func<PermissionRecord_Role_Mapping, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            PermissionRecord_Role_Mapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static PermissionRecord_Role_Mapping SingleOrDefault(Expression<Func<PermissionRecord_Role_Mapping, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            PermissionRecord_Role_Mapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<PermissionRecord_Role_Mapping, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<PermissionRecord_Role_Mapping, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<PermissionRecord_Role_Mapping> Find(Expression<Func<PermissionRecord_Role_Mapping, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<PermissionRecord_Role_Mapping> Find(Expression<Func<PermissionRecord_Role_Mapping, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<PermissionRecord_Role_Mapping> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<PermissionRecord_Role_Mapping> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<PermissionRecord_Role_Mapping> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<PermissionRecord_Role_Mapping> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<PermissionRecord_Role_Mapping> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<PermissionRecord_Role_Mapping> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "CustomerRole_Id";
        }

        public object KeyValue()
        {
            return this.CustomerRole_Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.CustomerRole_Id.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(PermissionRecord_Role_Mapping)){
                PermissionRecord_Role_Mapping compare=(PermissionRecord_Role_Mapping)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.CustomerRole_Id;
        }
        
        public string DescriptorValue()
        {
                            return this.CustomerRole_Id.ToString();
                    }

        public string DescriptorColumn() {
            return "CustomerRole_Id";
        }
        public static string GetKeyColumn()
        {
            return "CustomerRole_Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "CustomerRole_Id";
        }
        
        #region ' Foreign Keys '
        public IQueryable<CustomerRole> CustomerRoles
        {
            get
            {
                
                  var repo=AliexpressDBA.CustomerRole.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerRole_Id
                       select items;
            }
        }

        public IQueryable<PermissionRecord> PermissionRecords
        {
            get
            {
                
                  var repo=AliexpressDBA.PermissionRecord.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _PermissionRecord_Id
                       select items;
            }
        }

        #endregion
        

        int _PermissionRecord_Id;
        public int PermissionRecord_Id
        {
            get { return _PermissionRecord_Id; }
            set
            {
                if(_PermissionRecord_Id!=value){
                    _PermissionRecord_Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PermissionRecord_Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerRole_Id;
        public int CustomerRole_Id
        {
            get { return _CustomerRole_Id; }
            set
            {
                if(_CustomerRole_Id!=value){
                    _CustomerRole_Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerRole_Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<PermissionRecord_Role_Mapping, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_MAP_EntityWidgetMapping table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_MAP_EntityWidgetMapping: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_MAP_EntityWidgetMapping> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_MAP_EntityWidgetMapping>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_MAP_EntityWidgetMapping> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_MAP_EntityWidgetMapping item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_MAP_EntityWidgetMapping item=new SS_MAP_EntityWidgetMapping();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_MAP_EntityWidgetMapping> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_MAP_EntityWidgetMapping(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_MAP_EntityWidgetMapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_MAP_EntityWidgetMapping>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_MAP_EntityWidgetMapping(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_MAP_EntityWidgetMapping(Expression<Func<SS_MAP_EntityWidgetMapping, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_MAP_EntityWidgetMapping> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_MAP_EntityWidgetMapping> _repo;
            
            if(db.TestMode){
                SS_MAP_EntityWidgetMapping.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_MAP_EntityWidgetMapping>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_MAP_EntityWidgetMapping> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_MAP_EntityWidgetMapping SingleOrDefault(Expression<Func<SS_MAP_EntityWidgetMapping, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_MAP_EntityWidgetMapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_MAP_EntityWidgetMapping SingleOrDefault(Expression<Func<SS_MAP_EntityWidgetMapping, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_MAP_EntityWidgetMapping single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_MAP_EntityWidgetMapping, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_MAP_EntityWidgetMapping, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_MAP_EntityWidgetMapping> Find(Expression<Func<SS_MAP_EntityWidgetMapping, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_MAP_EntityWidgetMapping> Find(Expression<Func<SS_MAP_EntityWidgetMapping, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_MAP_EntityWidgetMapping> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_MAP_EntityWidgetMapping> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_MAP_EntityWidgetMapping> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_MAP_EntityWidgetMapping> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_MAP_EntityWidgetMapping> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_MAP_EntityWidgetMapping> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.WidgetZone.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_MAP_EntityWidgetMapping)){
                SS_MAP_EntityWidgetMapping compare=(SS_MAP_EntityWidgetMapping)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.WidgetZone.ToString();
                    }

        public string DescriptorColumn() {
            return "WidgetZone";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "WidgetZone";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _EntityType;
        public int EntityType
        {
            get { return _EntityType; }
            set
            {
                if(_EntityType!=value){
                    _EntityType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _EntityId;
        public int EntityId
        {
            get { return _EntityId; }
            set
            {
                if(_EntityId!=value){
                    _EntityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WidgetZone;
        public string WidgetZone
        {
            get { return _WidgetZone; }
            set
            {
                if(_WidgetZone!=value){
                    _WidgetZone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WidgetZone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_MAP_EntityWidgetMapping, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Shipment table in the AliexpressDB Database.
    /// </summary>
    public partial class Shipment: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Shipment> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Shipment>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Shipment> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Shipment item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Shipment item=new Shipment();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Shipment> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Shipment(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Shipment.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Shipment>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Shipment(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Shipment(Expression<Func<Shipment, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Shipment> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Shipment> _repo;
            
            if(db.TestMode){
                Shipment.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Shipment>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Shipment> GetRepo(){
            return GetRepo("","");
        }
        
        public static Shipment SingleOrDefault(Expression<Func<Shipment, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Shipment single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Shipment SingleOrDefault(Expression<Func<Shipment, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Shipment single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Shipment, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Shipment, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Shipment> Find(Expression<Func<Shipment, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Shipment> Find(Expression<Func<Shipment, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Shipment> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Shipment> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Shipment> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Shipment> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Shipment> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Shipment> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.TrackingNumber.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Shipment)){
                Shipment compare=(Shipment)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.TrackingNumber.ToString();
                    }

        public string DescriptorColumn() {
            return "TrackingNumber";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "TrackingNumber";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Order> Orders
        {
            get
            {
                
                  var repo=AliexpressDBA.Order.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _OrderId
                       select items;
            }
        }

        public IQueryable<ShipmentItem> ShipmentItems
        {
            get
            {
                
                  var repo=AliexpressDBA.ShipmentItem.GetRepo();
                  return from items in repo.GetAll()
                       where items.ShipmentId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderId;
        public int OrderId
        {
            get { return _OrderId; }
            set
            {
                if(_OrderId!=value){
                    _OrderId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TrackingNumber;
        public string TrackingNumber
        {
            get { return _TrackingNumber; }
            set
            {
                if(_TrackingNumber!=value){
                    _TrackingNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TrackingNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal? _TotalWeight;
        public decimal? TotalWeight
        {
            get { return _TotalWeight; }
            set
            {
                if(_TotalWeight!=value){
                    _TotalWeight=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TotalWeight");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _ShippedDateUtc;
        public DateTime? ShippedDateUtc
        {
            get { return _ShippedDateUtc; }
            set
            {
                if(_ShippedDateUtc!=value){
                    _ShippedDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ShippedDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _DeliveryDateUtc;
        public DateTime? DeliveryDateUtc
        {
            get { return _DeliveryDateUtc; }
            set
            {
                if(_DeliveryDateUtc!=value){
                    _DeliveryDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeliveryDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AdminComment;
        public string AdminComment
        {
            get { return _AdminComment; }
            set
            {
                if(_AdminComment!=value){
                    _AdminComment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdminComment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Shipment, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Discount_AppliedToCategories table in the AliexpressDB Database.
    /// </summary>
    public partial class Discount_AppliedToCategory: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Discount_AppliedToCategory> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Discount_AppliedToCategory>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Discount_AppliedToCategory> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Discount_AppliedToCategory item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Discount_AppliedToCategory item=new Discount_AppliedToCategory();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Discount_AppliedToCategory> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Discount_AppliedToCategory(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Discount_AppliedToCategory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Discount_AppliedToCategory>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Discount_AppliedToCategory(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Discount_AppliedToCategory(Expression<Func<Discount_AppliedToCategory, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Discount_AppliedToCategory> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Discount_AppliedToCategory> _repo;
            
            if(db.TestMode){
                Discount_AppliedToCategory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Discount_AppliedToCategory>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Discount_AppliedToCategory> GetRepo(){
            return GetRepo("","");
        }
        
        public static Discount_AppliedToCategory SingleOrDefault(Expression<Func<Discount_AppliedToCategory, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Discount_AppliedToCategory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Discount_AppliedToCategory SingleOrDefault(Expression<Func<Discount_AppliedToCategory, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Discount_AppliedToCategory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Discount_AppliedToCategory, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Discount_AppliedToCategory, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Discount_AppliedToCategory> Find(Expression<Func<Discount_AppliedToCategory, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Discount_AppliedToCategory> Find(Expression<Func<Discount_AppliedToCategory, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Discount_AppliedToCategory> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Discount_AppliedToCategory> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Discount_AppliedToCategory> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Discount_AppliedToCategory> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Discount_AppliedToCategory> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Discount_AppliedToCategory> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Category_Id";
        }

        public object KeyValue()
        {
            return this.Category_Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Category_Id.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Discount_AppliedToCategory)){
                Discount_AppliedToCategory compare=(Discount_AppliedToCategory)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Category_Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Category_Id.ToString();
                    }

        public string DescriptorColumn() {
            return "Category_Id";
        }
        public static string GetKeyColumn()
        {
            return "Category_Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Category_Id";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Category> Categories
        {
            get
            {
                
                  var repo=AliexpressDBA.Category.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _Category_Id
                       select items;
            }
        }

        public IQueryable<Discount> Discounts
        {
            get
            {
                
                  var repo=AliexpressDBA.Discount.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _Discount_Id
                       select items;
            }
        }

        #endregion
        

        int _Discount_Id;
        public int Discount_Id
        {
            get { return _Discount_Id; }
            set
            {
                if(_Discount_Id!=value){
                    _Discount_Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Discount_Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Category_Id;
        public int Category_Id
        {
            get { return _Category_Id; }
            set
            {
                if(_Category_Id!=value){
                    _Category_Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Category_Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Discount_AppliedToCategory, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Picture table in the AliexpressDB Database.
    /// </summary>
    public partial class Picture: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Picture> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Picture>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Picture> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Picture item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Picture item=new Picture();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Picture> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Picture(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Picture.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Picture>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Picture(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Picture(Expression<Func<Picture, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Picture> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Picture> _repo;
            
            if(db.TestMode){
                Picture.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Picture>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Picture> GetRepo(){
            return GetRepo("","");
        }
        
        public static Picture SingleOrDefault(Expression<Func<Picture, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Picture single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Picture SingleOrDefault(Expression<Func<Picture, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Picture single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Picture, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Picture, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Picture> Find(Expression<Func<Picture, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Picture> Find(Expression<Func<Picture, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Picture> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Picture> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Picture> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Picture> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Picture> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Picture> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.MimeType.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Picture)){
                Picture compare=(Picture)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.MimeType.ToString();
                    }

        public string DescriptorColumn() {
            return "MimeType";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "MimeType";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Product_Picture_Mapping> Product_Picture_Mappings
        {
            get
            {
                
                  var repo=AliexpressDBA.Product_Picture_Mapping.GetRepo();
                  return from items in repo.GetAll()
                       where items.PictureId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        byte[] _PictureBinary;
        public byte[] PictureBinary
        {
            get { return _PictureBinary; }
            set
            {
                if(_PictureBinary!=value){
                    _PictureBinary=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PictureBinary");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MimeType;
        public string MimeType
        {
            get { return _MimeType; }
            set
            {
                if(_MimeType!=value){
                    _MimeType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MimeType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SeoFilename;
        public string SeoFilename
        {
            get { return _SeoFilename; }
            set
            {
                if(_SeoFilename!=value){
                    _SeoFilename=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SeoFilename");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AltAttribute;
        public string AltAttribute
        {
            get { return _AltAttribute; }
            set
            {
                if(_AltAttribute!=value){
                    _AltAttribute=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AltAttribute");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TitleAttribute;
        public string TitleAttribute
        {
            get { return _TitleAttribute; }
            set
            {
                if(_TitleAttribute!=value){
                    _TitleAttribute=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TitleAttribute");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }
        
        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Picture, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_S_Schedule table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_S_Schedule: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_S_Schedule> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_S_Schedule>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_S_Schedule> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_S_Schedule item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_S_Schedule item=new SS_S_Schedule();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_S_Schedule> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_S_Schedule(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_S_Schedule.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_S_Schedule>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_S_Schedule(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_S_Schedule(Expression<Func<SS_S_Schedule, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_S_Schedule> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_S_Schedule> _repo;
            
            if(db.TestMode){
                SS_S_Schedule.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_S_Schedule>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_S_Schedule> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_S_Schedule SingleOrDefault(Expression<Func<SS_S_Schedule, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_S_Schedule single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_S_Schedule SingleOrDefault(Expression<Func<SS_S_Schedule, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_S_Schedule single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_S_Schedule, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_S_Schedule, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_S_Schedule> Find(Expression<Func<SS_S_Schedule, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_S_Schedule> Find(Expression<Func<SS_S_Schedule, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_S_Schedule> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_S_Schedule> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_S_Schedule> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_S_Schedule> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_S_Schedule> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_S_Schedule> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.SchedulePatternFromTime.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_S_Schedule)){
                SS_S_Schedule compare=(SS_S_Schedule)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.SchedulePatternFromTime.ToString();
                    }

        public string DescriptorColumn() {
            return "SchedulePatternFromTime";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "SchedulePatternFromTime";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _EntityType;
        public int EntityType
        {
            get { return _EntityType; }
            set
            {
                if(_EntityType!=value){
                    _EntityType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _EntityId;
        public int EntityId
        {
            get { return _EntityId; }
            set
            {
                if(_EntityId!=value){
                    _EntityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _EntityFromDate;
        public DateTime? EntityFromDate
        {
            get { return _EntityFromDate; }
            set
            {
                if(_EntityFromDate!=value){
                    _EntityFromDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityFromDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _EntityToDate;
        public DateTime? EntityToDate
        {
            get { return _EntityToDate; }
            set
            {
                if(_EntityToDate!=value){
                    _EntityToDate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityToDate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SchedulePatternType;
        public int SchedulePatternType
        {
            get { return _SchedulePatternType; }
            set
            {
                if(_SchedulePatternType!=value){
                    _SchedulePatternType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SchedulePatternType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SchedulePatternFromTime;
        public string SchedulePatternFromTime
        {
            get { return _SchedulePatternFromTime; }
            set
            {
                if(_SchedulePatternFromTime!=value){
                    _SchedulePatternFromTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SchedulePatternFromTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SchedulePatternToTime;
        public string SchedulePatternToTime
        {
            get { return _SchedulePatternToTime; }
            set
            {
                if(_SchedulePatternToTime!=value){
                    _SchedulePatternToTime=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SchedulePatternToTime");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ExactDayValue;
        public int? ExactDayValue
        {
            get { return _ExactDayValue; }
            set
            {
                if(_ExactDayValue!=value){
                    _ExactDayValue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExactDayValue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _EveryMonthFromDayValue;
        public int? EveryMonthFromDayValue
        {
            get { return _EveryMonthFromDayValue; }
            set
            {
                if(_EveryMonthFromDayValue!=value){
                    _EveryMonthFromDayValue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EveryMonthFromDayValue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _EveryMonthToDayValue;
        public int? EveryMonthToDayValue
        {
            get { return _EveryMonthToDayValue; }
            set
            {
                if(_EveryMonthToDayValue!=value){
                    _EveryMonthToDayValue=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EveryMonthToDayValue");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_S_Schedule, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ShipmentItem table in the AliexpressDB Database.
    /// </summary>
    public partial class ShipmentItem: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ShipmentItem> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ShipmentItem>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ShipmentItem> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ShipmentItem item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ShipmentItem item=new ShipmentItem();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ShipmentItem> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ShipmentItem(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ShipmentItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ShipmentItem>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ShipmentItem(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ShipmentItem(Expression<Func<ShipmentItem, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ShipmentItem> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ShipmentItem> _repo;
            
            if(db.TestMode){
                ShipmentItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ShipmentItem>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ShipmentItem> GetRepo(){
            return GetRepo("","");
        }
        
        public static ShipmentItem SingleOrDefault(Expression<Func<ShipmentItem, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ShipmentItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ShipmentItem SingleOrDefault(Expression<Func<ShipmentItem, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ShipmentItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ShipmentItem, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ShipmentItem, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ShipmentItem> Find(Expression<Func<ShipmentItem, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ShipmentItem> Find(Expression<Func<ShipmentItem, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ShipmentItem> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ShipmentItem> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ShipmentItem> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ShipmentItem> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ShipmentItem> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ShipmentItem> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.ShipmentId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ShipmentItem)){
                ShipmentItem compare=(ShipmentItem)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.ShipmentId.ToString();
                    }

        public string DescriptorColumn() {
            return "ShipmentId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "ShipmentId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Shipment> Shipments
        {
            get
            {
                
                  var repo=AliexpressDBA.Shipment.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ShipmentId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ShipmentId;
        public int ShipmentId
        {
            get { return _ShipmentId; }
            set
            {
                if(_ShipmentId!=value){
                    _ShipmentId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ShipmentId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderItemId;
        public int OrderItemId
        {
            get { return _OrderItemId; }
            set
            {
                if(_OrderItemId!=value){
                    _OrderItemId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderItemId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Quantity;
        public int Quantity
        {
            get { return _Quantity; }
            set
            {
                if(_Quantity!=value){
                    _Quantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Quantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _WarehouseId;
        public int WarehouseId
        {
            get { return _WarehouseId; }
            set
            {
                if(_WarehouseId!=value){
                    _WarehouseId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WarehouseId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ShipmentItem, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Discount_AppliedToManufacturers table in the AliexpressDB Database.
    /// </summary>
    public partial class Discount_AppliedToManufacturer: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Discount_AppliedToManufacturer> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Discount_AppliedToManufacturer>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Discount_AppliedToManufacturer> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Discount_AppliedToManufacturer item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Discount_AppliedToManufacturer item=new Discount_AppliedToManufacturer();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Discount_AppliedToManufacturer> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Discount_AppliedToManufacturer(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Discount_AppliedToManufacturer.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Discount_AppliedToManufacturer>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Discount_AppliedToManufacturer(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Discount_AppliedToManufacturer(Expression<Func<Discount_AppliedToManufacturer, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Discount_AppliedToManufacturer> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Discount_AppliedToManufacturer> _repo;
            
            if(db.TestMode){
                Discount_AppliedToManufacturer.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Discount_AppliedToManufacturer>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Discount_AppliedToManufacturer> GetRepo(){
            return GetRepo("","");
        }
        
        public static Discount_AppliedToManufacturer SingleOrDefault(Expression<Func<Discount_AppliedToManufacturer, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Discount_AppliedToManufacturer single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Discount_AppliedToManufacturer SingleOrDefault(Expression<Func<Discount_AppliedToManufacturer, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Discount_AppliedToManufacturer single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Discount_AppliedToManufacturer, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Discount_AppliedToManufacturer, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Discount_AppliedToManufacturer> Find(Expression<Func<Discount_AppliedToManufacturer, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Discount_AppliedToManufacturer> Find(Expression<Func<Discount_AppliedToManufacturer, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Discount_AppliedToManufacturer> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Discount_AppliedToManufacturer> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Discount_AppliedToManufacturer> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Discount_AppliedToManufacturer> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Discount_AppliedToManufacturer> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Discount_AppliedToManufacturer> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Discount_Id";
        }

        public object KeyValue()
        {
            return this.Discount_Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Manufacturer_Id.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Discount_AppliedToManufacturer)){
                Discount_AppliedToManufacturer compare=(Discount_AppliedToManufacturer)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Discount_Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Manufacturer_Id.ToString();
                    }

        public string DescriptorColumn() {
            return "Manufacturer_Id";
        }
        public static string GetKeyColumn()
        {
            return "Discount_Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Manufacturer_Id";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Discount> Discounts
        {
            get
            {
                
                  var repo=AliexpressDBA.Discount.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _Discount_Id
                       select items;
            }
        }

        public IQueryable<Manufacturer> Manufacturers
        {
            get
            {
                
                  var repo=AliexpressDBA.Manufacturer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _Manufacturer_Id
                       select items;
            }
        }

        #endregion
        

        int _Discount_Id;
        public int Discount_Id
        {
            get { return _Discount_Id; }
            set
            {
                if(_Discount_Id!=value){
                    _Discount_Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Discount_Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Manufacturer_Id;
        public int Manufacturer_Id
        {
            get { return _Manufacturer_Id; }
            set
            {
                if(_Manufacturer_Id!=value){
                    _Manufacturer_Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Manufacturer_Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Discount_AppliedToManufacturer, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Poll table in the AliexpressDB Database.
    /// </summary>
    public partial class Poll: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Poll> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Poll>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Poll> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Poll item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Poll item=new Poll();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Poll> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Poll(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Poll.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Poll>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Poll(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Poll(Expression<Func<Poll, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Poll> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Poll> _repo;
            
            if(db.TestMode){
                Poll.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Poll>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Poll> GetRepo(){
            return GetRepo("","");
        }
        
        public static Poll SingleOrDefault(Expression<Func<Poll, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Poll single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Poll SingleOrDefault(Expression<Func<Poll, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Poll single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Poll, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Poll, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Poll> Find(Expression<Func<Poll, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Poll> Find(Expression<Func<Poll, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Poll> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Poll> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Poll> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Poll> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Poll> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Poll> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Poll)){
                Poll compare=(Poll)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Language> Languages
        {
            get
            {
                
                  var repo=AliexpressDBA.Language.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _LanguageId
                       select items;
            }
        }

        public IQueryable<PollAnswer> PollAnswers
        {
            get
            {
                
                  var repo=AliexpressDBA.PollAnswer.GetRepo();
                  return from items in repo.GetAll()
                       where items.PollId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _LanguageId;
        public int LanguageId
        {
            get { return _LanguageId; }
            set
            {
                if(_LanguageId!=value){
                    _LanguageId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LanguageId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _SystemKeyword;
        public string SystemKeyword
        {
            get { return _SystemKeyword; }
            set
            {
                if(_SystemKeyword!=value){
                    _SystemKeyword=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SystemKeyword");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Published;
        public bool Published
        {
            get { return _Published; }
            set
            {
                if(_Published!=value){
                    _Published=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Published");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _ShowOnHomePage;
        public bool ShowOnHomePage
        {
            get { return _ShowOnHomePage; }
            set
            {
                if(_ShowOnHomePage!=value){
                    _ShowOnHomePage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ShowOnHomePage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _AllowGuestsToVote;
        public bool AllowGuestsToVote
        {
            get { return _AllowGuestsToVote; }
            set
            {
                if(_AllowGuestsToVote!=value){
                    _AllowGuestsToVote=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AllowGuestsToVote");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _StartDateUtc;
        public DateTime? StartDateUtc
        {
            get { return _StartDateUtc; }
            set
            {
                if(_StartDateUtc!=value){
                    _StartDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StartDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _EndDateUtc;
        public DateTime? EndDateUtc
        {
            get { return _EndDateUtc; }
            set
            {
                if(_EndDateUtc!=value){
                    _EndDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EndDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Poll, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_ES_EntitySetting table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_ES_EntitySetting: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_ES_EntitySetting> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_ES_EntitySetting>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_ES_EntitySetting> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_ES_EntitySetting item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_ES_EntitySetting item=new SS_ES_EntitySetting();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_ES_EntitySetting> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_ES_EntitySetting(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_ES_EntitySetting.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_ES_EntitySetting>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_ES_EntitySetting(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_ES_EntitySetting(Expression<Func<SS_ES_EntitySetting, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_ES_EntitySetting> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_ES_EntitySetting> _repo;
            
            if(db.TestMode){
                SS_ES_EntitySetting.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_ES_EntitySetting>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_ES_EntitySetting> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_ES_EntitySetting SingleOrDefault(Expression<Func<SS_ES_EntitySetting, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_ES_EntitySetting single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_ES_EntitySetting SingleOrDefault(Expression<Func<SS_ES_EntitySetting, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_ES_EntitySetting single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_ES_EntitySetting, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_ES_EntitySetting, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_ES_EntitySetting> Find(Expression<Func<SS_ES_EntitySetting, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_ES_EntitySetting> Find(Expression<Func<SS_ES_EntitySetting, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_ES_EntitySetting> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_ES_EntitySetting> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_ES_EntitySetting> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_ES_EntitySetting> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_ES_EntitySetting> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_ES_EntitySetting> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Key.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_ES_EntitySetting)){
                SS_ES_EntitySetting compare=(SS_ES_EntitySetting)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Key.ToString();
                    }

        public string DescriptorColumn() {
            return "Key";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Key";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _EntityType;
        public int EntityType
        {
            get { return _EntityType; }
            set
            {
                if(_EntityType!=value){
                    _EntityType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _EntityId;
        public int EntityId
        {
            get { return _EntityId; }
            set
            {
                if(_EntityId!=value){
                    _EntityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Key;
        public string Key
        {
            get { return _Key; }
            set
            {
                if(_Key!=value){
                    _Key=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Key");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Value;
        public string Value
        {
            get { return _Value; }
            set
            {
                if(_Value!=value){
                    _Value=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Value");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_ES_EntitySetting, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ShippingMethod table in the AliexpressDB Database.
    /// </summary>
    public partial class ShippingMethod: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ShippingMethod> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ShippingMethod>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ShippingMethod> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ShippingMethod item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ShippingMethod item=new ShippingMethod();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ShippingMethod> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ShippingMethod(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ShippingMethod.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ShippingMethod>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ShippingMethod(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ShippingMethod(Expression<Func<ShippingMethod, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ShippingMethod> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ShippingMethod> _repo;
            
            if(db.TestMode){
                ShippingMethod.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ShippingMethod>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ShippingMethod> GetRepo(){
            return GetRepo("","");
        }
        
        public static ShippingMethod SingleOrDefault(Expression<Func<ShippingMethod, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ShippingMethod single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ShippingMethod SingleOrDefault(Expression<Func<ShippingMethod, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ShippingMethod single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ShippingMethod, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ShippingMethod, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ShippingMethod> Find(Expression<Func<ShippingMethod, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ShippingMethod> Find(Expression<Func<ShippingMethod, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ShippingMethod> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ShippingMethod> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ShippingMethod> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ShippingMethod> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ShippingMethod> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ShippingMethod> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ShippingMethod)){
                ShippingMethod compare=(ShippingMethod)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<ShippingMethodRestriction> ShippingMethodRestrictions
        {
            get
            {
                
                  var repo=AliexpressDBA.ShippingMethodRestriction.GetRepo();
                  return from items in repo.GetAll()
                       where items.ShippingMethod_Id == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Description;
        public string Description
        {
            get { return _Description; }
            set
            {
                if(_Description!=value){
                    _Description=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Description");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ShippingMethod, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Discount_AppliedToProducts table in the AliexpressDB Database.
    /// </summary>
    public partial class Discount_AppliedToProduct: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Discount_AppliedToProduct> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Discount_AppliedToProduct>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Discount_AppliedToProduct> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Discount_AppliedToProduct item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Discount_AppliedToProduct item=new Discount_AppliedToProduct();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Discount_AppliedToProduct> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Discount_AppliedToProduct(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Discount_AppliedToProduct.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Discount_AppliedToProduct>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Discount_AppliedToProduct(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Discount_AppliedToProduct(Expression<Func<Discount_AppliedToProduct, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Discount_AppliedToProduct> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Discount_AppliedToProduct> _repo;
            
            if(db.TestMode){
                Discount_AppliedToProduct.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Discount_AppliedToProduct>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Discount_AppliedToProduct> GetRepo(){
            return GetRepo("","");
        }
        
        public static Discount_AppliedToProduct SingleOrDefault(Expression<Func<Discount_AppliedToProduct, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Discount_AppliedToProduct single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Discount_AppliedToProduct SingleOrDefault(Expression<Func<Discount_AppliedToProduct, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Discount_AppliedToProduct single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Discount_AppliedToProduct, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Discount_AppliedToProduct, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Discount_AppliedToProduct> Find(Expression<Func<Discount_AppliedToProduct, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Discount_AppliedToProduct> Find(Expression<Func<Discount_AppliedToProduct, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Discount_AppliedToProduct> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Discount_AppliedToProduct> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Discount_AppliedToProduct> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Discount_AppliedToProduct> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Discount_AppliedToProduct> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Discount_AppliedToProduct> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Discount_Id";
        }

        public object KeyValue()
        {
            return this.Discount_Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Product_Id.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Discount_AppliedToProduct)){
                Discount_AppliedToProduct compare=(Discount_AppliedToProduct)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Discount_Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Product_Id.ToString();
                    }

        public string DescriptorColumn() {
            return "Product_Id";
        }
        public static string GetKeyColumn()
        {
            return "Discount_Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Product_Id";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Discount> Discounts
        {
            get
            {
                
                  var repo=AliexpressDBA.Discount.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _Discount_Id
                       select items;
            }
        }

        public IQueryable<Product> Products
        {
            get
            {
                
                  var repo=AliexpressDBA.Product.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _Product_Id
                       select items;
            }
        }

        #endregion
        

        int _Discount_Id;
        public int Discount_Id
        {
            get { return _Discount_Id; }
            set
            {
                if(_Discount_Id!=value){
                    _Discount_Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Discount_Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Product_Id;
        public int Product_Id
        {
            get { return _Product_Id; }
            set
            {
                if(_Product_Id!=value){
                    _Product_Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Product_Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Discount_AppliedToProduct, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the PollAnswer table in the AliexpressDB Database.
    /// </summary>
    public partial class PollAnswer: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<PollAnswer> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<PollAnswer>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<PollAnswer> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(PollAnswer item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                PollAnswer item=new PollAnswer();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<PollAnswer> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public PollAnswer(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                PollAnswer.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<PollAnswer>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public PollAnswer(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public PollAnswer(Expression<Func<PollAnswer, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<PollAnswer> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<PollAnswer> _repo;
            
            if(db.TestMode){
                PollAnswer.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<PollAnswer>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<PollAnswer> GetRepo(){
            return GetRepo("","");
        }
        
        public static PollAnswer SingleOrDefault(Expression<Func<PollAnswer, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            PollAnswer single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static PollAnswer SingleOrDefault(Expression<Func<PollAnswer, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            PollAnswer single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<PollAnswer, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<PollAnswer, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<PollAnswer> Find(Expression<Func<PollAnswer, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<PollAnswer> Find(Expression<Func<PollAnswer, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<PollAnswer> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<PollAnswer> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<PollAnswer> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<PollAnswer> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<PollAnswer> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<PollAnswer> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(PollAnswer)){
                PollAnswer compare=(PollAnswer)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Poll> Polls
        {
            get
            {
                
                  var repo=AliexpressDBA.Poll.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _PollId
                       select items;
            }
        }

        public IQueryable<PollVotingRecord> PollVotingRecords
        {
            get
            {
                
                  var repo=AliexpressDBA.PollVotingRecord.GetRepo();
                  return from items in repo.GetAll()
                       where items.PollAnswerId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PollId;
        public int PollId
        {
            get { return _PollId; }
            set
            {
                if(_PollId!=value){
                    _PollId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PollId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _NumberOfVotes;
        public int NumberOfVotes
        {
            get { return _NumberOfVotes; }
            set
            {
                if(_NumberOfVotes!=value){
                    _NumberOfVotes=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NumberOfVotes");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<PollAnswer, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_JC_JCarousel table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_JC_JCarousel: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_JC_JCarousel> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_JC_JCarousel>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_JC_JCarousel> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_JC_JCarousel item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_JC_JCarousel item=new SS_JC_JCarousel();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_JC_JCarousel> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_JC_JCarousel(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_JC_JCarousel.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_JC_JCarousel>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_JC_JCarousel(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_JC_JCarousel(Expression<Func<SS_JC_JCarousel, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_JC_JCarousel> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_JC_JCarousel> _repo;
            
            if(db.TestMode){
                SS_JC_JCarousel.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_JC_JCarousel>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_JC_JCarousel> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_JC_JCarousel SingleOrDefault(Expression<Func<SS_JC_JCarousel, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_JC_JCarousel single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_JC_JCarousel SingleOrDefault(Expression<Func<SS_JC_JCarousel, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_JC_JCarousel single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_JC_JCarousel, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_JC_JCarousel, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_JC_JCarousel> Find(Expression<Func<SS_JC_JCarousel, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_JC_JCarousel> Find(Expression<Func<SS_JC_JCarousel, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_JC_JCarousel> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_JC_JCarousel> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_JC_JCarousel> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_JC_JCarousel> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_JC_JCarousel> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_JC_JCarousel> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_JC_JCarousel)){
                SS_JC_JCarousel compare=(SS_JC_JCarousel)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Title;
        public string Title
        {
            get { return _Title; }
            set
            {
                if(_Title!=value){
                    _Title=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Title");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DataSourceType;
        public string DataSourceType
        {
            get { return _DataSourceType; }
            set
            {
                if(_DataSourceType!=value){
                    _DataSourceType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSourceType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DataSourceEntityId;
        public int DataSourceEntityId
        {
            get { return _DataSourceEntityId; }
            set
            {
                if(_DataSourceEntityId!=value){
                    _DataSourceEntityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DataSourceEntityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CarouselType;
        public int CarouselType
        {
            get { return _CarouselType; }
            set
            {
                if(_CarouselType!=value){
                    _CarouselType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CarouselType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _LimitedToStores;
        public bool LimitedToStores
        {
            get { return _LimitedToStores; }
            set
            {
                if(_LimitedToStores!=value){
                    _LimitedToStores=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LimitedToStores");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_JC_JCarousel, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ShippingMethodRestrictions table in the AliexpressDB Database.
    /// </summary>
    public partial class ShippingMethodRestriction: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ShippingMethodRestriction> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ShippingMethodRestriction>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ShippingMethodRestriction> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ShippingMethodRestriction item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ShippingMethodRestriction item=new ShippingMethodRestriction();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ShippingMethodRestriction> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ShippingMethodRestriction(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ShippingMethodRestriction.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ShippingMethodRestriction>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ShippingMethodRestriction(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ShippingMethodRestriction(Expression<Func<ShippingMethodRestriction, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ShippingMethodRestriction> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ShippingMethodRestriction> _repo;
            
            if(db.TestMode){
                ShippingMethodRestriction.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ShippingMethodRestriction>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ShippingMethodRestriction> GetRepo(){
            return GetRepo("","");
        }
        
        public static ShippingMethodRestriction SingleOrDefault(Expression<Func<ShippingMethodRestriction, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ShippingMethodRestriction single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ShippingMethodRestriction SingleOrDefault(Expression<Func<ShippingMethodRestriction, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ShippingMethodRestriction single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ShippingMethodRestriction, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ShippingMethodRestriction, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ShippingMethodRestriction> Find(Expression<Func<ShippingMethodRestriction, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ShippingMethodRestriction> Find(Expression<Func<ShippingMethodRestriction, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ShippingMethodRestriction> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ShippingMethodRestriction> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ShippingMethodRestriction> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ShippingMethodRestriction> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ShippingMethodRestriction> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ShippingMethodRestriction> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Country_Id";
        }

        public object KeyValue()
        {
            return this.Country_Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Country_Id.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ShippingMethodRestriction)){
                ShippingMethodRestriction compare=(ShippingMethodRestriction)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Country_Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Country_Id.ToString();
                    }

        public string DescriptorColumn() {
            return "Country_Id";
        }
        public static string GetKeyColumn()
        {
            return "Country_Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Country_Id";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Country> Countries
        {
            get
            {
                
                  var repo=AliexpressDBA.Country.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _Country_Id
                       select items;
            }
        }

        public IQueryable<ShippingMethod> ShippingMethods
        {
            get
            {
                
                  var repo=AliexpressDBA.ShippingMethod.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ShippingMethod_Id
                       select items;
            }
        }

        #endregion
        

        int _ShippingMethod_Id;
        public int ShippingMethod_Id
        {
            get { return _ShippingMethod_Id; }
            set
            {
                if(_ShippingMethod_Id!=value){
                    _ShippingMethod_Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ShippingMethod_Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Country_Id;
        public int Country_Id
        {
            get { return _Country_Id; }
            set
            {
                if(_Country_Id!=value){
                    _Country_Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Country_Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ShippingMethodRestriction, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the DiscountRequirement table in the AliexpressDB Database.
    /// </summary>
    public partial class DiscountRequirement: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<DiscountRequirement> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<DiscountRequirement>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<DiscountRequirement> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(DiscountRequirement item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                DiscountRequirement item=new DiscountRequirement();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<DiscountRequirement> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public DiscountRequirement(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                DiscountRequirement.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<DiscountRequirement>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public DiscountRequirement(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public DiscountRequirement(Expression<Func<DiscountRequirement, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<DiscountRequirement> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<DiscountRequirement> _repo;
            
            if(db.TestMode){
                DiscountRequirement.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<DiscountRequirement>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<DiscountRequirement> GetRepo(){
            return GetRepo("","");
        }
        
        public static DiscountRequirement SingleOrDefault(Expression<Func<DiscountRequirement, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            DiscountRequirement single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static DiscountRequirement SingleOrDefault(Expression<Func<DiscountRequirement, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            DiscountRequirement single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<DiscountRequirement, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<DiscountRequirement, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<DiscountRequirement> Find(Expression<Func<DiscountRequirement, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<DiscountRequirement> Find(Expression<Func<DiscountRequirement, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<DiscountRequirement> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<DiscountRequirement> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<DiscountRequirement> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<DiscountRequirement> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<DiscountRequirement> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<DiscountRequirement> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.DiscountRequirementRuleSystemName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(DiscountRequirement)){
                DiscountRequirement compare=(DiscountRequirement)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.DiscountRequirementRuleSystemName.ToString();
                    }

        public string DescriptorColumn() {
            return "DiscountRequirementRuleSystemName";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "DiscountRequirementRuleSystemName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Discount> Discounts
        {
            get
            {
                
                  var repo=AliexpressDBA.Discount.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _DiscountId
                       select items;
            }
        }

        public IQueryable<DiscountRequirement> DiscountRequirements
        {
            get
            {
                
                  var repo=AliexpressDBA.DiscountRequirement.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ParentId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DiscountId;
        public int DiscountId
        {
            get { return _DiscountId; }
            set
            {
                if(_DiscountId!=value){
                    _DiscountId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DiscountId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DiscountRequirementRuleSystemName;
        public string DiscountRequirementRuleSystemName
        {
            get { return _DiscountRequirementRuleSystemName; }
            set
            {
                if(_DiscountRequirementRuleSystemName!=value){
                    _DiscountRequirementRuleSystemName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DiscountRequirementRuleSystemName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _ParentId;
        public int? ParentId
        {
            get { return _ParentId; }
            set
            {
                if(_ParentId!=value){
                    _ParentId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParentId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _InteractionTypeId;
        public int? InteractionTypeId
        {
            get { return _InteractionTypeId; }
            set
            {
                if(_InteractionTypeId!=value){
                    _InteractionTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="InteractionTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsGroup;
        public bool IsGroup
        {
            get { return _IsGroup; }
            set
            {
                if(_IsGroup!=value){
                    _IsGroup=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsGroup");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<DiscountRequirement, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the PollVotingRecord table in the AliexpressDB Database.
    /// </summary>
    public partial class PollVotingRecord: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<PollVotingRecord> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<PollVotingRecord>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<PollVotingRecord> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(PollVotingRecord item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                PollVotingRecord item=new PollVotingRecord();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<PollVotingRecord> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public PollVotingRecord(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                PollVotingRecord.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<PollVotingRecord>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public PollVotingRecord(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public PollVotingRecord(Expression<Func<PollVotingRecord, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<PollVotingRecord> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<PollVotingRecord> _repo;
            
            if(db.TestMode){
                PollVotingRecord.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<PollVotingRecord>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<PollVotingRecord> GetRepo(){
            return GetRepo("","");
        }
        
        public static PollVotingRecord SingleOrDefault(Expression<Func<PollVotingRecord, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            PollVotingRecord single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static PollVotingRecord SingleOrDefault(Expression<Func<PollVotingRecord, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            PollVotingRecord single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<PollVotingRecord, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<PollVotingRecord, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<PollVotingRecord> Find(Expression<Func<PollVotingRecord, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<PollVotingRecord> Find(Expression<Func<PollVotingRecord, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<PollVotingRecord> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<PollVotingRecord> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<PollVotingRecord> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<PollVotingRecord> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<PollVotingRecord> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<PollVotingRecord> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.PollAnswerId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(PollVotingRecord)){
                PollVotingRecord compare=(PollVotingRecord)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.PollAnswerId.ToString();
                    }

        public string DescriptorColumn() {
            return "PollAnswerId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "PollAnswerId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Customer> Customers
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerId
                       select items;
            }
        }

        public IQueryable<PollAnswer> PollAnswers
        {
            get
            {
                
                  var repo=AliexpressDBA.PollAnswer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _PollAnswerId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _PollAnswerId;
        public int PollAnswerId
        {
            get { return _PollAnswerId; }
            set
            {
                if(_PollAnswerId!=value){
                    _PollAnswerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PollAnswerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerId;
        public int CustomerId
        {
            get { return _CustomerId; }
            set
            {
                if(_CustomerId!=value){
                    _CustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<PollVotingRecord, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_MM_Menu table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_MM_Menu: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_MM_Menu> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_MM_Menu>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_MM_Menu> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_MM_Menu item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_MM_Menu item=new SS_MM_Menu();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_MM_Menu> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_MM_Menu(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_MM_Menu.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_MM_Menu>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_MM_Menu(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_MM_Menu(Expression<Func<SS_MM_Menu, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_MM_Menu> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_MM_Menu> _repo;
            
            if(db.TestMode){
                SS_MM_Menu.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_MM_Menu>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_MM_Menu> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_MM_Menu SingleOrDefault(Expression<Func<SS_MM_Menu, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_MM_Menu single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_MM_Menu SingleOrDefault(Expression<Func<SS_MM_Menu, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_MM_Menu single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_MM_Menu, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_MM_Menu, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_MM_Menu> Find(Expression<Func<SS_MM_Menu, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_MM_Menu> Find(Expression<Func<SS_MM_Menu, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_MM_Menu> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_MM_Menu> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_MM_Menu> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_MM_Menu> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_MM_Menu> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_MM_Menu> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_MM_Menu)){
                SS_MM_Menu compare=(SS_MM_Menu)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SS_MM_MenuItem> SS_MM_MenuItems
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_MM_MenuItem.GetRepo();
                  return from items in repo.GetAll()
                       where items.MenuId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Enabled;
        public bool Enabled
        {
            get { return _Enabled; }
            set
            {
                if(_Enabled!=value){
                    _Enabled=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Enabled");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CssClass;
        public string CssClass
        {
            get { return _CssClass; }
            set
            {
                if(_CssClass!=value){
                    _CssClass=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CssClass");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _ShowDropdownsOnClick;
        public bool ShowDropdownsOnClick
        {
            get { return _ShowDropdownsOnClick; }
            set
            {
                if(_ShowDropdownsOnClick!=value){
                    _ShowDropdownsOnClick=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ShowDropdownsOnClick");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _LimitedToStores;
        public bool LimitedToStores
        {
            get { return _LimitedToStores; }
            set
            {
                if(_LimitedToStores!=value){
                    _LimitedToStores=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LimitedToStores");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_MM_Menu, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ShoppingCartItem table in the AliexpressDB Database.
    /// </summary>
    public partial class ShoppingCartItem: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ShoppingCartItem> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ShoppingCartItem>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ShoppingCartItem> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ShoppingCartItem item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ShoppingCartItem item=new ShoppingCartItem();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ShoppingCartItem> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ShoppingCartItem(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ShoppingCartItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ShoppingCartItem>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ShoppingCartItem(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ShoppingCartItem(Expression<Func<ShoppingCartItem, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ShoppingCartItem> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ShoppingCartItem> _repo;
            
            if(db.TestMode){
                ShoppingCartItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ShoppingCartItem>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ShoppingCartItem> GetRepo(){
            return GetRepo("","");
        }
        
        public static ShoppingCartItem SingleOrDefault(Expression<Func<ShoppingCartItem, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ShoppingCartItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ShoppingCartItem SingleOrDefault(Expression<Func<ShoppingCartItem, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ShoppingCartItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ShoppingCartItem, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ShoppingCartItem, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ShoppingCartItem> Find(Expression<Func<ShoppingCartItem, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ShoppingCartItem> Find(Expression<Func<ShoppingCartItem, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ShoppingCartItem> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ShoppingCartItem> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ShoppingCartItem> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ShoppingCartItem> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ShoppingCartItem> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ShoppingCartItem> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.AttributesXml.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ShoppingCartItem)){
                ShoppingCartItem compare=(ShoppingCartItem)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.AttributesXml.ToString();
                    }

        public string DescriptorColumn() {
            return "AttributesXml";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "AttributesXml";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Customer> Customers
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerId
                       select items;
            }
        }

        public IQueryable<Product> Products
        {
            get
            {
                
                  var repo=AliexpressDBA.Product.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ProductId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StoreId;
        public int StoreId
        {
            get { return _StoreId; }
            set
            {
                if(_StoreId!=value){
                    _StoreId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StoreId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ShoppingCartTypeId;
        public int ShoppingCartTypeId
        {
            get { return _ShoppingCartTypeId; }
            set
            {
                if(_ShoppingCartTypeId!=value){
                    _ShoppingCartTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ShoppingCartTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerId;
        public int CustomerId
        {
            get { return _CustomerId; }
            set
            {
                if(_CustomerId!=value){
                    _CustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductId;
        public int ProductId
        {
            get { return _ProductId; }
            set
            {
                if(_ProductId!=value){
                    _ProductId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AttributesXml;
        public string AttributesXml
        {
            get { return _AttributesXml; }
            set
            {
                if(_AttributesXml!=value){
                    _AttributesXml=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AttributesXml");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _CustomerEnteredPrice;
        public decimal CustomerEnteredPrice
        {
            get { return _CustomerEnteredPrice; }
            set
            {
                if(_CustomerEnteredPrice!=value){
                    _CustomerEnteredPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerEnteredPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Quantity;
        public int Quantity
        {
            get { return _Quantity; }
            set
            {
                if(_Quantity!=value){
                    _Quantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Quantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _RentalStartDateUtc;
        public DateTime? RentalStartDateUtc
        {
            get { return _RentalStartDateUtc; }
            set
            {
                if(_RentalStartDateUtc!=value){
                    _RentalStartDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RentalStartDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _RentalEndDateUtc;
        public DateTime? RentalEndDateUtc
        {
            get { return _RentalEndDateUtc; }
            set
            {
                if(_RentalEndDateUtc!=value){
                    _RentalEndDateUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RentalEndDateUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _UpdatedOnUtc;
        public DateTime UpdatedOnUtc
        {
            get { return _UpdatedOnUtc; }
            set
            {
                if(_UpdatedOnUtc!=value){
                    _UpdatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ShoppingCartItem, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the DiscountUsageHistory table in the AliexpressDB Database.
    /// </summary>
    public partial class DiscountUsageHistory: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<DiscountUsageHistory> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<DiscountUsageHistory>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<DiscountUsageHistory> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(DiscountUsageHistory item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                DiscountUsageHistory item=new DiscountUsageHistory();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<DiscountUsageHistory> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public DiscountUsageHistory(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                DiscountUsageHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<DiscountUsageHistory>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public DiscountUsageHistory(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public DiscountUsageHistory(Expression<Func<DiscountUsageHistory, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<DiscountUsageHistory> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<DiscountUsageHistory> _repo;
            
            if(db.TestMode){
                DiscountUsageHistory.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<DiscountUsageHistory>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<DiscountUsageHistory> GetRepo(){
            return GetRepo("","");
        }
        
        public static DiscountUsageHistory SingleOrDefault(Expression<Func<DiscountUsageHistory, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            DiscountUsageHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static DiscountUsageHistory SingleOrDefault(Expression<Func<DiscountUsageHistory, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            DiscountUsageHistory single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<DiscountUsageHistory, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<DiscountUsageHistory, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<DiscountUsageHistory> Find(Expression<Func<DiscountUsageHistory, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<DiscountUsageHistory> Find(Expression<Func<DiscountUsageHistory, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<DiscountUsageHistory> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<DiscountUsageHistory> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<DiscountUsageHistory> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<DiscountUsageHistory> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<DiscountUsageHistory> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<DiscountUsageHistory> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.DiscountId.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(DiscountUsageHistory)){
                DiscountUsageHistory compare=(DiscountUsageHistory)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.DiscountId.ToString();
                    }

        public string DescriptorColumn() {
            return "DiscountId";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "DiscountId";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Discount> Discounts
        {
            get
            {
                
                  var repo=AliexpressDBA.Discount.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _DiscountId
                       select items;
            }
        }

        public IQueryable<Order> Orders
        {
            get
            {
                
                  var repo=AliexpressDBA.Order.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _OrderId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DiscountId;
        public int DiscountId
        {
            get { return _DiscountId; }
            set
            {
                if(_DiscountId!=value){
                    _DiscountId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DiscountId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderId;
        public int OrderId
        {
            get { return _OrderId; }
            set
            {
                if(_OrderId!=value){
                    _OrderId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<DiscountUsageHistory, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the PredefinedProductAttributeValue table in the AliexpressDB Database.
    /// </summary>
    public partial class PredefinedProductAttributeValue: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<PredefinedProductAttributeValue> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<PredefinedProductAttributeValue>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<PredefinedProductAttributeValue> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(PredefinedProductAttributeValue item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                PredefinedProductAttributeValue item=new PredefinedProductAttributeValue();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<PredefinedProductAttributeValue> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public PredefinedProductAttributeValue(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                PredefinedProductAttributeValue.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<PredefinedProductAttributeValue>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public PredefinedProductAttributeValue(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public PredefinedProductAttributeValue(Expression<Func<PredefinedProductAttributeValue, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<PredefinedProductAttributeValue> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<PredefinedProductAttributeValue> _repo;
            
            if(db.TestMode){
                PredefinedProductAttributeValue.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<PredefinedProductAttributeValue>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<PredefinedProductAttributeValue> GetRepo(){
            return GetRepo("","");
        }
        
        public static PredefinedProductAttributeValue SingleOrDefault(Expression<Func<PredefinedProductAttributeValue, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            PredefinedProductAttributeValue single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static PredefinedProductAttributeValue SingleOrDefault(Expression<Func<PredefinedProductAttributeValue, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            PredefinedProductAttributeValue single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<PredefinedProductAttributeValue, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<PredefinedProductAttributeValue, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<PredefinedProductAttributeValue> Find(Expression<Func<PredefinedProductAttributeValue, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<PredefinedProductAttributeValue> Find(Expression<Func<PredefinedProductAttributeValue, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<PredefinedProductAttributeValue> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<PredefinedProductAttributeValue> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<PredefinedProductAttributeValue> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<PredefinedProductAttributeValue> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<PredefinedProductAttributeValue> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<PredefinedProductAttributeValue> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(PredefinedProductAttributeValue)){
                PredefinedProductAttributeValue compare=(PredefinedProductAttributeValue)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<ProductAttribute> ProductAttributes
        {
            get
            {
                
                  var repo=AliexpressDBA.ProductAttribute.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ProductAttributeId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductAttributeId;
        public int ProductAttributeId
        {
            get { return _ProductAttributeId; }
            set
            {
                if(_ProductAttributeId!=value){
                    _ProductAttributeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductAttributeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _PriceAdjustment;
        public decimal PriceAdjustment
        {
            get { return _PriceAdjustment; }
            set
            {
                if(_PriceAdjustment!=value){
                    _PriceAdjustment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PriceAdjustment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _WeightAdjustment;
        public decimal WeightAdjustment
        {
            get { return _WeightAdjustment; }
            set
            {
                if(_WeightAdjustment!=value){
                    _WeightAdjustment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WeightAdjustment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _Cost;
        public decimal Cost
        {
            get { return _Cost; }
            set
            {
                if(_Cost!=value){
                    _Cost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Cost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsPreSelected;
        public bool IsPreSelected
        {
            get { return _IsPreSelected; }
            set
            {
                if(_IsPreSelected!=value){
                    _IsPreSelected=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsPreSelected");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<PredefinedProductAttributeValue, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_MM_MenuItem table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_MM_MenuItem: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_MM_MenuItem> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_MM_MenuItem>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_MM_MenuItem> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_MM_MenuItem item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_MM_MenuItem item=new SS_MM_MenuItem();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_MM_MenuItem> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_MM_MenuItem(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_MM_MenuItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_MM_MenuItem>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_MM_MenuItem(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_MM_MenuItem(Expression<Func<SS_MM_MenuItem, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_MM_MenuItem> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_MM_MenuItem> _repo;
            
            if(db.TestMode){
                SS_MM_MenuItem.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_MM_MenuItem>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_MM_MenuItem> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_MM_MenuItem SingleOrDefault(Expression<Func<SS_MM_MenuItem, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_MM_MenuItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_MM_MenuItem SingleOrDefault(Expression<Func<SS_MM_MenuItem, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_MM_MenuItem single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_MM_MenuItem, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_MM_MenuItem, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_MM_MenuItem> Find(Expression<Func<SS_MM_MenuItem, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_MM_MenuItem> Find(Expression<Func<SS_MM_MenuItem, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_MM_MenuItem> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_MM_MenuItem> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_MM_MenuItem> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_MM_MenuItem> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_MM_MenuItem> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_MM_MenuItem> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Title.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_MM_MenuItem)){
                SS_MM_MenuItem compare=(SS_MM_MenuItem)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Title.ToString();
                    }

        public string DescriptorColumn() {
            return "Title";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Title";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SS_MM_Menu> SS_MM_Menus
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_MM_Menu.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _MenuId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Type;
        public int Type
        {
            get { return _Type; }
            set
            {
                if(_Type!=value){
                    _Type=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Type");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Title;
        public string Title
        {
            get { return _Title; }
            set
            {
                if(_Title!=value){
                    _Title=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Title");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Url;
        public string Url
        {
            get { return _Url; }
            set
            {
                if(_Url!=value){
                    _Url=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Url");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _OpenInNewWindow;
        public bool OpenInNewWindow
        {
            get { return _OpenInNewWindow; }
            set
            {
                if(_OpenInNewWindow!=value){
                    _OpenInNewWindow=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OpenInNewWindow");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _CssClass;
        public string CssClass
        {
            get { return _CssClass; }
            set
            {
                if(_CssClass!=value){
                    _CssClass=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CssClass");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _MaximumNumberOfEntities;
        public int MaximumNumberOfEntities
        {
            get { return _MaximumNumberOfEntities; }
            set
            {
                if(_MaximumNumberOfEntities!=value){
                    _MaximumNumberOfEntities=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MaximumNumberOfEntities");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _NumberOfBoxesPerRow;
        public int NumberOfBoxesPerRow
        {
            get { return _NumberOfBoxesPerRow; }
            set
            {
                if(_NumberOfBoxesPerRow!=value){
                    _NumberOfBoxesPerRow=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NumberOfBoxesPerRow");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CatalogTemplate;
        public int CatalogTemplate
        {
            get { return _CatalogTemplate; }
            set
            {
                if(_CatalogTemplate!=value){
                    _CatalogTemplate=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CatalogTemplate");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ImageSize;
        public int ImageSize
        {
            get { return _ImageSize; }
            set
            {
                if(_ImageSize!=value){
                    _ImageSize=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ImageSize");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _EntityId;
        public int EntityId
        {
            get { return _EntityId; }
            set
            {
                if(_EntityId!=value){
                    _EntityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _WidgetZone;
        public string WidgetZone
        {
            get { return _WidgetZone; }
            set
            {
                if(_WidgetZone!=value){
                    _WidgetZone=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WidgetZone");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _Width;
        public decimal Width
        {
            get { return _Width; }
            set
            {
                if(_Width!=value){
                    _Width=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Width");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ParentMenuItemId;
        public int ParentMenuItemId
        {
            get { return _ParentMenuItemId; }
            set
            {
                if(_ParentMenuItemId!=value){
                    _ParentMenuItemId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParentMenuItemId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _MenuId;
        public int? MenuId
        {
            get { return _MenuId; }
            set
            {
                if(_MenuId!=value){
                    _MenuId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MenuId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _SubjectToAcl;
        public bool SubjectToAcl
        {
            get { return _SubjectToAcl; }
            set
            {
                if(_SubjectToAcl!=value){
                    _SubjectToAcl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubjectToAcl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_MM_MenuItem, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SpecificationAttribute table in the AliexpressDB Database.
    /// </summary>
    public partial class SpecificationAttribute: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SpecificationAttribute> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SpecificationAttribute>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SpecificationAttribute> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SpecificationAttribute item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SpecificationAttribute item=new SpecificationAttribute();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SpecificationAttribute> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SpecificationAttribute(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SpecificationAttribute.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SpecificationAttribute>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SpecificationAttribute(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SpecificationAttribute(Expression<Func<SpecificationAttribute, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SpecificationAttribute> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SpecificationAttribute> _repo;
            
            if(db.TestMode){
                SpecificationAttribute.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SpecificationAttribute>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SpecificationAttribute> GetRepo(){
            return GetRepo("","");
        }
        
        public static SpecificationAttribute SingleOrDefault(Expression<Func<SpecificationAttribute, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SpecificationAttribute single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SpecificationAttribute SingleOrDefault(Expression<Func<SpecificationAttribute, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SpecificationAttribute single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SpecificationAttribute, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SpecificationAttribute, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SpecificationAttribute> Find(Expression<Func<SpecificationAttribute, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SpecificationAttribute> Find(Expression<Func<SpecificationAttribute, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SpecificationAttribute> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SpecificationAttribute> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SpecificationAttribute> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SpecificationAttribute> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SpecificationAttribute> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SpecificationAttribute> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SpecificationAttribute)){
                SpecificationAttribute compare=(SpecificationAttribute)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SpecificationAttributeOption> SpecificationAttributeOptions
        {
            get
            {
                
                  var repo=AliexpressDBA.SpecificationAttributeOption.GetRepo();
                  return from items in repo.GetAll()
                       where items.SpecificationAttributeId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SpecificationAttribute, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Download table in the AliexpressDB Database.
    /// </summary>
    public partial class Download: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Download> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Download>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Download> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Download item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Download item=new Download();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Download> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Download(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Download.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Download>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Download(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Download(Expression<Func<Download, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Download> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Download> _repo;
            
            if(db.TestMode){
                Download.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Download>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Download> GetRepo(){
            return GetRepo("","");
        }
        
        public static Download SingleOrDefault(Expression<Func<Download, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Download single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Download SingleOrDefault(Expression<Func<Download, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Download single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Download, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Download, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Download> Find(Expression<Func<Download, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Download> Find(Expression<Func<Download, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Download> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Download> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Download> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Download> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Download> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Download> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.DownloadUrl.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Download)){
                Download compare=(Download)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.DownloadUrl.ToString();
                    }

        public string DescriptorColumn() {
            return "DownloadUrl";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "DownloadUrl";
        }
        
        #region ' Foreign Keys '
        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        Guid _DownloadGuid;
        public Guid DownloadGuid
        {
            get { return _DownloadGuid; }
            set
            {
                if(_DownloadGuid!=value){
                    _DownloadGuid=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DownloadGuid");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _UseDownloadUrl;
        public bool UseDownloadUrl
        {
            get { return _UseDownloadUrl; }
            set
            {
                if(_UseDownloadUrl!=value){
                    _UseDownloadUrl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UseDownloadUrl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DownloadUrl;
        public string DownloadUrl
        {
            get { return _DownloadUrl; }
            set
            {
                if(_DownloadUrl!=value){
                    _DownloadUrl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DownloadUrl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        byte[] _DownloadBinary;
        public byte[] DownloadBinary
        {
            get { return _DownloadBinary; }
            set
            {
                if(_DownloadBinary!=value){
                    _DownloadBinary=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DownloadBinary");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ContentType;
        public string ContentType
        {
            get { return _ContentType; }
            set
            {
                if(_ContentType!=value){
                    _ContentType=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ContentType");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Filename;
        public string Filename
        {
            get { return _Filename; }
            set
            {
                if(_Filename!=value){
                    _Filename=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Filename");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Extension;
        public string Extension
        {
            get { return _Extension; }
            set
            {
                if(_Extension!=value){
                    _Extension=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Extension");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }
        
        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Download, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Forums_PrivateMessage table in the AliexpressDB Database.
    /// </summary>
    public partial class Forums_PrivateMessage: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Forums_PrivateMessage> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Forums_PrivateMessage>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Forums_PrivateMessage> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Forums_PrivateMessage item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Forums_PrivateMessage item=new Forums_PrivateMessage();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Forums_PrivateMessage> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Forums_PrivateMessage(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Forums_PrivateMessage.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Forums_PrivateMessage>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Forums_PrivateMessage(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Forums_PrivateMessage(Expression<Func<Forums_PrivateMessage, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Forums_PrivateMessage> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Forums_PrivateMessage> _repo;
            
            if(db.TestMode){
                Forums_PrivateMessage.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Forums_PrivateMessage>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Forums_PrivateMessage> GetRepo(){
            return GetRepo("","");
        }
        
        public static Forums_PrivateMessage SingleOrDefault(Expression<Func<Forums_PrivateMessage, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Forums_PrivateMessage single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Forums_PrivateMessage SingleOrDefault(Expression<Func<Forums_PrivateMessage, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Forums_PrivateMessage single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Forums_PrivateMessage, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Forums_PrivateMessage, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Forums_PrivateMessage> Find(Expression<Func<Forums_PrivateMessage, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Forums_PrivateMessage> Find(Expression<Func<Forums_PrivateMessage, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Forums_PrivateMessage> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Forums_PrivateMessage> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Forums_PrivateMessage> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Forums_PrivateMessage> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Forums_PrivateMessage> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Forums_PrivateMessage> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Subject.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Forums_PrivateMessage)){
                Forums_PrivateMessage compare=(Forums_PrivateMessage)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Subject.ToString();
                    }

        public string DescriptorColumn() {
            return "Subject";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Subject";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Customer> Customers
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _FromCustomerId
                       select items;
            }
        }

        public IQueryable<Customer> Customers1
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ToCustomerId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StoreId;
        public int StoreId
        {
            get { return _StoreId; }
            set
            {
                if(_StoreId!=value){
                    _StoreId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StoreId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _FromCustomerId;
        public int FromCustomerId
        {
            get { return _FromCustomerId; }
            set
            {
                if(_FromCustomerId!=value){
                    _FromCustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FromCustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ToCustomerId;
        public int ToCustomerId
        {
            get { return _ToCustomerId; }
            set
            {
                if(_ToCustomerId!=value){
                    _ToCustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ToCustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Subject;
        public string Subject
        {
            get { return _Subject; }
            set
            {
                if(_Subject!=value){
                    _Subject=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Subject");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Text;
        public string Text
        {
            get { return _Text; }
            set
            {
                if(_Text!=value){
                    _Text=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Text");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsRead;
        public bool IsRead
        {
            get { return _IsRead; }
            set
            {
                if(_IsRead!=value){
                    _IsRead=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsRead");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsDeletedByAuthor;
        public bool IsDeletedByAuthor
        {
            get { return _IsDeletedByAuthor; }
            set
            {
                if(_IsDeletedByAuthor!=value){
                    _IsDeletedByAuthor=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeletedByAuthor");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsDeletedByRecipient;
        public bool IsDeletedByRecipient
        {
            get { return _IsDeletedByRecipient; }
            set
            {
                if(_IsDeletedByRecipient!=value){
                    _IsDeletedByRecipient=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDeletedByRecipient");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Forums_PrivateMessage, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_PR_CategoryPageRibbon table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_PR_CategoryPageRibbon: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_PR_CategoryPageRibbon> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_PR_CategoryPageRibbon>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_PR_CategoryPageRibbon> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_PR_CategoryPageRibbon item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_PR_CategoryPageRibbon item=new SS_PR_CategoryPageRibbon();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_PR_CategoryPageRibbon> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_PR_CategoryPageRibbon(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_PR_CategoryPageRibbon.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_PR_CategoryPageRibbon>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_PR_CategoryPageRibbon(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_PR_CategoryPageRibbon(Expression<Func<SS_PR_CategoryPageRibbon, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_PR_CategoryPageRibbon> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_PR_CategoryPageRibbon> _repo;
            
            if(db.TestMode){
                SS_PR_CategoryPageRibbon.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_PR_CategoryPageRibbon>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_PR_CategoryPageRibbon> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_PR_CategoryPageRibbon SingleOrDefault(Expression<Func<SS_PR_CategoryPageRibbon, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_PR_CategoryPageRibbon single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_PR_CategoryPageRibbon SingleOrDefault(Expression<Func<SS_PR_CategoryPageRibbon, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_PR_CategoryPageRibbon single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_PR_CategoryPageRibbon, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_PR_CategoryPageRibbon, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_PR_CategoryPageRibbon> Find(Expression<Func<SS_PR_CategoryPageRibbon, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_PR_CategoryPageRibbon> Find(Expression<Func<SS_PR_CategoryPageRibbon, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_PR_CategoryPageRibbon> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_PR_CategoryPageRibbon> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_PR_CategoryPageRibbon> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_PR_CategoryPageRibbon> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_PR_CategoryPageRibbon> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_PR_CategoryPageRibbon> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Text.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_PR_CategoryPageRibbon)){
                SS_PR_CategoryPageRibbon compare=(SS_PR_CategoryPageRibbon)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Text.ToString();
                    }

        public string DescriptorColumn() {
            return "Text";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Text";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SS_PR_ProductRibbon> SS_PR_ProductRibbons
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_PR_ProductRibbon.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ProductRibbonId
                       select items;
            }
        }

        public IQueryable<SS_PR_RibbonPicture> SS_PR_RibbonPictures
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_PR_RibbonPicture.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _PictureId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductRibbonId;
        public int ProductRibbonId
        {
            get { return _ProductRibbonId; }
            set
            {
                if(_ProductRibbonId!=value){
                    _ProductRibbonId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductRibbonId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _PictureId;
        public int? PictureId
        {
            get { return _PictureId; }
            set
            {
                if(_PictureId!=value){
                    _PictureId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PictureId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Enabled;
        public bool Enabled
        {
            get { return _Enabled; }
            set
            {
                if(_Enabled!=value){
                    _Enabled=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Enabled");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Text;
        public string Text
        {
            get { return _Text; }
            set
            {
                if(_Text!=value){
                    _Text=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Text");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Position;
        public string Position
        {
            get { return _Position; }
            set
            {
                if(_Position!=value){
                    _Position=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Position");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TextStyle;
        public string TextStyle
        {
            get { return _TextStyle; }
            set
            {
                if(_TextStyle!=value){
                    _TextStyle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TextStyle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ImageStyle;
        public string ImageStyle
        {
            get { return _ImageStyle; }
            set
            {
                if(_ImageStyle!=value){
                    _ImageStyle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ImageStyle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ContainerStyle;
        public string ContainerStyle
        {
            get { return _ContainerStyle; }
            set
            {
                if(_ContainerStyle!=value){
                    _ContainerStyle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ContainerStyle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_PR_CategoryPageRibbon, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SpecificationAttributeOption table in the AliexpressDB Database.
    /// </summary>
    public partial class SpecificationAttributeOption: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SpecificationAttributeOption> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SpecificationAttributeOption>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SpecificationAttributeOption> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SpecificationAttributeOption item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SpecificationAttributeOption item=new SpecificationAttributeOption();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SpecificationAttributeOption> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SpecificationAttributeOption(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SpecificationAttributeOption.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SpecificationAttributeOption>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SpecificationAttributeOption(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SpecificationAttributeOption(Expression<Func<SpecificationAttributeOption, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SpecificationAttributeOption> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SpecificationAttributeOption> _repo;
            
            if(db.TestMode){
                SpecificationAttributeOption.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SpecificationAttributeOption>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SpecificationAttributeOption> GetRepo(){
            return GetRepo("","");
        }
        
        public static SpecificationAttributeOption SingleOrDefault(Expression<Func<SpecificationAttributeOption, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SpecificationAttributeOption single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SpecificationAttributeOption SingleOrDefault(Expression<Func<SpecificationAttributeOption, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SpecificationAttributeOption single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SpecificationAttributeOption, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SpecificationAttributeOption, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SpecificationAttributeOption> Find(Expression<Func<SpecificationAttributeOption, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SpecificationAttributeOption> Find(Expression<Func<SpecificationAttributeOption, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SpecificationAttributeOption> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SpecificationAttributeOption> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SpecificationAttributeOption> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SpecificationAttributeOption> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SpecificationAttributeOption> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SpecificationAttributeOption> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SpecificationAttributeOption)){
                SpecificationAttributeOption compare=(SpecificationAttributeOption)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SpecificationAttribute> SpecificationAttributes
        {
            get
            {
                
                  var repo=AliexpressDBA.SpecificationAttribute.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _SpecificationAttributeId
                       select items;
            }
        }

        public IQueryable<Product_SpecificationAttribute_Mapping> Product_SpecificationAttribute_Mappings
        {
            get
            {
                
                  var repo=AliexpressDBA.Product_SpecificationAttribute_Mapping.GetRepo();
                  return from items in repo.GetAll()
                       where items.SpecificationAttributeOptionId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SpecificationAttributeId;
        public int SpecificationAttributeId
        {
            get { return _SpecificationAttributeId; }
            set
            {
                if(_SpecificationAttributeId!=value){
                    _SpecificationAttributeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SpecificationAttributeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ColorSquaresRgb;
        public string ColorSquaresRgb
        {
            get { return _ColorSquaresRgb; }
            set
            {
                if(_ColorSquaresRgb!=value){
                    _ColorSquaresRgb=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ColorSquaresRgb");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SpecificationAttributeOption, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the EmailAccount table in the AliexpressDB Database.
    /// </summary>
    public partial class EmailAccount: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<EmailAccount> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<EmailAccount>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<EmailAccount> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(EmailAccount item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                EmailAccount item=new EmailAccount();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<EmailAccount> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public EmailAccount(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                EmailAccount.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<EmailAccount>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public EmailAccount(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public EmailAccount(Expression<Func<EmailAccount, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<EmailAccount> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<EmailAccount> _repo;
            
            if(db.TestMode){
                EmailAccount.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<EmailAccount>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<EmailAccount> GetRepo(){
            return GetRepo("","");
        }
        
        public static EmailAccount SingleOrDefault(Expression<Func<EmailAccount, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            EmailAccount single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static EmailAccount SingleOrDefault(Expression<Func<EmailAccount, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            EmailAccount single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<EmailAccount, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<EmailAccount, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<EmailAccount> Find(Expression<Func<EmailAccount, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<EmailAccount> Find(Expression<Func<EmailAccount, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<EmailAccount> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<EmailAccount> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<EmailAccount> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<EmailAccount> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<EmailAccount> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<EmailAccount> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Email.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(EmailAccount)){
                EmailAccount compare=(EmailAccount)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Email.ToString();
                    }

        public string DescriptorColumn() {
            return "Email";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Email";
        }
        
        #region ' Foreign Keys '
        public IQueryable<QueuedEmail> QueuedEmails
        {
            get
            {
                
                  var repo=AliexpressDBA.QueuedEmail.GetRepo();
                  return from items in repo.GetAll()
                       where items.EmailAccountId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Email;
        public string Email
        {
            get { return _Email; }
            set
            {
                if(_Email!=value){
                    _Email=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Email");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _DisplayName;
        public string DisplayName
        {
            get { return _DisplayName; }
            set
            {
                if(_DisplayName!=value){
                    _DisplayName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Host;
        public string Host
        {
            get { return _Host; }
            set
            {
                if(_Host!=value){
                    _Host=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Host");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _Port;
        public int Port
        {
            get { return _Port; }
            set
            {
                if(_Port!=value){
                    _Port=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Port");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Username;
        public string Username
        {
            get { return _Username; }
            set
            {
                if(_Username!=value){
                    _Username=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Username");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Password;
        public string Password
        {
            get { return _Password; }
            set
            {
                if(_Password!=value){
                    _Password=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Password");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _EnableSsl;
        public bool EnableSsl
        {
            get { return _EnableSsl; }
            set
            {
                if(_EnableSsl!=value){
                    _EnableSsl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EnableSsl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _UseDefaultCredentials;
        public bool UseDefaultCredentials
        {
            get { return _UseDefaultCredentials; }
            set
            {
                if(_UseDefaultCredentials!=value){
                    _UseDefaultCredentials=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UseDefaultCredentials");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<EmailAccount, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the Product table in the AliexpressDB Database.
    /// </summary>
    public partial class Product: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<Product> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<Product>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<Product> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(Product item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                Product item=new Product();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<Product> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public Product(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                Product.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Product>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public Product(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public Product(Expression<Func<Product, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<Product> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<Product> _repo;
            
            if(db.TestMode){
                Product.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<Product>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<Product> GetRepo(){
            return GetRepo("","");
        }
        
        public static Product SingleOrDefault(Expression<Func<Product, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            Product single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static Product SingleOrDefault(Expression<Func<Product, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            Product single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<Product, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<Product, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<Product> Find(Expression<Func<Product, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<Product> Find(Expression<Func<Product, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<Product> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<Product> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<Product> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<Product> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<Product> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<Product> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(Product)){
                Product compare=(Product)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<BackInStockSubscription> BackInStockSubscriptions
        {
            get
            {
                
                  var repo=AliexpressDBA.BackInStockSubscription.GetRepo();
                  return from items in repo.GetAll()
                       where items.ProductId == _Id
                       select items;
            }
        }

        public IQueryable<Discount_AppliedToProduct> Discount_AppliedToProducts
        {
            get
            {
                
                  var repo=AliexpressDBA.Discount_AppliedToProduct.GetRepo();
                  return from items in repo.GetAll()
                       where items.Product_Id == _Id
                       select items;
            }
        }

        public IQueryable<OrderItem> OrderItems
        {
            get
            {
                
                  var repo=AliexpressDBA.OrderItem.GetRepo();
                  return from items in repo.GetAll()
                       where items.ProductId == _Id
                       select items;
            }
        }

        public IQueryable<Product_ProductTag_Mapping> Product_ProductTag_Mappings
        {
            get
            {
                
                  var repo=AliexpressDBA.Product_ProductTag_Mapping.GetRepo();
                  return from items in repo.GetAll()
                       where items.Product_Id == _Id
                       select items;
            }
        }

        public IQueryable<ProductAttributeCombination> ProductAttributeCombinations
        {
            get
            {
                
                  var repo=AliexpressDBA.ProductAttributeCombination.GetRepo();
                  return from items in repo.GetAll()
                       where items.ProductId == _Id
                       select items;
            }
        }

        public IQueryable<Product_ProductAttribute_Mapping> Product_ProductAttribute_Mappings
        {
            get
            {
                
                  var repo=AliexpressDBA.Product_ProductAttribute_Mapping.GetRepo();
                  return from items in repo.GetAll()
                       where items.ProductId == _Id
                       select items;
            }
        }

        public IQueryable<ShoppingCartItem> ShoppingCartItems
        {
            get
            {
                
                  var repo=AliexpressDBA.ShoppingCartItem.GetRepo();
                  return from items in repo.GetAll()
                       where items.ProductId == _Id
                       select items;
            }
        }

        public IQueryable<StockQuantityHistory> StockQuantityHistories
        {
            get
            {
                
                  var repo=AliexpressDBA.StockQuantityHistory.GetRepo();
                  return from items in repo.GetAll()
                       where items.ProductId == _Id
                       select items;
            }
        }

        public IQueryable<TierPrice> TierPrices
        {
            get
            {
                
                  var repo=AliexpressDBA.TierPrice.GetRepo();
                  return from items in repo.GetAll()
                       where items.ProductId == _Id
                       select items;
            }
        }

        public IQueryable<Product_Category_Mapping> Product_Category_Mappings
        {
            get
            {
                
                  var repo=AliexpressDBA.Product_Category_Mapping.GetRepo();
                  return from items in repo.GetAll()
                       where items.ProductId == _Id
                       select items;
            }
        }

        public IQueryable<Product_Manufacturer_Mapping> Product_Manufacturer_Mappings
        {
            get
            {
                
                  var repo=AliexpressDBA.Product_Manufacturer_Mapping.GetRepo();
                  return from items in repo.GetAll()
                       where items.ProductId == _Id
                       select items;
            }
        }

        public IQueryable<Product_Picture_Mapping> Product_Picture_Mappings
        {
            get
            {
                
                  var repo=AliexpressDBA.Product_Picture_Mapping.GetRepo();
                  return from items in repo.GetAll()
                       where items.ProductId == _Id
                       select items;
            }
        }

        public IQueryable<ProductReview> ProductReviews
        {
            get
            {
                
                  var repo=AliexpressDBA.ProductReview.GetRepo();
                  return from items in repo.GetAll()
                       where items.ProductId == _Id
                       select items;
            }
        }

        public IQueryable<Product_SpecificationAttribute_Mapping> Product_SpecificationAttribute_Mappings
        {
            get
            {
                
                  var repo=AliexpressDBA.Product_SpecificationAttribute_Mapping.GetRepo();
                  return from items in repo.GetAll()
                       where items.ProductId == _Id
                       select items;
            }
        }

        public IQueryable<ProductWarehouseInventory> ProductWarehouseInventories
        {
            get
            {
                
                  var repo=AliexpressDBA.ProductWarehouseInventory.GetRepo();
                  return from items in repo.GetAll()
                       where items.ProductId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductTypeId;
        public int ProductTypeId
        {
            get { return _ProductTypeId; }
            set
            {
                if(_ProductTypeId!=value){
                    _ProductTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ParentGroupedProductId;
        public int ParentGroupedProductId
        {
            get { return _ParentGroupedProductId; }
            set
            {
                if(_ParentGroupedProductId!=value){
                    _ParentGroupedProductId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ParentGroupedProductId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _VisibleIndividually;
        public bool VisibleIndividually
        {
            get { return _VisibleIndividually; }
            set
            {
                if(_VisibleIndividually!=value){
                    _VisibleIndividually=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VisibleIndividually");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ShortDescription;
        public string ShortDescription
        {
            get { return _ShortDescription; }
            set
            {
                if(_ShortDescription!=value){
                    _ShortDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ShortDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _FullDescription;
        public string FullDescription
        {
            get { return _FullDescription; }
            set
            {
                if(_FullDescription!=value){
                    _FullDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="FullDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AdminComment;
        public string AdminComment
        {
            get { return _AdminComment; }
            set
            {
                if(_AdminComment!=value){
                    _AdminComment=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdminComment");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductTemplateId;
        public int ProductTemplateId
        {
            get { return _ProductTemplateId; }
            set
            {
                if(_ProductTemplateId!=value){
                    _ProductTemplateId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductTemplateId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _VendorId;
        public int VendorId
        {
            get { return _VendorId; }
            set
            {
                if(_VendorId!=value){
                    _VendorId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="VendorId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _ShowOnHomePage;
        public bool ShowOnHomePage
        {
            get { return _ShowOnHomePage; }
            set
            {
                if(_ShowOnHomePage!=value){
                    _ShowOnHomePage=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ShowOnHomePage");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaKeywords;
        public string MetaKeywords
        {
            get { return _MetaKeywords; }
            set
            {
                if(_MetaKeywords!=value){
                    _MetaKeywords=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaKeywords");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaDescription;
        public string MetaDescription
        {
            get { return _MetaDescription; }
            set
            {
                if(_MetaDescription!=value){
                    _MetaDescription=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaDescription");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _MetaTitle;
        public string MetaTitle
        {
            get { return _MetaTitle; }
            set
            {
                if(_MetaTitle!=value){
                    _MetaTitle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MetaTitle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _AllowCustomerReviews;
        public bool AllowCustomerReviews
        {
            get { return _AllowCustomerReviews; }
            set
            {
                if(_AllowCustomerReviews!=value){
                    _AllowCustomerReviews=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AllowCustomerReviews");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ApprovedRatingSum;
        public int ApprovedRatingSum
        {
            get { return _ApprovedRatingSum; }
            set
            {
                if(_ApprovedRatingSum!=value){
                    _ApprovedRatingSum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ApprovedRatingSum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _NotApprovedRatingSum;
        public int NotApprovedRatingSum
        {
            get { return _NotApprovedRatingSum; }
            set
            {
                if(_NotApprovedRatingSum!=value){
                    _NotApprovedRatingSum=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NotApprovedRatingSum");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ApprovedTotalReviews;
        public int ApprovedTotalReviews
        {
            get { return _ApprovedTotalReviews; }
            set
            {
                if(_ApprovedTotalReviews!=value){
                    _ApprovedTotalReviews=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ApprovedTotalReviews");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _NotApprovedTotalReviews;
        public int NotApprovedTotalReviews
        {
            get { return _NotApprovedTotalReviews; }
            set
            {
                if(_NotApprovedTotalReviews!=value){
                    _NotApprovedTotalReviews=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NotApprovedTotalReviews");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _SubjectToAcl;
        public bool SubjectToAcl
        {
            get { return _SubjectToAcl; }
            set
            {
                if(_SubjectToAcl!=value){
                    _SubjectToAcl=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SubjectToAcl");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _LimitedToStores;
        public bool LimitedToStores
        {
            get { return _LimitedToStores; }
            set
            {
                if(_LimitedToStores!=value){
                    _LimitedToStores=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LimitedToStores");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Sku;
        public string Sku
        {
            get { return _Sku; }
            set
            {
                if(_Sku!=value){
                    _Sku=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Sku");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ManufacturerPartNumber;
        public string ManufacturerPartNumber
        {
            get { return _ManufacturerPartNumber; }
            set
            {
                if(_ManufacturerPartNumber!=value){
                    _ManufacturerPartNumber=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ManufacturerPartNumber");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Gtin;
        public string Gtin
        {
            get { return _Gtin; }
            set
            {
                if(_Gtin!=value){
                    _Gtin=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Gtin");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsGiftCard;
        public bool IsGiftCard
        {
            get { return _IsGiftCard; }
            set
            {
                if(_IsGiftCard!=value){
                    _IsGiftCard=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsGiftCard");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _GiftCardTypeId;
        public int GiftCardTypeId
        {
            get { return _GiftCardTypeId; }
            set
            {
                if(_GiftCardTypeId!=value){
                    _GiftCardTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="GiftCardTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal? _OverriddenGiftCardAmount;
        public decimal? OverriddenGiftCardAmount
        {
            get { return _OverriddenGiftCardAmount; }
            set
            {
                if(_OverriddenGiftCardAmount!=value){
                    _OverriddenGiftCardAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OverriddenGiftCardAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _RequireOtherProducts;
        public bool RequireOtherProducts
        {
            get { return _RequireOtherProducts; }
            set
            {
                if(_RequireOtherProducts!=value){
                    _RequireOtherProducts=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RequireOtherProducts");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _RequiredProductIds;
        public string RequiredProductIds
        {
            get { return _RequiredProductIds; }
            set
            {
                if(_RequiredProductIds!=value){
                    _RequiredProductIds=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RequiredProductIds");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _AutomaticallyAddRequiredProducts;
        public bool AutomaticallyAddRequiredProducts
        {
            get { return _AutomaticallyAddRequiredProducts; }
            set
            {
                if(_AutomaticallyAddRequiredProducts!=value){
                    _AutomaticallyAddRequiredProducts=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AutomaticallyAddRequiredProducts");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsDownload;
        public bool IsDownload
        {
            get { return _IsDownload; }
            set
            {
                if(_IsDownload!=value){
                    _IsDownload=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsDownload");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DownloadId;
        public int DownloadId
        {
            get { return _DownloadId; }
            set
            {
                if(_DownloadId!=value){
                    _DownloadId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DownloadId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _UnlimitedDownloads;
        public bool UnlimitedDownloads
        {
            get { return _UnlimitedDownloads; }
            set
            {
                if(_UnlimitedDownloads!=value){
                    _UnlimitedDownloads=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UnlimitedDownloads");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _MaxNumberOfDownloads;
        public int MaxNumberOfDownloads
        {
            get { return _MaxNumberOfDownloads; }
            set
            {
                if(_MaxNumberOfDownloads!=value){
                    _MaxNumberOfDownloads=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MaxNumberOfDownloads");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _DownloadExpirationDays;
        public int? DownloadExpirationDays
        {
            get { return _DownloadExpirationDays; }
            set
            {
                if(_DownloadExpirationDays!=value){
                    _DownloadExpirationDays=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DownloadExpirationDays");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DownloadActivationTypeId;
        public int DownloadActivationTypeId
        {
            get { return _DownloadActivationTypeId; }
            set
            {
                if(_DownloadActivationTypeId!=value){
                    _DownloadActivationTypeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DownloadActivationTypeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _HasSampleDownload;
        public bool HasSampleDownload
        {
            get { return _HasSampleDownload; }
            set
            {
                if(_HasSampleDownload!=value){
                    _HasSampleDownload=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HasSampleDownload");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _SampleDownloadId;
        public int SampleDownloadId
        {
            get { return _SampleDownloadId; }
            set
            {
                if(_SampleDownloadId!=value){
                    _SampleDownloadId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="SampleDownloadId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _HasUserAgreement;
        public bool HasUserAgreement
        {
            get { return _HasUserAgreement; }
            set
            {
                if(_HasUserAgreement!=value){
                    _HasUserAgreement=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HasUserAgreement");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _UserAgreementText;
        public string UserAgreementText
        {
            get { return _UserAgreementText; }
            set
            {
                if(_UserAgreementText!=value){
                    _UserAgreementText=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UserAgreementText");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsRecurring;
        public bool IsRecurring
        {
            get { return _IsRecurring; }
            set
            {
                if(_IsRecurring!=value){
                    _IsRecurring=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsRecurring");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _RecurringCycleLength;
        public int RecurringCycleLength
        {
            get { return _RecurringCycleLength; }
            set
            {
                if(_RecurringCycleLength!=value){
                    _RecurringCycleLength=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RecurringCycleLength");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _RecurringCyclePeriodId;
        public int RecurringCyclePeriodId
        {
            get { return _RecurringCyclePeriodId; }
            set
            {
                if(_RecurringCyclePeriodId!=value){
                    _RecurringCyclePeriodId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RecurringCyclePeriodId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _RecurringTotalCycles;
        public int RecurringTotalCycles
        {
            get { return _RecurringTotalCycles; }
            set
            {
                if(_RecurringTotalCycles!=value){
                    _RecurringTotalCycles=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RecurringTotalCycles");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsRental;
        public bool IsRental
        {
            get { return _IsRental; }
            set
            {
                if(_IsRental!=value){
                    _IsRental=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsRental");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _RentalPriceLength;
        public int RentalPriceLength
        {
            get { return _RentalPriceLength; }
            set
            {
                if(_RentalPriceLength!=value){
                    _RentalPriceLength=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RentalPriceLength");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _RentalPricePeriodId;
        public int RentalPricePeriodId
        {
            get { return _RentalPricePeriodId; }
            set
            {
                if(_RentalPricePeriodId!=value){
                    _RentalPricePeriodId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="RentalPricePeriodId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsShipEnabled;
        public bool IsShipEnabled
        {
            get { return _IsShipEnabled; }
            set
            {
                if(_IsShipEnabled!=value){
                    _IsShipEnabled=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsShipEnabled");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsFreeShipping;
        public bool IsFreeShipping
        {
            get { return _IsFreeShipping; }
            set
            {
                if(_IsFreeShipping!=value){
                    _IsFreeShipping=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsFreeShipping");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _ShipSeparately;
        public bool ShipSeparately
        {
            get { return _ShipSeparately; }
            set
            {
                if(_ShipSeparately!=value){
                    _ShipSeparately=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ShipSeparately");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _AdditionalShippingCharge;
        public decimal AdditionalShippingCharge
        {
            get { return _AdditionalShippingCharge; }
            set
            {
                if(_AdditionalShippingCharge!=value){
                    _AdditionalShippingCharge=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AdditionalShippingCharge");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DeliveryDateId;
        public int DeliveryDateId
        {
            get { return _DeliveryDateId; }
            set
            {
                if(_DeliveryDateId!=value){
                    _DeliveryDateId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DeliveryDateId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsTaxExempt;
        public bool IsTaxExempt
        {
            get { return _IsTaxExempt; }
            set
            {
                if(_IsTaxExempt!=value){
                    _IsTaxExempt=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsTaxExempt");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _TaxCategoryId;
        public int TaxCategoryId
        {
            get { return _TaxCategoryId; }
            set
            {
                if(_TaxCategoryId!=value){
                    _TaxCategoryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TaxCategoryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _IsTelecommunicationsOrBroadcastingOrElectronicServices;
        public bool IsTelecommunicationsOrBroadcastingOrElectronicServices
        {
            get { return _IsTelecommunicationsOrBroadcastingOrElectronicServices; }
            set
            {
                if(_IsTelecommunicationsOrBroadcastingOrElectronicServices!=value){
                    _IsTelecommunicationsOrBroadcastingOrElectronicServices=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="IsTelecommunicationsOrBroadcastingOrElectronicServices");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ManageInventoryMethodId;
        public int ManageInventoryMethodId
        {
            get { return _ManageInventoryMethodId; }
            set
            {
                if(_ManageInventoryMethodId!=value){
                    _ManageInventoryMethodId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ManageInventoryMethodId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductAvailabilityRangeId;
        public int ProductAvailabilityRangeId
        {
            get { return _ProductAvailabilityRangeId; }
            set
            {
                if(_ProductAvailabilityRangeId!=value){
                    _ProductAvailabilityRangeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductAvailabilityRangeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _UseMultipleWarehouses;
        public bool UseMultipleWarehouses
        {
            get { return _UseMultipleWarehouses; }
            set
            {
                if(_UseMultipleWarehouses!=value){
                    _UseMultipleWarehouses=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UseMultipleWarehouses");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _WarehouseId;
        public int WarehouseId
        {
            get { return _WarehouseId; }
            set
            {
                if(_WarehouseId!=value){
                    _WarehouseId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="WarehouseId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _StockQuantity;
        public int StockQuantity
        {
            get { return _StockQuantity; }
            set
            {
                if(_StockQuantity!=value){
                    _StockQuantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="StockQuantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _DisplayStockAvailability;
        public bool DisplayStockAvailability
        {
            get { return _DisplayStockAvailability; }
            set
            {
                if(_DisplayStockAvailability!=value){
                    _DisplayStockAvailability=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayStockAvailability");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _DisplayStockQuantity;
        public bool DisplayStockQuantity
        {
            get { return _DisplayStockQuantity; }
            set
            {
                if(_DisplayStockQuantity!=value){
                    _DisplayStockQuantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayStockQuantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _MinStockQuantity;
        public int MinStockQuantity
        {
            get { return _MinStockQuantity; }
            set
            {
                if(_MinStockQuantity!=value){
                    _MinStockQuantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinStockQuantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _LowStockActivityId;
        public int LowStockActivityId
        {
            get { return _LowStockActivityId; }
            set
            {
                if(_LowStockActivityId!=value){
                    _LowStockActivityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="LowStockActivityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _NotifyAdminForQuantityBelow;
        public int NotifyAdminForQuantityBelow
        {
            get { return _NotifyAdminForQuantityBelow; }
            set
            {
                if(_NotifyAdminForQuantityBelow!=value){
                    _NotifyAdminForQuantityBelow=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NotifyAdminForQuantityBelow");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _BackorderModeId;
        public int BackorderModeId
        {
            get { return _BackorderModeId; }
            set
            {
                if(_BackorderModeId!=value){
                    _BackorderModeId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BackorderModeId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _AllowBackInStockSubscriptions;
        public bool AllowBackInStockSubscriptions
        {
            get { return _AllowBackInStockSubscriptions; }
            set
            {
                if(_AllowBackInStockSubscriptions!=value){
                    _AllowBackInStockSubscriptions=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AllowBackInStockSubscriptions");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderMinimumQuantity;
        public int OrderMinimumQuantity
        {
            get { return _OrderMinimumQuantity; }
            set
            {
                if(_OrderMinimumQuantity!=value){
                    _OrderMinimumQuantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderMinimumQuantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _OrderMaximumQuantity;
        public int OrderMaximumQuantity
        {
            get { return _OrderMaximumQuantity; }
            set
            {
                if(_OrderMaximumQuantity!=value){
                    _OrderMaximumQuantity=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OrderMaximumQuantity");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _AllowedQuantities;
        public string AllowedQuantities
        {
            get { return _AllowedQuantities; }
            set
            {
                if(_AllowedQuantities!=value){
                    _AllowedQuantities=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AllowedQuantities");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _AllowAddingOnlyExistingAttributeCombinations;
        public bool AllowAddingOnlyExistingAttributeCombinations
        {
            get { return _AllowAddingOnlyExistingAttributeCombinations; }
            set
            {
                if(_AllowAddingOnlyExistingAttributeCombinations!=value){
                    _AllowAddingOnlyExistingAttributeCombinations=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AllowAddingOnlyExistingAttributeCombinations");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _NotReturnable;
        public bool NotReturnable
        {
            get { return _NotReturnable; }
            set
            {
                if(_NotReturnable!=value){
                    _NotReturnable=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="NotReturnable");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _DisableBuyButton;
        public bool DisableBuyButton
        {
            get { return _DisableBuyButton; }
            set
            {
                if(_DisableBuyButton!=value){
                    _DisableBuyButton=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisableBuyButton");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _DisableWishlistButton;
        public bool DisableWishlistButton
        {
            get { return _DisableWishlistButton; }
            set
            {
                if(_DisableWishlistButton!=value){
                    _DisableWishlistButton=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisableWishlistButton");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _AvailableForPreOrder;
        public bool AvailableForPreOrder
        {
            get { return _AvailableForPreOrder; }
            set
            {
                if(_AvailableForPreOrder!=value){
                    _AvailableForPreOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AvailableForPreOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _PreOrderAvailabilityStartDateTimeUtc;
        public DateTime? PreOrderAvailabilityStartDateTimeUtc
        {
            get { return _PreOrderAvailabilityStartDateTimeUtc; }
            set
            {
                if(_PreOrderAvailabilityStartDateTimeUtc!=value){
                    _PreOrderAvailabilityStartDateTimeUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PreOrderAvailabilityStartDateTimeUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _CallForPrice;
        public bool CallForPrice
        {
            get { return _CallForPrice; }
            set
            {
                if(_CallForPrice!=value){
                    _CallForPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CallForPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _Price;
        public decimal Price
        {
            get { return _Price; }
            set
            {
                if(_Price!=value){
                    _Price=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Price");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _OldPrice;
        public decimal OldPrice
        {
            get { return _OldPrice; }
            set
            {
                if(_OldPrice!=value){
                    _OldPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OldPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _ProductCost;
        public decimal ProductCost
        {
            get { return _ProductCost; }
            set
            {
                if(_ProductCost!=value){
                    _ProductCost=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductCost");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _CustomerEntersPrice;
        public bool CustomerEntersPrice
        {
            get { return _CustomerEntersPrice; }
            set
            {
                if(_CustomerEntersPrice!=value){
                    _CustomerEntersPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerEntersPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _MinimumCustomerEnteredPrice;
        public decimal MinimumCustomerEnteredPrice
        {
            get { return _MinimumCustomerEnteredPrice; }
            set
            {
                if(_MinimumCustomerEnteredPrice!=value){
                    _MinimumCustomerEnteredPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MinimumCustomerEnteredPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _MaximumCustomerEnteredPrice;
        public decimal MaximumCustomerEnteredPrice
        {
            get { return _MaximumCustomerEnteredPrice; }
            set
            {
                if(_MaximumCustomerEnteredPrice!=value){
                    _MaximumCustomerEnteredPrice=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MaximumCustomerEnteredPrice");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _BasepriceEnabled;
        public bool BasepriceEnabled
        {
            get { return _BasepriceEnabled; }
            set
            {
                if(_BasepriceEnabled!=value){
                    _BasepriceEnabled=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BasepriceEnabled");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _BasepriceAmount;
        public decimal BasepriceAmount
        {
            get { return _BasepriceAmount; }
            set
            {
                if(_BasepriceAmount!=value){
                    _BasepriceAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BasepriceAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _BasepriceUnitId;
        public int BasepriceUnitId
        {
            get { return _BasepriceUnitId; }
            set
            {
                if(_BasepriceUnitId!=value){
                    _BasepriceUnitId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BasepriceUnitId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _BasepriceBaseAmount;
        public decimal BasepriceBaseAmount
        {
            get { return _BasepriceBaseAmount; }
            set
            {
                if(_BasepriceBaseAmount!=value){
                    _BasepriceBaseAmount=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BasepriceBaseAmount");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _BasepriceBaseUnitId;
        public int BasepriceBaseUnitId
        {
            get { return _BasepriceBaseUnitId; }
            set
            {
                if(_BasepriceBaseUnitId!=value){
                    _BasepriceBaseUnitId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="BasepriceBaseUnitId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _MarkAsNew;
        public bool MarkAsNew
        {
            get { return _MarkAsNew; }
            set
            {
                if(_MarkAsNew!=value){
                    _MarkAsNew=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MarkAsNew");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _MarkAsNewStartDateTimeUtc;
        public DateTime? MarkAsNewStartDateTimeUtc
        {
            get { return _MarkAsNewStartDateTimeUtc; }
            set
            {
                if(_MarkAsNewStartDateTimeUtc!=value){
                    _MarkAsNewStartDateTimeUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MarkAsNewStartDateTimeUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _MarkAsNewEndDateTimeUtc;
        public DateTime? MarkAsNewEndDateTimeUtc
        {
            get { return _MarkAsNewEndDateTimeUtc; }
            set
            {
                if(_MarkAsNewEndDateTimeUtc!=value){
                    _MarkAsNewEndDateTimeUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="MarkAsNewEndDateTimeUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _HasTierPrices;
        public bool HasTierPrices
        {
            get { return _HasTierPrices; }
            set
            {
                if(_HasTierPrices!=value){
                    _HasTierPrices=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HasTierPrices");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _HasDiscountsApplied;
        public bool HasDiscountsApplied
        {
            get { return _HasDiscountsApplied; }
            set
            {
                if(_HasDiscountsApplied!=value){
                    _HasDiscountsApplied=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="HasDiscountsApplied");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _Weight;
        public decimal Weight
        {
            get { return _Weight; }
            set
            {
                if(_Weight!=value){
                    _Weight=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Weight");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _Length;
        public decimal Length
        {
            get { return _Length; }
            set
            {
                if(_Length!=value){
                    _Length=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Length");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _Width;
        public decimal Width
        {
            get { return _Width; }
            set
            {
                if(_Width!=value){
                    _Width=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Width");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        decimal _Height;
        public decimal Height
        {
            get { return _Height; }
            set
            {
                if(_Height!=value){
                    _Height=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Height");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _AvailableStartDateTimeUtc;
        public DateTime? AvailableStartDateTimeUtc
        {
            get { return _AvailableStartDateTimeUtc; }
            set
            {
                if(_AvailableStartDateTimeUtc!=value){
                    _AvailableStartDateTimeUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AvailableStartDateTimeUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime? _AvailableEndDateTimeUtc;
        public DateTime? AvailableEndDateTimeUtc
        {
            get { return _AvailableEndDateTimeUtc; }
            set
            {
                if(_AvailableEndDateTimeUtc!=value){
                    _AvailableEndDateTimeUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="AvailableEndDateTimeUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Published;
        public bool Published
        {
            get { return _Published; }
            set
            {
                if(_Published!=value){
                    _Published=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Published");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Deleted;
        public bool Deleted
        {
            get { return _Deleted; }
            set
            {
                if(_Deleted!=value){
                    _Deleted=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Deleted");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _CreatedOnUtc;
        public DateTime CreatedOnUtc
        {
            get { return _CreatedOnUtc; }
            set
            {
                if(_CreatedOnUtc!=value){
                    _CreatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CreatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        DateTime _UpdatedOnUtc;
        public DateTime UpdatedOnUtc
        {
            get { return _UpdatedOnUtc; }
            set
            {
                if(_UpdatedOnUtc!=value){
                    _UpdatedOnUtc=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="UpdatedOnUtc");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                         
             this.Deleted=true;
            _repo.Update(this,provider);
                
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<Product, bool>> expression) {
            var repo = GetRepo();
            
            
            List<Product> items=repo.GetAll().Where(expression).ToList();
            items.ForEach(x=>x.Deleted=true);
            repo.Update(items);
            
        }

                
        public static void Destroy(Func<Product, bool> expression) {
            var repo = GetRepo();
            repo.Delete(expression);
        }
        
        public static void Destroy(object key) {
            var repo = GetRepo();
            repo.Delete(key);
        }
        
        public static void Destroy(object key, IDataProvider provider) {
        
            var repo = GetRepo();
            repo.Delete(key,provider);
            
        }        
        
        public void Destroy() {
            _repo.Delete(KeyValue());
        }        
        public void Destroy(IDataProvider provider) {
            _repo.Delete(KeyValue(), provider);
        }         
        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the AclRecord table in the AliexpressDB Database.
    /// </summary>
    public partial class AclRecord: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<AclRecord> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<AclRecord>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<AclRecord> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(AclRecord item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                AclRecord item=new AclRecord();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<AclRecord> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public AclRecord(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                AclRecord.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AclRecord>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public AclRecord(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public AclRecord(Expression<Func<AclRecord, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<AclRecord> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<AclRecord> _repo;
            
            if(db.TestMode){
                AclRecord.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<AclRecord>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<AclRecord> GetRepo(){
            return GetRepo("","");
        }
        
        public static AclRecord SingleOrDefault(Expression<Func<AclRecord, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            AclRecord single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static AclRecord SingleOrDefault(Expression<Func<AclRecord, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            AclRecord single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<AclRecord, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<AclRecord, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<AclRecord> Find(Expression<Func<AclRecord, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<AclRecord> Find(Expression<Func<AclRecord, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<AclRecord> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<AclRecord> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<AclRecord> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<AclRecord> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<AclRecord> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<AclRecord> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.EntityName.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(AclRecord)){
                AclRecord compare=(AclRecord)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.EntityName.ToString();
                    }

        public string DescriptorColumn() {
            return "EntityName";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "EntityName";
        }
        
        #region ' Foreign Keys '
        public IQueryable<CustomerRole> CustomerRoles
        {
            get
            {
                
                  var repo=AliexpressDBA.CustomerRole.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerRoleId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _EntityId;
        public int EntityId
        {
            get { return _EntityId; }
            set
            {
                if(_EntityId!=value){
                    _EntityId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _EntityName;
        public string EntityName
        {
            get { return _EntityName; }
            set
            {
                if(_EntityName!=value){
                    _EntityName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="EntityName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerRoleId;
        public int CustomerRoleId
        {
            get { return _CustomerRoleId; }
            set
            {
                if(_CustomerRoleId!=value){
                    _CustomerRoleId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerRoleId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<AclRecord, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the SS_PR_ProductPageRibbon table in the AliexpressDB Database.
    /// </summary>
    public partial class SS_PR_ProductPageRibbon: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<SS_PR_ProductPageRibbon> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<SS_PR_ProductPageRibbon>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<SS_PR_ProductPageRibbon> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(SS_PR_ProductPageRibbon item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                SS_PR_ProductPageRibbon item=new SS_PR_ProductPageRibbon();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<SS_PR_ProductPageRibbon> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public SS_PR_ProductPageRibbon(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                SS_PR_ProductPageRibbon.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_PR_ProductPageRibbon>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public SS_PR_ProductPageRibbon(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public SS_PR_ProductPageRibbon(Expression<Func<SS_PR_ProductPageRibbon, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<SS_PR_ProductPageRibbon> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<SS_PR_ProductPageRibbon> _repo;
            
            if(db.TestMode){
                SS_PR_ProductPageRibbon.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<SS_PR_ProductPageRibbon>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<SS_PR_ProductPageRibbon> GetRepo(){
            return GetRepo("","");
        }
        
        public static SS_PR_ProductPageRibbon SingleOrDefault(Expression<Func<SS_PR_ProductPageRibbon, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            SS_PR_ProductPageRibbon single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static SS_PR_ProductPageRibbon SingleOrDefault(Expression<Func<SS_PR_ProductPageRibbon, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            SS_PR_ProductPageRibbon single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<SS_PR_ProductPageRibbon, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<SS_PR_ProductPageRibbon, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<SS_PR_ProductPageRibbon> Find(Expression<Func<SS_PR_ProductPageRibbon, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<SS_PR_ProductPageRibbon> Find(Expression<Func<SS_PR_ProductPageRibbon, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<SS_PR_ProductPageRibbon> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<SS_PR_ProductPageRibbon> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<SS_PR_ProductPageRibbon> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<SS_PR_ProductPageRibbon> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<SS_PR_ProductPageRibbon> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<SS_PR_ProductPageRibbon> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Text.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(SS_PR_ProductPageRibbon)){
                SS_PR_ProductPageRibbon compare=(SS_PR_ProductPageRibbon)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Text.ToString();
                    }

        public string DescriptorColumn() {
            return "Text";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Text";
        }
        
        #region ' Foreign Keys '
        public IQueryable<SS_PR_ProductRibbon> SS_PR_ProductRibbons
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_PR_ProductRibbon.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _ProductRibbonId
                       select items;
            }
        }

        public IQueryable<SS_PR_RibbonPicture> SS_PR_RibbonPictures
        {
            get
            {
                
                  var repo=AliexpressDBA.SS_PR_RibbonPicture.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _PictureId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _ProductRibbonId;
        public int ProductRibbonId
        {
            get { return _ProductRibbonId; }
            set
            {
                if(_ProductRibbonId!=value){
                    _ProductRibbonId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProductRibbonId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int? _PictureId;
        public int? PictureId
        {
            get { return _PictureId; }
            set
            {
                if(_PictureId!=value){
                    _PictureId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="PictureId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Enabled;
        public bool Enabled
        {
            get { return _Enabled; }
            set
            {
                if(_Enabled!=value){
                    _Enabled=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Enabled");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Text;
        public string Text
        {
            get { return _Text; }
            set
            {
                if(_Text!=value){
                    _Text=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Text");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Position;
        public string Position
        {
            get { return _Position; }
            set
            {
                if(_Position!=value){
                    _Position=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Position");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _TextStyle;
        public string TextStyle
        {
            get { return _TextStyle; }
            set
            {
                if(_TextStyle!=value){
                    _TextStyle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="TextStyle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ImageStyle;
        public string ImageStyle
        {
            get { return _ImageStyle; }
            set
            {
                if(_ImageStyle!=value){
                    _ImageStyle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ImageStyle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ContainerStyle;
        public string ContainerStyle
        {
            get { return _ContainerStyle; }
            set
            {
                if(_ContainerStyle!=value){
                    _ContainerStyle=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ContainerStyle");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<SS_PR_ProductPageRibbon, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the StateProvince table in the AliexpressDB Database.
    /// </summary>
    public partial class StateProvince: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<StateProvince> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<StateProvince>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<StateProvince> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(StateProvince item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                StateProvince item=new StateProvince();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<StateProvince> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public StateProvince(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                StateProvince.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<StateProvince>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public StateProvince(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public StateProvince(Expression<Func<StateProvince, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<StateProvince> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<StateProvince> _repo;
            
            if(db.TestMode){
                StateProvince.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<StateProvince>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<StateProvince> GetRepo(){
            return GetRepo("","");
        }
        
        public static StateProvince SingleOrDefault(Expression<Func<StateProvince, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            StateProvince single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static StateProvince SingleOrDefault(Expression<Func<StateProvince, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            StateProvince single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<StateProvince, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<StateProvince, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<StateProvince> Find(Expression<Func<StateProvince, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<StateProvince> Find(Expression<Func<StateProvince, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<StateProvince> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<StateProvince> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<StateProvince> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<StateProvince> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<StateProvince> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<StateProvince> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Name.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(StateProvince)){
                StateProvince compare=(StateProvince)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Name.ToString();
                    }

        public string DescriptorColumn() {
            return "Name";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Name";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Country> Countries
        {
            get
            {
                
                  var repo=AliexpressDBA.Country.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CountryId
                       select items;
            }
        }

        public IQueryable<Address> Addresses
        {
            get
            {
                
                  var repo=AliexpressDBA.Address.GetRepo();
                  return from items in repo.GetAll()
                       where items.StateProvinceId == _Id
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CountryId;
        public int CountryId
        {
            get { return _CountryId; }
            set
            {
                if(_CountryId!=value){
                    _CountryId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CountryId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Name;
        public string Name
        {
            get { return _Name; }
            set
            {
                if(_Name!=value){
                    _Name=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Name");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Abbreviation;
        public string Abbreviation
        {
            get { return _Abbreviation; }
            set
            {
                if(_Abbreviation!=value){
                    _Abbreviation=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Abbreviation");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        bool _Published;
        public bool Published
        {
            get { return _Published; }
            set
            {
                if(_Published!=value){
                    _Published=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Published");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _DisplayOrder;
        public int DisplayOrder
        {
            get { return _DisplayOrder; }
            set
            {
                if(_DisplayOrder!=value){
                    _DisplayOrder=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="DisplayOrder");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<StateProvince, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
    
    
    /// <summary>
    /// A class which represents the ExternalAuthenticationRecord table in the AliexpressDB Database.
    /// </summary>
    public partial class ExternalAuthenticationRecord: IActiveRecord
    {
    
        #region Built-in testing
        static TestRepository<ExternalAuthenticationRecord> _testRepo;
        

        
        static void SetTestRepo(){
            _testRepo = _testRepo ?? new TestRepository<ExternalAuthenticationRecord>(new AliexpressDBA.AliexpressDBDB());
        }
        public static void ResetTestRepo(){
            _testRepo = null;
            SetTestRepo();
        }
        public static void Setup(List<ExternalAuthenticationRecord> testlist){
            SetTestRepo();
            foreach (var item in testlist)
            {
                _testRepo._items.Add(item);
            }
        }
        public static void Setup(ExternalAuthenticationRecord item) {
            SetTestRepo();
            _testRepo._items.Add(item);
        }
        public static void Setup(int testItems) {
            SetTestRepo();
            for(int i=0;i<testItems;i++){
                ExternalAuthenticationRecord item=new ExternalAuthenticationRecord();
                _testRepo._items.Add(item);
            }
        }
        
        public bool TestMode = false;


        #endregion

        IRepository<ExternalAuthenticationRecord> _repo;
        ITable tbl;
        bool _isNew;
        public bool IsNew(){
            return _isNew;
        }
        
        public void SetIsLoaded(bool isLoaded){
            _isLoaded=isLoaded;
            if(isLoaded)
                OnLoaded();
        }
        
        public void SetIsNew(bool isNew){
            _isNew=isNew;
        }
        bool _isLoaded;
        public bool IsLoaded(){
            return _isLoaded;
        }
                
        List<IColumn> _dirtyColumns;
        public bool IsDirty(){
            return _dirtyColumns.Count>0;
        }
        
        public List<IColumn> GetDirtyColumns (){
            return _dirtyColumns;
        }

        AliexpressDBA.AliexpressDBDB _db;
        public ExternalAuthenticationRecord(string connectionString, string providerName) {

            _db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            Init();            
         }
        void Init(){
            TestMode=this._db.DataProvider.ConnectionString.Equals("test", StringComparison.InvariantCultureIgnoreCase);
            _dirtyColumns=new List<IColumn>();
            if(TestMode){
                ExternalAuthenticationRecord.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ExternalAuthenticationRecord>(_db);
            }
            tbl=_repo.GetTable();
            SetIsNew(true);
            OnCreated();       

        }
        
        public ExternalAuthenticationRecord(){
             _db=new AliexpressDBA.AliexpressDBDB();
            Init();            
        }
        
       
        partial void OnCreated();
            
        partial void OnLoaded();
        
        partial void OnSaved();
        
        partial void OnChanged();
        
        public IList<IColumn> Columns{
            get{
                return tbl.Columns;
            }
        }

        public ExternalAuthenticationRecord(Expression<Func<ExternalAuthenticationRecord, bool>> expression):this() {

            SetIsLoaded(_repo.Load(this,expression));
        }
        
       
        
        internal static IRepository<ExternalAuthenticationRecord> GetRepo(string connectionString, string providerName){
            AliexpressDBA.AliexpressDBDB db;
            if(String.IsNullOrEmpty(connectionString)){
                db=new AliexpressDBA.AliexpressDBDB();
            }else{
                db=new AliexpressDBA.AliexpressDBDB(connectionString, providerName);
            }
            IRepository<ExternalAuthenticationRecord> _repo;
            
            if(db.TestMode){
                ExternalAuthenticationRecord.SetTestRepo();
                _repo=_testRepo;
            }else{
                _repo = new SubSonicRepository<ExternalAuthenticationRecord>(db);
            }
            return _repo;        
        }       
        
        internal static IRepository<ExternalAuthenticationRecord> GetRepo(){
            return GetRepo("","");
        }
        
        public static ExternalAuthenticationRecord SingleOrDefault(Expression<Func<ExternalAuthenticationRecord, bool>> expression) {

            var repo = GetRepo();
            var results=repo.Find(expression);
            ExternalAuthenticationRecord single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
                single.OnLoaded();
                single.SetIsLoaded(true);
                single.SetIsNew(false);
            }

            return single;
        }      
        
        public static ExternalAuthenticationRecord SingleOrDefault(Expression<Func<ExternalAuthenticationRecord, bool>> expression,string connectionString, string providerName) {
            var repo = GetRepo(connectionString,providerName);
            var results=repo.Find(expression);
            ExternalAuthenticationRecord single=null;
            if(results.Count() > 0){
                single=results.ToList()[0];
            }

            return single;


        }
        
        
        public static bool Exists(Expression<Func<ExternalAuthenticationRecord, bool>> expression,string connectionString, string providerName) {
           
            return All(connectionString,providerName).Any(expression);
        }        
        public static bool Exists(Expression<Func<ExternalAuthenticationRecord, bool>> expression) {
           
            return All().Any(expression);
        }        

        public static IList<ExternalAuthenticationRecord> Find(Expression<Func<ExternalAuthenticationRecord, bool>> expression) {
            
            var repo = GetRepo();
            return repo.Find(expression).ToList();
        }
        
        public static IList<ExternalAuthenticationRecord> Find(Expression<Func<ExternalAuthenticationRecord, bool>> expression,string connectionString, string providerName) {

            var repo = GetRepo(connectionString,providerName);
            return repo.Find(expression).ToList();

        }
        public static IQueryable<ExternalAuthenticationRecord> All(string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetAll();
        }
        public static IQueryable<ExternalAuthenticationRecord> All() {
            return GetRepo().GetAll();
        }
        
        public static PagedList<ExternalAuthenticationRecord> GetPaged(string sortBy, int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(sortBy, pageIndex, pageSize);
        }
      
        public static PagedList<ExternalAuthenticationRecord> GetPaged(string sortBy, int pageIndex, int pageSize) {
            return GetRepo().GetPaged(sortBy, pageIndex, pageSize);
        }

        public static PagedList<ExternalAuthenticationRecord> GetPaged(int pageIndex, int pageSize,string connectionString, string providerName) {
            return GetRepo(connectionString,providerName).GetPaged(pageIndex, pageSize);
            
        }


        public static PagedList<ExternalAuthenticationRecord> GetPaged(int pageIndex, int pageSize) {
            return GetRepo().GetPaged(pageIndex, pageSize);
            
        }

        public string KeyName()
        {
            return "Id";
        }

        public object KeyValue()
        {
            return this.Id;
        }
        
        public void SetKeyValue(object value) {
            if (value != null && value!=DBNull.Value) {
                var settable = value.ChangeTypeTo<int>();
                this.GetType().GetProperty(this.KeyName()).SetValue(this, settable, null);
            }
        }
        
        public override string ToString(){
                            return this.Email.ToString();
                    }

        public override bool Equals(object obj){
            if(obj.GetType()==typeof(ExternalAuthenticationRecord)){
                ExternalAuthenticationRecord compare=(ExternalAuthenticationRecord)obj;
                return compare.KeyValue()==this.KeyValue();
            }else{
                return base.Equals(obj);
            }
        }

        
        public override int GetHashCode() {
            return this.Id;
        }
        
        public string DescriptorValue()
        {
                            return this.Email.ToString();
                    }

        public string DescriptorColumn() {
            return "Email";
        }
        public static string GetKeyColumn()
        {
            return "Id";
        }        
        public static string GetDescriptorColumn()
        {
            return "Email";
        }
        
        #region ' Foreign Keys '
        public IQueryable<Customer> Customers
        {
            get
            {
                
                  var repo=AliexpressDBA.Customer.GetRepo();
                  return from items in repo.GetAll()
                       where items.Id == _CustomerId
                       select items;
            }
        }

        #endregion
        

        int _Id;
        public int Id
        {
            get { return _Id; }
            set
            {
                if(_Id!=value){
                    _Id=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Id");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        int _CustomerId;
        public int CustomerId
        {
            get { return _CustomerId; }
            set
            {
                if(_CustomerId!=value){
                    _CustomerId=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="CustomerId");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _Email;
        public string Email
        {
            get { return _Email; }
            set
            {
                if(_Email!=value){
                    _Email=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="Email");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ExternalIdentifier;
        public string ExternalIdentifier
        {
            get { return _ExternalIdentifier; }
            set
            {
                if(_ExternalIdentifier!=value){
                    _ExternalIdentifier=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExternalIdentifier");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ExternalDisplayIdentifier;
        public string ExternalDisplayIdentifier
        {
            get { return _ExternalDisplayIdentifier; }
            set
            {
                if(_ExternalDisplayIdentifier!=value){
                    _ExternalDisplayIdentifier=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ExternalDisplayIdentifier");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OAuthToken;
        public string OAuthToken
        {
            get { return _OAuthToken; }
            set
            {
                if(_OAuthToken!=value){
                    _OAuthToken=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OAuthToken");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _OAuthAccessToken;
        public string OAuthAccessToken
        {
            get { return _OAuthAccessToken; }
            set
            {
                if(_OAuthAccessToken!=value){
                    _OAuthAccessToken=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="OAuthAccessToken");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }

        string _ProviderSystemName;
        public string ProviderSystemName
        {
            get { return _ProviderSystemName; }
            set
            {
                if(_ProviderSystemName!=value){
                    _ProviderSystemName=value;
                    var col=tbl.Columns.SingleOrDefault(x=>x.Name=="ProviderSystemName");
                    if(col!=null){
                        if(!_dirtyColumns.Any(x=>x.Name==col.Name) && _isLoaded){
                            _dirtyColumns.Add(col);
                        }
                    }
                    OnChanged();
                }
            }
        }



        public DbCommand GetUpdateCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToUpdateQuery(_db.Provider).GetCommand().ToDbCommand();
            
        }
        public DbCommand GetInsertCommand() {
 
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToInsertQuery(_db.Provider).GetCommand().ToDbCommand();
        }
        
        public DbCommand GetDeleteCommand() {
            if(TestMode)
                return _db.DataProvider.CreateCommand();
            else
                return this.ToDeleteQuery(_db.Provider).GetCommand().ToDbCommand();
        }
       
        
        public void Update(){
            Update(_db.DataProvider);
        }
        
        public void Update(IDataProvider provider){
        
            
            if(this._dirtyColumns.Count>0){
                _repo.Update(this,provider);
                _dirtyColumns.Clear();    
            }
            OnSaved();
       }
 
        public void Add(){
            Add(_db.DataProvider);
        }
        
        
       
        public void Add(IDataProvider provider){

            
            var key=KeyValue();
            if(key==null){
                var newKey=_repo.Add(this,provider);
                this.SetKeyValue(newKey);
            }else{
                _repo.Add(this,provider);
            }
            SetIsNew(false);
            OnSaved();
        }
        
                
        
        public void Save() {
            Save(_db.DataProvider);
        }      
        public void Save(IDataProvider provider) {
            
           
            if (_isNew) {
                Add(provider);
                
            } else {
                Update(provider);
            }
            
        }

        

        public void Delete(IDataProvider provider) {
                   
                 
            _repo.Delete(KeyValue());
            
                    }


        public void Delete() {
            Delete(_db.DataProvider);
        }


        public static void Delete(Expression<Func<ExternalAuthenticationRecord, bool>> expression) {
            var repo = GetRepo();
            
       
            
            repo.DeleteMany(expression);
            
        }

        

        public void Load(IDataReader rdr) {
            Load(rdr, true);
        }
        public void Load(IDataReader rdr, bool closeReader) {
            if (rdr.Read()) {

                try {
                    rdr.Load(this);
                    SetIsNew(false);
                    SetIsLoaded(true);
                } catch {
                    SetIsLoaded(false);
                    throw;
                }
            }else{
                SetIsLoaded(false);
            }

            if (closeReader)
                rdr.Dispose();
        }
        

    } 
}
